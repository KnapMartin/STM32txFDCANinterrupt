
CanTestG474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080083b4  080083b4  000093b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008498  08008498  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008498  08008498  00009498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084a0  080084a0  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a0  080084a0  000094a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084a4  080084a4  000094a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080084a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c0c  2000006c  08008514  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c78  08008514  0000ac78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f672  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d9c  00000000  00000000  0002970e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  0002d4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014d0  00000000  00000000  0002ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051a4  00000000  00000000  00030458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7ec  00000000  00000000  000355fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d27b  00000000  00000000  00051de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f063  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007928  00000000  00000000  0015f0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001669d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800839c 	.word	0x0800839c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800839c 	.word	0x0800839c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *data, int len)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 100);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	b29a      	uxth	r2, r3
 8000520:	2364      	movs	r3, #100	@ 0x64
 8000522:	68b9      	ldr	r1, [r7, #8]
 8000524:	4803      	ldr	r0, [pc, #12]	@ (8000534 <_write+0x24>)
 8000526:	f003 f90d 	bl	8003744 <HAL_UART_Transmit>
	return len;
 800052a:	687b      	ldr	r3, [r7, #4]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200000ec 	.word	0x200000ec

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fc77 	bl	8000e2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f826 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f91c 	bl	8000780 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000548:	f000 f86e 	bl	8000628 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 800054c:	f000 f8cc 	bl	80006e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000550:	f003 ffe8 	bl	8004524 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semCanTx */
  semCanTxHandle = osSemaphoreNew(1, 1, &semCanTx_attributes);
 8000554:	4a09      	ldr	r2, [pc, #36]	@ (800057c <main+0x44>)
 8000556:	2101      	movs	r1, #1
 8000558:	2001      	movs	r0, #1
 800055a:	f004 f8bf 	bl	80046dc <osSemaphoreNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a07      	ldr	r2, [pc, #28]	@ (8000580 <main+0x48>)
 8000562:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000564:	4a07      	ldr	r2, [pc, #28]	@ (8000584 <main+0x4c>)
 8000566:	2100      	movs	r1, #0
 8000568:	4807      	ldr	r0, [pc, #28]	@ (8000588 <main+0x50>)
 800056a:	f004 f825 	bl	80045b8 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a06      	ldr	r2, [pc, #24]	@ (800058c <main+0x54>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f003 fffa 	bl	800456c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x40>
 800057c:	08008438 	.word	0x08008438
 8000580:	20000184 	.word	0x20000184
 8000584:	08008414 	.word	0x08008414
 8000588:	08000895 	.word	0x08000895
 800058c:	20000180 	.word	0x20000180

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2238      	movs	r2, #56	@ 0x38
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f007 fc3a 	bl	8007e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f001 fcc8 	bl	8001f48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2340      	movs	r3, #64	@ 0x40
 80005c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005ce:	2304      	movs	r3, #4
 80005d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005d2:	2355      	movs	r3, #85	@ 0x55
 80005d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fd62 	bl	80020b0 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005f2:	f000 f9b1 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2303      	movs	r3, #3
 80005fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2104      	movs	r1, #4
 800060e:	4618      	mov	r0, r3
 8000610:	f002 f860 	bl	80026d4 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800061a:	f000 f99d 	bl	8000958 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	@ 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800062e:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000630:	4a2c      	ldr	r2, [pc, #176]	@ (80006e4 <MX_FDCAN1_Init+0xbc>)
 8000632:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000634:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000636:	2201      	movs	r2, #1
 8000638:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800063a:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000646:	4b26      	ldr	r3, [pc, #152]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000648:	2200      	movs	r2, #0
 800064a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800064c:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 800064e:	2200      	movs	r2, #0
 8000650:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000652:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000654:	2200      	movs	r2, #0
 8000656:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 283;
 8000658:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 800065a:	f240 121b 	movw	r2, #283	@ 0x11b
 800065e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000662:	2201      	movs	r2, #1
 8000664:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8000666:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000668:	2201      	movs	r2, #1
 800066a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 800066c:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 800066e:	2201      	movs	r2, #1
 8000670:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000672:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000674:	2201      	movs	r2, #1
 8000676:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000678:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 800067a:	2201      	movs	r2, #1
 800067c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800067e:	4b18      	ldr	r3, [pc, #96]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000680:	2201      	movs	r2, #1
 8000682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000684:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000686:	2201      	movs	r2, #1
 8000688:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 800068c:	2200      	movs	r2, #0
 800068e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000692:	2200      	movs	r2, #0
 8000694:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 8000698:	2200      	movs	r2, #0
 800069a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800069c:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 800069e:	f000 fcff 	bl	80010a0 <HAL_FDCAN_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 80006a8:	f000 f956 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef canFilterConfig;
  canFilterConfig.IdType = FDCAN_STANDARD_ID;
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIndex = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006b8:	2301      	movs	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterID1 = 0x000;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterID2 = 0x010;
 80006c0:	2310      	movs	r3, #16
 80006c2:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &canFilterConfig) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_FDCAN1_Init+0xb8>)
 80006ca:	f000 fe43 	bl	8001354 <HAL_FDCAN_ConfigFilter>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_FDCAN1_Init+0xb0>
  {
	  Error_Handler();
 80006d4:	f000 f940 	bl	8000958 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000088 	.word	0x20000088
 80006e4:	40006400 	.word	0x40006400

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 80006ee:	4a23      	ldr	r2, [pc, #140]	@ (800077c <MX_USART2_UART_Init+0x94>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000730:	4811      	ldr	r0, [pc, #68]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000732:	f002 ffb7 	bl	80036a4 <HAL_UART_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800073c:	f000 f90c 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	480d      	ldr	r0, [pc, #52]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000744:	f003 fde0 	bl	8004308 <HAL_UARTEx_SetTxFifoThreshold>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800074e:	f000 f903 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4808      	ldr	r0, [pc, #32]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000756:	f003 fe15 	bl	8004384 <HAL_UARTEx_SetRxFifoThreshold>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000760:	f000 f8fa 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000766:	f003 fd96 	bl	8004296 <HAL_UARTEx_DisableFifoMode>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000770:	f000 f8f2 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000ec 	.word	0x200000ec
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b2f      	ldr	r3, [pc, #188]	@ (8000854 <MX_GPIO_Init+0xd4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	4a2e      	ldr	r2, [pc, #184]	@ (8000854 <MX_GPIO_Init+0xd4>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	4a28      	ldr	r2, [pc, #160]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007b4:	f043 0320 	orr.w	r3, r3, #32
 80007b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ba:	4b26      	ldr	r3, [pc, #152]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	f003 0320 	and.w	r3, r3, #32
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	4a22      	ldr	r2, [pc, #136]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d2:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2120      	movs	r1, #32
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fe:	f001 fb4d 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000808:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	480f      	ldr	r0, [pc, #60]	@ (8000858 <MX_GPIO_Init+0xd8>)
 800081a:	f001 f9bd 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800081e:	2320      	movs	r3, #32
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000838:	f001 f9ae 	bl	8001b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2105      	movs	r1, #5
 8000840:	2028      	movs	r0, #40	@ 0x28
 8000842:	f000 fc05 	bl	8001050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000846:	2028      	movs	r0, #40	@ 0x28
 8000848:	f000 fc1c 	bl	8001084 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	@ 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000
 8000858:	48000800 	.word	0x48000800

0800085c <HAL_FDCAN_TxBufferCompleteCallback>:

/* USER CODE BEGIN 4 */

//void HAL_FDCAN_TxCompleteCallback(FDCAN_HandleTypeDef *hfdcan)
void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
	if (hfdcan->Instance == FDCAN1)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a08      	ldr	r2, [pc, #32]	@ (800088c <HAL_FDCAN_TxBufferCompleteCallback+0x30>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d109      	bne.n	8000884 <HAL_FDCAN_TxBufferCompleteCallback+0x28>
	{
		// Transmission complete
		// Add your code here
		osSemaphoreRelease(semCanTxHandle);
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <HAL_FDCAN_TxBufferCompleteCallback+0x34>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f004 f80d 	bl	8004894 <osSemaphoreRelease>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800087a:	2120      	movs	r1, #32
 800087c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000880:	f001 fb24 	bl	8001ecc <HAL_GPIO_TogglePin>
	}
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40006400 	.word	0x40006400
 8000890:	20000184 	.word	0x20000184

08000894 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08e      	sub	sp, #56	@ 0x38
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800089c:	4821      	ldr	r0, [pc, #132]	@ (8000924 <StartDefaultTask+0x90>)
 800089e:	f000 fdb3 	bl	8001408 <HAL_FDCAN_Start>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <StartDefaultTask+0x18>
    {
        // Start Error
        Error_Handler();
 80008a8:	f000 f856 	bl	8000958 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_TX_COMPLETE, FDCAN_TX_BUFFER0 | FDCAN_TX_BUFFER1 | FDCAN_TX_BUFFER2) != HAL_OK)
 80008ac:	2207      	movs	r2, #7
 80008ae:	2180      	movs	r1, #128	@ 0x80
 80008b0:	481c      	ldr	r0, [pc, #112]	@ (8000924 <StartDefaultTask+0x90>)
 80008b2:	f000 fe15 	bl	80014e0 <HAL_FDCAN_ActivateNotification>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <StartDefaultTask+0x2c>
    {
        // Notification Error
        Error_Handler();
 80008bc:	f000 f84c 	bl	8000958 <Error_Handler>
    }

	FDCAN_TxHeaderTypeDef txHeader;
	txHeader.Identifier = 0x006;
 80008c0:	2306      	movs	r3, #6
 80008c2:	617b      	str	r3, [r7, #20]
	txHeader.IdType = FDCAN_STANDARD_ID;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
	txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
	txHeader.DataLength = FDCAN_DLC_BYTES_8;
 80008cc:	2308      	movs	r3, #8
 80008ce:	623b      	str	r3, [r7, #32]
	txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80008dc:	2300      	movs	r3, #0
 80008de:	633b      	str	r3, [r7, #48]	@ 0x30
	txHeader.MessageMarker = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	@ 0x34

	uint8_t txData[8] = {'C', 'A', 'N', ' ', 'm', 'e', 's', 'g'};
 80008e4:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <StartDefaultTask+0x94>)
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ee:	e883 0003 	stmia.w	r3, {r0, r1}

	printf("CANFD tx interrupt example CMSIS OS2\r\n");
 80008f2:	480e      	ldr	r0, [pc, #56]	@ (800092c <StartDefaultTask+0x98>)
 80008f4:	f007 f9b0 	bl	8007c58 <puts>
  /* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(semCanTxHandle, osWaitForever);
 80008f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <StartDefaultTask+0x9c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000900:	4618      	mov	r0, r3
 8000902:	f003 ff75 	bl	80047f0 <osSemaphoreAcquire>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK)
 8000906:	f107 020c 	add.w	r2, r7, #12
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4804      	ldr	r0, [pc, #16]	@ (8000924 <StartDefaultTask+0x90>)
 8000912:	f000 fda1 	bl	8001458 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0ed      	beq.n	80008f8 <StartDefaultTask+0x64>
		{
			// Transmission request Error
			Error_Handler();
 800091c:	f000 f81c 	bl	8000958 <Error_Handler>
		osSemaphoreAcquire(semCanTxHandle, osWaitForever);
 8000920:	e7ea      	b.n	80008f8 <StartDefaultTask+0x64>
 8000922:	bf00      	nop
 8000924:	20000088 	.word	0x20000088
 8000928:	080083f4 	.word	0x080083f4
 800092c:	080083cc 	.word	0x080083cc
 8000930:	20000184 	.word	0x20000184

08000934 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d101      	bne.n	800094a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000946:	f000 fa8b 	bl	8000e60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40001000 	.word	0x40001000

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000960:	2120      	movs	r1, #32
 8000962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000966:	f001 fab1 	bl	8001ecc <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800096a:	2064      	movs	r0, #100	@ 0x64
 800096c:	f000 fa96 	bl	8000e9c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000970:	bf00      	nop
 8000972:	e7f5      	b.n	8000960 <Error_Handler+0x8>

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_MspInit+0x50>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097e:	4a11      	ldr	r2, [pc, #68]	@ (80009c4 <HAL_MspInit+0x50>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	@ 0x60
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <HAL_MspInit+0x50>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <HAL_MspInit+0x50>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000996:	4a0b      	ldr	r2, [pc, #44]	@ (80009c4 <HAL_MspInit+0x50>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	@ 0x58
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <HAL_MspInit+0x50>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	210f      	movs	r1, #15
 80009ae:	f06f 0001 	mvn.w	r0, #1
 80009b2:	f000 fb4d 	bl	8001050 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009b6:	f001 fb6b 	bl	8002090 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09e      	sub	sp, #120	@ 0x78
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	2254      	movs	r2, #84	@ 0x54
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f007 fa15 	bl	8007e18 <memset>
  if(hfdcan->Instance==FDCAN1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a28      	ldr	r2, [pc, #160]	@ (8000a94 <HAL_FDCAN_MspInit+0xcc>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d149      	bne.n	8000a8c <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80009fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a02:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 f8b1 	bl	8002b70 <HAL_RCCEx_PeriphCLKConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a14:	f7ff ffa0 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <HAL_FDCAN_MspInit+0xd0>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a98 <HAL_FDCAN_MspInit+0xd0>)
 8000a1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a24:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <HAL_FDCAN_MspInit+0xd0>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <HAL_FDCAN_MspInit+0xd0>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	4a18      	ldr	r2, [pc, #96]	@ (8000a98 <HAL_FDCAN_MspInit+0xd0>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3c:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <HAL_FDCAN_MspInit+0xd0>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a48:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a4c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a5a:	2309      	movs	r3, #9
 8000a5c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a62:	4619      	mov	r1, r3
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a68:	f001 f896 	bl	8001b98 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2105      	movs	r1, #5
 8000a70:	2015      	movs	r0, #21
 8000a72:	f000 faed 	bl	8001050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a76:	2015      	movs	r0, #21
 8000a78:	f000 fb04 	bl	8001084 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2105      	movs	r1, #5
 8000a80:	2016      	movs	r0, #22
 8000a82:	f000 fae5 	bl	8001050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000a86:	2016      	movs	r0, #22
 8000a88:	f000 fafc 	bl	8001084 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3778      	adds	r7, #120	@ 0x78
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40006400 	.word	0x40006400
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09e      	sub	sp, #120	@ 0x78
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	2254      	movs	r2, #84	@ 0x54
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 f9ab 	bl	8007e18 <memset>
  if(huart->Instance==USART2)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b44 <HAL_UART_MspInit+0xa8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d136      	bne.n	8000b3a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 f849 	bl	8002b70 <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ae4:	f7ff ff38 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae8:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aec:	4a16      	ldr	r2, [pc, #88]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b04:	4a10      	ldr	r2, [pc, #64]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b30:	4619      	mov	r1, r3
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b36:	f001 f82f 	bl	8001b98 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3778      	adds	r7, #120	@ 0x78
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	@ 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c10 <HAL_InitTick+0xc4>)
 8000b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b60:	4a2b      	ldr	r2, [pc, #172]	@ (8000c10 <HAL_InitTick+0xc4>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b68:	4b29      	ldr	r3, [pc, #164]	@ (8000c10 <HAL_InitTick+0xc4>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 020c 	add.w	r2, r7, #12
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 ff7e 	bl	8002a80 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b84:	f001 ff50 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 8000b88:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <HAL_InitTick+0xc8>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3b01      	subs	r3, #1
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <HAL_InitTick+0xcc>)
 8000b9a:	4a20      	ldr	r2, [pc, #128]	@ (8000c1c <HAL_InitTick+0xd0>)
 8000b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <HAL_InitTick+0xcc>)
 8000ba0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ba4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c18 <HAL_InitTick+0xcc>)
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_InitTick+0xcc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_InitTick+0xcc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000bb8:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <HAL_InitTick+0xcc>)
 8000bba:	f002 fa27 	bl	800300c <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d11b      	bne.n	8000c04 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bcc:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <HAL_InitTick+0xcc>)
 8000bce:	f002 fa7f 	bl	80030d0 <HAL_TIM_Base_Start_IT>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d111      	bne.n	8000c04 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000be0:	2036      	movs	r0, #54	@ 0x36
 8000be2:	f000 fa4f 	bl	8001084 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d808      	bhi.n	8000bfe <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	2036      	movs	r0, #54	@ 0x36
 8000bf2:	f000 fa2d 	bl	8001050 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_InitTick+0xd4>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e002      	b.n	8000c04 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3730      	adds	r7, #48	@ 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	20000188 	.word	0x20000188
 8000c1c:	40001000 	.word	0x40001000
 8000c20:	20000004 	.word	0x20000004

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <FDCAN1_IT0_IRQHandler+0x10>)
 8000c62:	f000 fd23 	bl	80016ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000088 	.word	0x20000088

08000c70 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c74:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <FDCAN1_IT1_IRQHandler+0x10>)
 8000c76:	f000 fd19 	bl	80016ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000088 	.word	0x20000088

08000c84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c88:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c8c:	f001 f938 	bl	8001f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <TIM6_DAC_IRQHandler+0x10>)
 8000c9a:	f002 fa91 	bl	80031c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000188 	.word	0x20000188

08000ca8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	e00a      	b.n	8000cd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cba:	f3af 8000 	nop.w
 8000cbe:	4601      	mov	r1, r0
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60ba      	str	r2, [r7, #8]
 8000cc6:	b2ca      	uxtb	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbf0      	blt.n	8000cba <_read+0x12>
  }

  return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_isatty>:

int _isatty(int file)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	@ (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f007 f89a 	bl	8007eb4 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20020000 	.word	0x20020000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	200001d4 	.word	0x200001d4
 8000db4:	20001c78 	.word	0x20001c78

08000db8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de0:	f7ff ffea 	bl	8000db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	@ (8000e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <LoopForever+0xe>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e28 <LoopForever+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f007 f859 	bl	8007ec0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e0e:	f7ff fb93 	bl	8000538 <main>

08000e12 <LoopForever>:

LoopForever:
    b LoopForever
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
  ldr   r0, =_estack
 8000e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e20:	080084a8 	.word	0x080084a8
  ldr r2, =_sbss
 8000e24:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e28:	20001c78 	.word	0x20001c78

08000e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_2_IRQHandler>

08000e2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f8fe 	bl	800103a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f7ff fe84 	bl	8000b4c <HAL_InitTick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	e001      	b.n	8000e54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e50:	f7ff fd90 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e54:	79fb      	ldrb	r3, [r7, #7]

}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HAL_IncTick+0x1c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a03      	ldr	r2, [pc, #12]	@ (8000e7c <HAL_IncTick+0x1c>)
 8000e70:	6013      	str	r3, [r2, #0]
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	200001d8 	.word	0x200001d8
 8000e80:	20000008 	.word	0x20000008

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200001d8 	.word	0x200001d8

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000eb4:	d004      	beq.n	8000ec0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <HAL_Delay+0x40>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec0:	bf00      	nop
 8000ec2:	f7ff ffdf 	bl	8000e84 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d8f7      	bhi.n	8000ec2 <HAL_Delay+0x26>
  {
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	@ (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	@ (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	@ (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	@ 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff4c 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800105e:	f7ff ff63 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 8001062:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	6978      	ldr	r0, [r7, #20]
 800106a:	f7ff ffb3 	bl	8000fd4 <NVIC_EncodePriority>
 800106e:	4602      	mov	r2, r0
 8001070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff82 	bl	8000f80 <__NVIC_SetPriority>
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff56 	bl	8000f44 <__NVIC_EnableIRQ>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e147      	b.n	8001342 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d106      	bne.n	80010cc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fc7e 	bl	80009c8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	699a      	ldr	r2, [r3, #24]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0210 	bic.w	r2, r2, #16
 80010da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010dc:	f7ff fed2 	bl	8000e84 <HAL_GetTick>
 80010e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010e2:	e012      	b.n	800110a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010e4:	f7ff fece 	bl	8000e84 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b0a      	cmp	r3, #10
 80010f0:	d90b      	bls.n	800110a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e11b      	b.n	8001342 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b08      	cmp	r3, #8
 8001116:	d0e5      	beq.n	80010e4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001128:	f7ff feac 	bl	8000e84 <HAL_GetTick>
 800112c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800112e:	e012      	b.n	8001156 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001130:	f7ff fea8 	bl	8000e84 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b0a      	cmp	r3, #10
 800113c:	d90b      	bls.n	8001156 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2203      	movs	r2, #3
 800114e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e0f5      	b.n	8001342 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0e5      	beq.n	8001130 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	699a      	ldr	r2, [r3, #24]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0202 	orr.w	r2, r2, #2
 8001172:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a74      	ldr	r2, [pc, #464]	@ (800134c <HAL_FDCAN_Init+0x2ac>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d103      	bne.n	8001186 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800117e:	4a74      	ldr	r2, [pc, #464]	@ (8001350 <HAL_FDCAN_Init+0x2b0>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7c1b      	ldrb	r3, [r3, #16]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d108      	bne.n	80011a0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	699a      	ldr	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800119c:	619a      	str	r2, [r3, #24]
 800119e:	e007      	b.n	80011b0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	699a      	ldr	r2, [r3, #24]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7c5b      	ldrb	r3, [r3, #17]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d108      	bne.n	80011ca <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	699a      	ldr	r2, [r3, #24]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011c6:	619a      	str	r2, [r3, #24]
 80011c8:	e007      	b.n	80011da <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	699a      	ldr	r2, [r3, #24]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7c9b      	ldrb	r3, [r3, #18]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d108      	bne.n	80011f4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	699a      	ldr	r2, [r3, #24]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	e007      	b.n	8001204 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	699a      	ldr	r2, [r3, #24]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001202:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	699a      	ldr	r2, [r3, #24]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001228:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0210 	bic.w	r2, r2, #16
 8001238:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d108      	bne.n	8001254 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 0204 	orr.w	r2, r2, #4
 8001250:	619a      	str	r2, [r3, #24]
 8001252:	e02c      	b.n	80012ae <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d028      	beq.n	80012ae <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d01c      	beq.n	800129e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	699a      	ldr	r2, [r3, #24]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001272:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0210 	orr.w	r2, r2, #16
 8001282:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b03      	cmp	r3, #3
 800128a:	d110      	bne.n	80012ae <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0220 	orr.w	r2, r2, #32
 800129a:	619a      	str	r2, [r3, #24]
 800129c:	e007      	b.n	80012ae <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	699a      	ldr	r2, [r3, #24]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0220 	orr.w	r2, r2, #32
 80012ac:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012be:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012c6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012d6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012d8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012e2:	d115      	bne.n	8001310 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ee:	3b01      	subs	r3, #1
 80012f0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012f2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f8:	3b01      	subs	r3, #1
 80012fa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012fc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001304:	3b01      	subs	r3, #1
 8001306:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800130c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800130e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fb4e 	bl	80019c8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40006400 	.word	0x40006400
 8001350:	40006500 	.word	0x40006500

08001354 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001364:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d002      	beq.n	8001372 <HAL_FDCAN_ConfigFilter+0x1e>
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d13d      	bne.n	80013ee <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d119      	bne.n	80013ae <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001386:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800138e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e01d      	b.n	80013ea <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	075a      	lsls	r2, r3, #29
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	079a      	lsls	r2, r3, #30
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	3304      	adds	r3, #4
 80013e2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e006      	b.n	80013fc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f2:	f043 0202 	orr.w	r2, r3, #2
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
  }
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d110      	bne.n	800143e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2202      	movs	r2, #2
 8001420:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e006      	b.n	800144c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001442:	f043 0204 	orr.w	r2, r3, #4
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
  }
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d12c      	bne.n	80014ca <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d007      	beq.n	8001490 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001484:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e023      	b.n	80014d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001498:	0c1b      	lsrs	r3, r3, #16
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 fafa 	bl	8001aa0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	fa01 f202 	lsl.w	r2, r1, r2
 80014b8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80014bc:	2201      	movs	r2, #1
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	409a      	lsls	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e006      	b.n	80014d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ce:	f043 0208 	orr.w	r2, r3, #8
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
  }
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014f2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d003      	beq.n	8001502 <HAL_FDCAN_ActivateNotification+0x22>
 80014fa:	7dfb      	ldrb	r3, [r7, #23]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	f040 80c8 	bne.w	8001692 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001508:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d004      	beq.n	800151e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d03b      	beq.n	8001596 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d031      	beq.n	8001596 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b00      	cmp	r3, #0
 8001544:	d027      	beq.n	8001596 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d01d      	beq.n	8001596 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d013      	beq.n	8001596 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00c      	beq.n	80015a6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0201 	orr.w	r2, r2, #1
 80015a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d004      	beq.n	80015ba <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d13b      	bne.n	8001632 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d131      	bne.n	8001632 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d127      	bne.n	8001632 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d11d      	bne.n	8001632 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2b00      	cmp	r3, #0
 8001608:	d113      	bne.n	8001632 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001610:	2b00      	cmp	r3, #0
 8001612:	d004      	beq.n	800161e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00c      	beq.n	8001642 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0202 	orr.w	r2, r2, #2
 8001640:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001648:	2b00      	cmp	r3, #0
 800164a:	d009      	beq.n	8001660 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	430a      	orrs	r2, r1
 800165c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	430a      	orrs	r2, r1
 800167a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	430a      	orrs	r2, r1
 800168c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e006      	b.n	80016a0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001696:	f043 0202 	orr.w	r2, r3, #2
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
  }
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	@ 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016ba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016c8:	4013      	ands	r3, r2
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016e0:	4013      	ands	r3, r2
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f8:	4013      	ands	r3, r2
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001702:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001706:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800170e:	6a3a      	ldr	r2, [r7, #32]
 8001710:	4013      	ands	r3, r2
 8001712:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800171a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800171e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	4013      	ands	r3, r2
 800172a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001732:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800173a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2240      	movs	r2, #64	@ 0x40
 8001756:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f916 	bl	800198a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d019      	beq.n	800179c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d014      	beq.n	800179c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800177a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001792:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001794:	6939      	ldr	r1, [r7, #16]
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8d8 	bl	800194c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800179c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017a8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80017aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f8a2 	bl	80018f6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80017b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80017c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f8a2 	bl	800190c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80017d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f8a2 	bl	8001922 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00c      	beq.n	8001802 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f89b 	bl	8001938 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001808:	2b00      	cmp	r3, #0
 800180a:	d018      	beq.n	800183e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001812:	2b00      	cmp	r3, #0
 8001814:	d013      	beq.n	800183e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800181e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2280      	movs	r2, #128	@ 0x80
 8001834:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001836:	68f9      	ldr	r1, [r7, #12]
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff f80f 	bl	800085c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00c      	beq.n	8001862 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800185a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f880 	bl	8001962 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00c      	beq.n	8001886 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d007      	beq.n	8001886 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800187e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f878 	bl	8001976 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00f      	beq.n	80018b0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00a      	beq.n	80018b0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80018be:	69f9      	ldr	r1, [r7, #28]
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f876 	bl	80019b2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d009      	beq.n	80018e0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6a3a      	ldr	r2, [r7, #32]
 80018d2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f858 	bl	800199e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80018ee:	bf00      	nop
 80018f0:	3730      	adds	r7, #48	@ 0x30
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80019d0:	4b30      	ldr	r3, [pc, #192]	@ (8001a94 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80019d2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2f      	ldr	r2, [pc, #188]	@ (8001a98 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d103      	bne.n	80019e6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80019e4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a2c      	ldr	r2, [pc, #176]	@ (8001a9c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d103      	bne.n	80019f8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80019f6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a06:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0e:	041a      	lsls	r2, r3, #16
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a2c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a34:	061a      	lsls	r2, r3, #24
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e005      	b.n	8001a7a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3304      	adds	r3, #4
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3f3      	bcc.n	8001a6e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001a86:	bf00      	nop
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	4000a400 	.word	0x4000a400
 8001a98:	40006800 	.word	0x40006800
 8001a9c:	40006c00 	.word	0x40006c00

08001aa0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10a      	bne.n	8001acc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001abe:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e00a      	b.n	8001ae2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001ad4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001ada:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001adc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ae0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001aec:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001af2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001af8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	440b      	add	r3, r1
 8001b14:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e020      	b.n	8001b76 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3303      	adds	r3, #3
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3302      	adds	r3, #2
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	440b      	add	r3, r1
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b4c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	440b      	add	r3, r1
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001b5a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	440a      	add	r2, r1
 8001b62:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001b64:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3304      	adds	r3, #4
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	4a06      	ldr	r2, [pc, #24]	@ (8001b94 <FDCAN_CopyMessageToRAM+0xf4>)
 8001b7c:	5cd3      	ldrb	r3, [r2, r3]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d3d6      	bcc.n	8001b34 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001b86:	bf00      	nop
 8001b88:	bf00      	nop
 8001b8a:	3724      	adds	r7, #36	@ 0x24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	08008460 	.word	0x08008460

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ba6:	e15a      	b.n	8001e5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 814c 	beq.w	8001e58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d005      	beq.n	8001bd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d130      	bne.n	8001c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c0e:	2201      	movs	r2, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 0201 	and.w	r2, r3, #1
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d017      	beq.n	8001c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d123      	bne.n	8001cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	6939      	ldr	r1, [r7, #16]
 8001cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0203 	and.w	r2, r3, #3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80a6 	beq.w	8001e58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0c:	4b5b      	ldr	r3, [pc, #364]	@ (8001e7c <HAL_GPIO_Init+0x2e4>)
 8001d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d10:	4a5a      	ldr	r2, [pc, #360]	@ (8001e7c <HAL_GPIO_Init+0x2e4>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d18:	4b58      	ldr	r3, [pc, #352]	@ (8001e7c <HAL_GPIO_Init+0x2e4>)
 8001d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d24:	4a56      	ldr	r2, [pc, #344]	@ (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d4e:	d01f      	beq.n	8001d90 <HAL_GPIO_Init+0x1f8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a4c      	ldr	r2, [pc, #304]	@ (8001e84 <HAL_GPIO_Init+0x2ec>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d019      	beq.n	8001d8c <HAL_GPIO_Init+0x1f4>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a4b      	ldr	r2, [pc, #300]	@ (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d013      	beq.n	8001d88 <HAL_GPIO_Init+0x1f0>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a4a      	ldr	r2, [pc, #296]	@ (8001e8c <HAL_GPIO_Init+0x2f4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00d      	beq.n	8001d84 <HAL_GPIO_Init+0x1ec>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a49      	ldr	r2, [pc, #292]	@ (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d007      	beq.n	8001d80 <HAL_GPIO_Init+0x1e8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a48      	ldr	r2, [pc, #288]	@ (8001e94 <HAL_GPIO_Init+0x2fc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_GPIO_Init+0x1e4>
 8001d78:	2305      	movs	r3, #5
 8001d7a:	e00a      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d7c:	2306      	movs	r3, #6
 8001d7e:	e008      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e006      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d84:	2303      	movs	r3, #3
 8001d86:	e004      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e002      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d90:	2300      	movs	r3, #0
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	f002 0203 	and.w	r2, r2, #3
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	4093      	lsls	r3, r2
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da2:	4937      	ldr	r1, [pc, #220]	@ (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db0:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dd4:	4a30      	ldr	r2, [pc, #192]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dda:	4b2f      	ldr	r3, [pc, #188]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dfe:	4a26      	ldr	r2, [pc, #152]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e04:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e28:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e52:	4a11      	ldr	r2, [pc, #68]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f47f ae9d 	bne.w	8001ba8 <HAL_GPIO_Init+0x10>
  }
}
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40010000 	.word	0x40010000
 8001e84:	48000400 	.word	0x48000400
 8001e88:	48000800 	.word	0x48000800
 8001e8c:	48000c00 	.word	0x48000c00
 8001e90:	48001000 	.word	0x48001000
 8001e94:	48001400 	.word	0x48001400
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43d9      	mvns	r1, r3
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	400b      	ands	r3, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f0a:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d006      	beq.n	8001f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f16:	4a05      	ldr	r2, [pc, #20]	@ (8001f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f806 	bl	8001f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40010400 	.word	0x40010400

08001f30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d141      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f56:	4b4b      	ldr	r3, [pc, #300]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f62:	d131      	bne.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f64:	4b47      	ldr	r3, [pc, #284]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f6a:	4a46      	ldr	r2, [pc, #280]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f74:	4b43      	ldr	r3, [pc, #268]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f7c:	4a41      	ldr	r2, [pc, #260]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f84:	4b40      	ldr	r3, [pc, #256]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2232      	movs	r2, #50	@ 0x32
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	3301      	adds	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9a:	e002      	b.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa2:	4b38      	ldr	r3, [pc, #224]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fae:	d102      	bne.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f2      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fb6:	4b33      	ldr	r3, [pc, #204]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc2:	d158      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e057      	b.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fce:	4a2d      	ldr	r2, [pc, #180]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fd8:	e04d      	b.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fe0:	d141      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe2:	4b28      	ldr	r3, [pc, #160]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fee:	d131      	bne.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff0:	4b24      	ldr	r3, [pc, #144]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ff6:	4a23      	ldr	r2, [pc, #140]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002000:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002008:	4a1e      	ldr	r2, [pc, #120]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800200e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002010:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2232      	movs	r2, #50	@ 0x32
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	4a1c      	ldr	r2, [pc, #112]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	0c9b      	lsrs	r3, r3, #18
 8002022:	3301      	adds	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002026:	e002      	b.n	800202e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3b01      	subs	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203a:	d102      	bne.n	8002042 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f2      	bne.n	8002028 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002042:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800204e:	d112      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e011      	b.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002054:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002060:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002064:	e007      	b.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002066:	4b07      	ldr	r3, [pc, #28]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800206e:	4a05      	ldr	r2, [pc, #20]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002074:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40007000 	.word	0x40007000
 8002088:	20000000 	.word	0x20000000
 800208c:	431bde83 	.word	0x431bde83

08002090 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002094:	4b05      	ldr	r3, [pc, #20]	@ (80020ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800209a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800209e:	6093      	str	r3, [r2, #8]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40007000 	.word	0x40007000

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e2fe      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d075      	beq.n	80021ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ce:	4b97      	ldr	r3, [pc, #604]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d8:	4b94      	ldr	r3, [pc, #592]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d102      	bne.n	80020ee <HAL_RCC_OscConfig+0x3e>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d002      	beq.n	80020f4 <HAL_RCC_OscConfig+0x44>
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d10b      	bne.n	800210c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	4b8d      	ldr	r3, [pc, #564]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d05b      	beq.n	80021b8 <HAL_RCC_OscConfig+0x108>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d157      	bne.n	80021b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e2d9      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002114:	d106      	bne.n	8002124 <HAL_RCC_OscConfig+0x74>
 8002116:	4b85      	ldr	r3, [pc, #532]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a84      	ldr	r2, [pc, #528]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e01d      	b.n	8002160 <HAL_RCC_OscConfig+0xb0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x98>
 800212e:	4b7f      	ldr	r3, [pc, #508]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7e      	ldr	r2, [pc, #504]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b7c      	ldr	r3, [pc, #496]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7b      	ldr	r2, [pc, #492]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0xb0>
 8002148:	4b78      	ldr	r3, [pc, #480]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a77      	ldr	r2, [pc, #476]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b75      	ldr	r3, [pc, #468]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a74      	ldr	r2, [pc, #464]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800215e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7fe fe8c 	bl	8000e84 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7fe fe88 	bl	8000e84 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	@ 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e29e      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002182:	4b6a      	ldr	r3, [pc, #424]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0xc0>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7fe fe78 	bl	8000e84 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7fe fe74 	bl	8000e84 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	@ 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e28a      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021aa:	4b60      	ldr	r3, [pc, #384]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0xe8>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d075      	beq.n	80022b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c6:	4b59      	ldr	r3, [pc, #356]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d0:	4b56      	ldr	r3, [pc, #344]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	2b0c      	cmp	r3, #12
 80021de:	d102      	bne.n	80021e6 <HAL_RCC_OscConfig+0x136>
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d002      	beq.n	80021ec <HAL_RCC_OscConfig+0x13c>
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d11f      	bne.n	800222c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ec:	4b4f      	ldr	r3, [pc, #316]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_OscConfig+0x154>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e25d      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b49      	ldr	r3, [pc, #292]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	061b      	lsls	r3, r3, #24
 8002212:	4946      	ldr	r1, [pc, #280]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002218:	4b45      	ldr	r3, [pc, #276]	@ (8002330 <HAL_RCC_OscConfig+0x280>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fc95 	bl	8000b4c <HAL_InitTick>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d043      	beq.n	80022b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e249      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d023      	beq.n	800227c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b3d      	ldr	r3, [pc, #244]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a3c      	ldr	r2, [pc, #240]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe fe20 	bl	8000e84 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002248:	f7fe fe1c 	bl	8000e84 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e232      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225a:	4b34      	ldr	r3, [pc, #208]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002266:	4b31      	ldr	r3, [pc, #196]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	061b      	lsls	r3, r3, #24
 8002274:	492d      	ldr	r1, [pc, #180]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
 800227a:	e01a      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227c:	4b2b      	ldr	r3, [pc, #172]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a2a      	ldr	r2, [pc, #168]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002282:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fdfc 	bl	8000e84 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002290:	f7fe fdf8 	bl	8000e84 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e20e      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a2:	4b22      	ldr	r3, [pc, #136]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x1e0>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d041      	beq.n	8002342 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01c      	beq.n	8002300 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c6:	4b19      	ldr	r3, [pc, #100]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80022c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022cc:	4a17      	ldr	r2, [pc, #92]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7fe fdd5 	bl	8000e84 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022de:	f7fe fdd1 	bl	8000e84 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1e7      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0ef      	beq.n	80022de <HAL_RCC_OscConfig+0x22e>
 80022fe:	e020      	b.n	8002342 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002300:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002306:	4a09      	ldr	r2, [pc, #36]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7fe fdb8 	bl	8000e84 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002316:	e00d      	b.n	8002334 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7fe fdb4 	bl	8000e84 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d906      	bls.n	8002334 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1ca      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002334:	4b8c      	ldr	r3, [pc, #560]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ea      	bne.n	8002318 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 80a6 	beq.w	800249c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002354:	4b84      	ldr	r3, [pc, #528]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_OscConfig+0x2b4>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x2b6>
 8002364:	2300      	movs	r3, #0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00d      	beq.n	8002386 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b7f      	ldr	r3, [pc, #508]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	4a7e      	ldr	r2, [pc, #504]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	@ 0x58
 8002376:	4b7c      	ldr	r3, [pc, #496]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002386:	4b79      	ldr	r3, [pc, #484]	@ (800256c <HAL_RCC_OscConfig+0x4bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d118      	bne.n	80023c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002392:	4b76      	ldr	r3, [pc, #472]	@ (800256c <HAL_RCC_OscConfig+0x4bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a75      	ldr	r2, [pc, #468]	@ (800256c <HAL_RCC_OscConfig+0x4bc>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239e:	f7fe fd71 	bl	8000e84 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a6:	f7fe fd6d 	bl	8000e84 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e183      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b8:	4b6c      	ldr	r3, [pc, #432]	@ (800256c <HAL_RCC_OscConfig+0x4bc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d108      	bne.n	80023de <HAL_RCC_OscConfig+0x32e>
 80023cc:	4b66      	ldr	r3, [pc, #408]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d2:	4a65      	ldr	r2, [pc, #404]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023dc:	e024      	b.n	8002428 <HAL_RCC_OscConfig+0x378>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d110      	bne.n	8002408 <HAL_RCC_OscConfig+0x358>
 80023e6:	4b60      	ldr	r3, [pc, #384]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ec:	4a5e      	ldr	r2, [pc, #376]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fc:	4a5a      	ldr	r2, [pc, #360]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002406:	e00f      	b.n	8002428 <HAL_RCC_OscConfig+0x378>
 8002408:	4b57      	ldr	r3, [pc, #348]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240e:	4a56      	ldr	r2, [pc, #344]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002418:	4b53      	ldr	r3, [pc, #332]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241e:	4a52      	ldr	r2, [pc, #328]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d016      	beq.n	800245e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe fd28 	bl	8000e84 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002436:	e00a      	b.n	800244e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002438:	f7fe fd24 	bl	8000e84 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e138      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244e:	4b46      	ldr	r3, [pc, #280]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ed      	beq.n	8002438 <HAL_RCC_OscConfig+0x388>
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe fd11 	bl	8000e84 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe fd0d 	bl	8000e84 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e121      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800247c:	4b3a      	ldr	r3, [pc, #232]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ed      	bne.n	8002466 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800248a:	7ffb      	ldrb	r3, [r7, #31]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002490:	4b35      	ldr	r3, [pc, #212]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002494:	4a34      	ldr	r2, [pc, #208]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800249a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d03c      	beq.n	8002522 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01c      	beq.n	80024ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 80024b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7fe fce0 	bl	8000e84 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c8:	f7fe fcdc 	bl	8000e84 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e0f2      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024da:	4b23      	ldr	r3, [pc, #140]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 80024dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ef      	beq.n	80024c8 <HAL_RCC_OscConfig+0x418>
 80024e8:	e01b      	b.n	8002522 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 80024ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7fe fcc3 	bl	8000e84 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002502:	f7fe fcbf 	bl	8000e84 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0d5      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002516:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ef      	bne.n	8002502 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80c9 	beq.w	80026be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800252c:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b0c      	cmp	r3, #12
 8002536:	f000 8083 	beq.w	8002640 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d15e      	bne.n	8002600 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a08      	ldr	r2, [pc, #32]	@ (8002568 <HAL_RCC_OscConfig+0x4b8>)
 8002548:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800254c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe fc99 	bl	8000e84 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002554:	e00c      	b.n	8002570 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe fc95 	bl	8000e84 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d905      	bls.n	8002570 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0ab      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
 8002568:	40021000 	.word	0x40021000
 800256c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002570:	4b55      	ldr	r3, [pc, #340]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ec      	bne.n	8002556 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800257c:	4b52      	ldr	r3, [pc, #328]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	4b52      	ldr	r3, [pc, #328]	@ (80026cc <HAL_RCC_OscConfig+0x61c>)
 8002582:	4013      	ands	r3, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6a11      	ldr	r1, [r2, #32]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800258c:	3a01      	subs	r2, #1
 800258e:	0112      	lsls	r2, r2, #4
 8002590:	4311      	orrs	r1, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002596:	0212      	lsls	r2, r2, #8
 8002598:	4311      	orrs	r1, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800259e:	0852      	lsrs	r2, r2, #1
 80025a0:	3a01      	subs	r2, #1
 80025a2:	0552      	lsls	r2, r2, #21
 80025a4:	4311      	orrs	r1, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025aa:	0852      	lsrs	r2, r2, #1
 80025ac:	3a01      	subs	r2, #1
 80025ae:	0652      	lsls	r2, r2, #25
 80025b0:	4311      	orrs	r1, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025b6:	06d2      	lsls	r2, r2, #27
 80025b8:	430a      	orrs	r2, r1
 80025ba:	4943      	ldr	r1, [pc, #268]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c0:	4b41      	ldr	r3, [pc, #260]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a40      	ldr	r2, [pc, #256]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 80025c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025cc:	4b3e      	ldr	r3, [pc, #248]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a3d      	ldr	r2, [pc, #244]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 80025d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fc54 	bl	8000e84 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fc50 	bl	8000e84 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e066      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f2:	4b35      	ldr	r3, [pc, #212]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x530>
 80025fe:	e05e      	b.n	80026be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b31      	ldr	r3, [pc, #196]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a30      	ldr	r2, [pc, #192]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 8002606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800260a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fc3a 	bl	8000e84 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fc36 	bl	8000e84 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e04c      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002626:	4b28      	ldr	r3, [pc, #160]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002632:	4b25      	ldr	r3, [pc, #148]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	4924      	ldr	r1, [pc, #144]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 8002638:	4b25      	ldr	r3, [pc, #148]	@ (80026d0 <HAL_RCC_OscConfig+0x620>)
 800263a:	4013      	ands	r3, r2
 800263c:	60cb      	str	r3, [r1, #12]
 800263e:	e03e      	b.n	80026be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e039      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800264c:	4b1e      	ldr	r3, [pc, #120]	@ (80026c8 <HAL_RCC_OscConfig+0x618>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0203 	and.w	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	429a      	cmp	r2, r3
 800265e:	d12c      	bne.n	80026ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	3b01      	subs	r3, #1
 800266c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d123      	bne.n	80026ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d11b      	bne.n	80026ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d113      	bne.n	80026ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	3b01      	subs	r3, #1
 80026a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d109      	bne.n	80026ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	3b01      	subs	r3, #1
 80026b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	019f800c 	.word	0x019f800c
 80026d0:	feeefffc 	.word	0xfeeefffc

080026d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e11e      	b.n	800292a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b91      	ldr	r3, [pc, #580]	@ (8002934 <HAL_RCC_ClockConfig+0x260>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d910      	bls.n	800271c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b8e      	ldr	r3, [pc, #568]	@ (8002934 <HAL_RCC_ClockConfig+0x260>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 020f 	bic.w	r2, r3, #15
 8002702:	498c      	ldr	r1, [pc, #560]	@ (8002934 <HAL_RCC_ClockConfig+0x260>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b8a      	ldr	r3, [pc, #552]	@ (8002934 <HAL_RCC_ClockConfig+0x260>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e106      	b.n	800292a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d073      	beq.n	8002810 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d129      	bne.n	8002784 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002730:	4b81      	ldr	r3, [pc, #516]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0f4      	b.n	800292a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002740:	f000 f9d0 	bl	8002ae4 <RCC_GetSysClockFreqFromPLLSource>
 8002744:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4a7c      	ldr	r2, [pc, #496]	@ (800293c <HAL_RCC_ClockConfig+0x268>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d93f      	bls.n	80027ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800274e:	4b7a      	ldr	r3, [pc, #488]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002762:	2b00      	cmp	r3, #0
 8002764:	d033      	beq.n	80027ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800276a:	2b00      	cmp	r3, #0
 800276c:	d12f      	bne.n	80027ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800276e:	4b72      	ldr	r3, [pc, #456]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002776:	4a70      	ldr	r2, [pc, #448]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 8002778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800277c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e024      	b.n	80027ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d107      	bne.n	800279c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278c:	4b6a      	ldr	r3, [pc, #424]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0c6      	b.n	800292a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279c:	4b66      	ldr	r3, [pc, #408]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0be      	b.n	800292a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027ac:	f000 f8ce 	bl	800294c <HAL_RCC_GetSysClockFreq>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4a61      	ldr	r2, [pc, #388]	@ (800293c <HAL_RCC_ClockConfig+0x268>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d909      	bls.n	80027ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 80027c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4957      	ldr	r1, [pc, #348]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e0:	f7fe fb50 	bl	8000e84 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe fb4c 	bl	8000e84 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e095      	b.n	800292a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d023      	beq.n	8002864 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002828:	4b43      	ldr	r3, [pc, #268]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a42      	ldr	r2, [pc, #264]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 800282e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002832:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d007      	beq.n	8002850 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002840:	4b3d      	ldr	r3, [pc, #244]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002848:	4a3b      	ldr	r2, [pc, #236]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 800284a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800284e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b39      	ldr	r3, [pc, #228]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4936      	ldr	r1, [pc, #216]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
 8002862:	e008      	b.n	8002876 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b80      	cmp	r3, #128	@ 0x80
 8002868:	d105      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800286a:	4b33      	ldr	r3, [pc, #204]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	4a32      	ldr	r2, [pc, #200]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 8002870:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002874:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002876:	4b2f      	ldr	r3, [pc, #188]	@ (8002934 <HAL_RCC_ClockConfig+0x260>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d21d      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002884:	4b2b      	ldr	r3, [pc, #172]	@ (8002934 <HAL_RCC_ClockConfig+0x260>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 020f 	bic.w	r2, r3, #15
 800288c:	4929      	ldr	r1, [pc, #164]	@ (8002934 <HAL_RCC_ClockConfig+0x260>)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002894:	f7fe faf6 	bl	8000e84 <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289c:	f7fe faf2 	bl	8000e84 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e03b      	b.n	800292a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <HAL_RCC_ClockConfig+0x260>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1ed      	bne.n	800289c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4917      	ldr	r1, [pc, #92]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ea:	4b13      	ldr	r3, [pc, #76]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	490f      	ldr	r1, [pc, #60]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028fe:	f000 f825 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8002902:	4602      	mov	r2, r0
 8002904:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <HAL_RCC_ClockConfig+0x264>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	490c      	ldr	r1, [pc, #48]	@ (8002940 <HAL_RCC_ClockConfig+0x26c>)
 8002910:	5ccb      	ldrb	r3, [r1, r3]
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <HAL_RCC_ClockConfig+0x270>)
 800291c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800291e:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <HAL_RCC_ClockConfig+0x274>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe f912 	bl	8000b4c <HAL_InitTick>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40022000 	.word	0x40022000
 8002938:	40021000 	.word	0x40021000
 800293c:	04c4b400 	.word	0x04c4b400
 8002940:	08008448 	.word	0x08008448
 8002944:	20000000 	.word	0x20000000
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002952:	4b2c      	ldr	r3, [pc, #176]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b04      	cmp	r3, #4
 800295c:	d102      	bne.n	8002964 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800295e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	e047      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002964:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b08      	cmp	r3, #8
 800296e:	d102      	bne.n	8002976 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002970:	4b26      	ldr	r3, [pc, #152]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	e03e      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002976:	4b23      	ldr	r3, [pc, #140]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d136      	bne.n	80029f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002982:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800298c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3301      	adds	r3, #1
 8002998:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d10c      	bne.n	80029ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029a0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	4a16      	ldr	r2, [pc, #88]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029aa:	68d2      	ldr	r2, [r2, #12]
 80029ac:	0a12      	lsrs	r2, r2, #8
 80029ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	617b      	str	r3, [r7, #20]
      break;
 80029b8:	e00c      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ba:	4a13      	ldr	r2, [pc, #76]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	0a12      	lsrs	r2, r2, #8
 80029c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
      break;
 80029d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0e5b      	lsrs	r3, r3, #25
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	3301      	adds	r3, #1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	e001      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029f4:	693b      	ldr	r3, [r7, #16]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	00f42400 	.word	0x00f42400
 8002a0c:	016e3600 	.word	0x016e3600

08002a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a14:	4b03      	ldr	r3, [pc, #12]	@ (8002a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000

08002a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a2c:	f7ff fff0 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4904      	ldr	r1, [pc, #16]	@ (8002a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	08008458 	.word	0x08008458

08002a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a58:	f7ff ffda 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	0adb      	lsrs	r3, r3, #11
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4904      	ldr	r1, [pc, #16]	@ (8002a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	08008458 	.word	0x08008458

08002a80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a90:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	08db      	lsrs	r3, r3, #3
 8002aba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002ac2:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <HAL_RCC_GetClockConfig+0x60>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	601a      	str	r2, [r3, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40022000 	.word	0x40022000

08002ae4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aea:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3301      	adds	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d10c      	bne.n	8002b22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b08:	4a17      	ldr	r2, [pc, #92]	@ (8002b68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	4a14      	ldr	r2, [pc, #80]	@ (8002b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b12:	68d2      	ldr	r2, [r2, #12]
 8002b14:	0a12      	lsrs	r2, r2, #8
 8002b16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
    break;
 8002b20:	e00c      	b.n	8002b3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b22:	4a12      	ldr	r2, [pc, #72]	@ (8002b6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b2c:	68d2      	ldr	r2, [r2, #12]
 8002b2e:	0a12      	lsrs	r2, r2, #8
 8002b30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
    break;
 8002b3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b3c:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0e5b      	lsrs	r3, r3, #25
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	3301      	adds	r3, #1
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b56:	687b      	ldr	r3, [r7, #4]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40021000 	.word	0x40021000
 8002b68:	016e3600 	.word	0x016e3600
 8002b6c:	00f42400 	.word	0x00f42400

08002b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b78:	2300      	movs	r3, #0
 8002b7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8098 	beq.w	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b92:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10d      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	4b40      	ldr	r3, [pc, #256]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002baa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bba:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a39      	ldr	r2, [pc, #228]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc6:	f7fe f95d 	bl	8000e84 <HAL_GetTick>
 8002bca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bcc:	e009      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fe f959 	bl	8000e84 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d902      	bls.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	74fb      	strb	r3, [r7, #19]
        break;
 8002be0:	e005      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002be2:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ef      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d159      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bfe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01e      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d019      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c10:	4b23      	ldr	r3, [pc, #140]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c3c:	4a18      	ldr	r2, [pc, #96]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe f919 	bl	8000e84 <HAL_GetTick>
 8002c52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c54:	e00b      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe f915 	bl	8000e84 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d902      	bls.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c6c:	e006      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ec      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10b      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c82:	4b07      	ldr	r3, [pc, #28]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c90:	4903      	ldr	r1, [pc, #12]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c98:	e008      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	74bb      	strb	r3, [r7, #18]
 8002c9e:	e005      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cac:	7c7b      	ldrb	r3, [r7, #17]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d105      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb2:	4ba7      	ldr	r3, [pc, #668]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	4aa6      	ldr	r2, [pc, #664]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cca:	4ba1      	ldr	r3, [pc, #644]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd0:	f023 0203 	bic.w	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	499d      	ldr	r1, [pc, #628]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cec:	4b98      	ldr	r3, [pc, #608]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf2:	f023 020c 	bic.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	4995      	ldr	r1, [pc, #596]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d0e:	4b90      	ldr	r3, [pc, #576]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	498c      	ldr	r1, [pc, #560]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d30:	4b87      	ldr	r3, [pc, #540]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	4984      	ldr	r1, [pc, #528]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d52:	4b7f      	ldr	r3, [pc, #508]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	497b      	ldr	r1, [pc, #492]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d74:	4b76      	ldr	r3, [pc, #472]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	4973      	ldr	r1, [pc, #460]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d96:	4b6e      	ldr	r3, [pc, #440]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	496a      	ldr	r1, [pc, #424]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002db8:	4b65      	ldr	r3, [pc, #404]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4962      	ldr	r1, [pc, #392]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dda:	4b5d      	ldr	r3, [pc, #372]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	4959      	ldr	r1, [pc, #356]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dfc:	4b54      	ldr	r3, [pc, #336]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e02:	f023 0203 	bic.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0a:	4951      	ldr	r1, [pc, #324]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2c:	4948      	ldr	r1, [pc, #288]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d015      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e40:	4b43      	ldr	r3, [pc, #268]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	4940      	ldr	r1, [pc, #256]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e60:	4b3b      	ldr	r3, [pc, #236]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a3a      	ldr	r2, [pc, #232]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e6a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d015      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e78:	4b35      	ldr	r3, [pc, #212]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e86:	4932      	ldr	r1, [pc, #200]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e98:	4b2d      	ldr	r3, [pc, #180]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ea2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d015      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eb0:	4b27      	ldr	r3, [pc, #156]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	4924      	ldr	r1, [pc, #144]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ece:	d105      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d015      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ee8:	4b19      	ldr	r3, [pc, #100]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef6:	4916      	ldr	r1, [pc, #88]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f06:	d105      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a10      	ldr	r2, [pc, #64]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d019      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	4908      	ldr	r1, [pc, #32]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f3e:	d109      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f40:	4b03      	ldr	r3, [pc, #12]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4a02      	ldr	r2, [pc, #8]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f4a:	60d3      	str	r3, [r2, #12]
 8002f4c:	e002      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f60:	4b29      	ldr	r3, [pc, #164]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f66:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	4926      	ldr	r1, [pc, #152]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f80:	4b21      	ldr	r3, [pc, #132]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a20      	ldr	r2, [pc, #128]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d015      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002f98:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa6:	4918      	ldr	r1, [pc, #96]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fb8:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fde:	490a      	ldr	r1, [pc, #40]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fee:	d105      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a04      	ldr	r2, [pc, #16]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ffa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ffc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e049      	b.n	80030b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f841 	bl	80030ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f000 fa30 	bl	80034b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d001      	beq.n	80030e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e054      	b.n	8003192 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a26      	ldr	r2, [pc, #152]	@ (80031a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d022      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x80>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003112:	d01d      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x80>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a22      	ldr	r2, [pc, #136]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d018      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x80>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a21      	ldr	r2, [pc, #132]	@ (80031a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d013      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x80>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1f      	ldr	r2, [pc, #124]	@ (80031ac <HAL_TIM_Base_Start_IT+0xdc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00e      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x80>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1e      	ldr	r2, [pc, #120]	@ (80031b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d009      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x80>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1c      	ldr	r2, [pc, #112]	@ (80031b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x80>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1b      	ldr	r2, [pc, #108]	@ (80031b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d115      	bne.n	800317c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	4b19      	ldr	r3, [pc, #100]	@ (80031bc <HAL_TIM_Base_Start_IT+0xec>)
 8003158:	4013      	ands	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b06      	cmp	r3, #6
 8003160:	d015      	beq.n	800318e <HAL_TIM_Base_Start_IT+0xbe>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003168:	d011      	beq.n	800318e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	e008      	b.n	800318e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e000      	b.n	8003190 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40000800 	.word	0x40000800
 80031ac:	40000c00 	.word	0x40000c00
 80031b0:	40013400 	.word	0x40013400
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40015000 	.word	0x40015000
 80031bc:	00010007 	.word	0x00010007

080031c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d020      	beq.n	8003224 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01b      	beq.n	8003224 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0202 	mvn.w	r2, #2
 80031f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f931 	bl	8003472 <HAL_TIM_IC_CaptureCallback>
 8003210:	e005      	b.n	800321e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f923 	bl	800345e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f934 	bl	8003486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d020      	beq.n	8003270 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01b      	beq.n	8003270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0204 	mvn.w	r2, #4
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f90b 	bl	8003472 <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f8fd 	bl	800345e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f90e 	bl	8003486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d020      	beq.n	80032bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01b      	beq.n	80032bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0208 	mvn.w	r2, #8
 800328c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2204      	movs	r2, #4
 8003292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8e5 	bl	8003472 <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8d7 	bl	800345e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f8e8 	bl	8003486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d020      	beq.n	8003308 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01b      	beq.n	8003308 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0210 	mvn.w	r2, #16
 80032d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2208      	movs	r2, #8
 80032de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8bf 	bl	8003472 <HAL_TIM_IC_CaptureCallback>
 80032f4:	e005      	b.n	8003302 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8b1 	bl	800345e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f8c2 	bl	8003486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00c      	beq.n	800332c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0201 	mvn.w	r2, #1
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd fb04 	bl	8000934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00c      	beq.n	800335a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f969 	bl	800362c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00c      	beq.n	800337e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f961 	bl	8003640 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00c      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800339a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f87c 	bl	800349a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00c      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f06f 0220 	mvn.w	r2, #32
 80033be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f929 	bl	8003618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00c      	beq.n	80033ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80033e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f935 	bl	8003654 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00c      	beq.n	800340e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f92d 	bl	8003668 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00c      	beq.n	8003432 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800342a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f925 	bl	800367c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00c      	beq.n	8003456 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800344e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f91d 	bl	8003690 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a4c      	ldr	r2, [pc, #304]	@ (80035f4 <TIM_Base_SetConfig+0x144>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d017      	beq.n	80034f8 <TIM_Base_SetConfig+0x48>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ce:	d013      	beq.n	80034f8 <TIM_Base_SetConfig+0x48>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a49      	ldr	r2, [pc, #292]	@ (80035f8 <TIM_Base_SetConfig+0x148>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00f      	beq.n	80034f8 <TIM_Base_SetConfig+0x48>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a48      	ldr	r2, [pc, #288]	@ (80035fc <TIM_Base_SetConfig+0x14c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00b      	beq.n	80034f8 <TIM_Base_SetConfig+0x48>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a47      	ldr	r2, [pc, #284]	@ (8003600 <TIM_Base_SetConfig+0x150>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_Base_SetConfig+0x48>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a46      	ldr	r2, [pc, #280]	@ (8003604 <TIM_Base_SetConfig+0x154>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0x48>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a45      	ldr	r2, [pc, #276]	@ (8003608 <TIM_Base_SetConfig+0x158>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d108      	bne.n	800350a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a39      	ldr	r2, [pc, #228]	@ (80035f4 <TIM_Base_SetConfig+0x144>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d023      	beq.n	800355a <TIM_Base_SetConfig+0xaa>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003518:	d01f      	beq.n	800355a <TIM_Base_SetConfig+0xaa>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a36      	ldr	r2, [pc, #216]	@ (80035f8 <TIM_Base_SetConfig+0x148>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01b      	beq.n	800355a <TIM_Base_SetConfig+0xaa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a35      	ldr	r2, [pc, #212]	@ (80035fc <TIM_Base_SetConfig+0x14c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d017      	beq.n	800355a <TIM_Base_SetConfig+0xaa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a34      	ldr	r2, [pc, #208]	@ (8003600 <TIM_Base_SetConfig+0x150>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <TIM_Base_SetConfig+0xaa>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a33      	ldr	r2, [pc, #204]	@ (8003604 <TIM_Base_SetConfig+0x154>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00f      	beq.n	800355a <TIM_Base_SetConfig+0xaa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a33      	ldr	r2, [pc, #204]	@ (800360c <TIM_Base_SetConfig+0x15c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00b      	beq.n	800355a <TIM_Base_SetConfig+0xaa>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a32      	ldr	r2, [pc, #200]	@ (8003610 <TIM_Base_SetConfig+0x160>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <TIM_Base_SetConfig+0xaa>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a31      	ldr	r2, [pc, #196]	@ (8003614 <TIM_Base_SetConfig+0x164>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d003      	beq.n	800355a <TIM_Base_SetConfig+0xaa>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2c      	ldr	r2, [pc, #176]	@ (8003608 <TIM_Base_SetConfig+0x158>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d108      	bne.n	800356c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a18      	ldr	r2, [pc, #96]	@ (80035f4 <TIM_Base_SetConfig+0x144>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <TIM_Base_SetConfig+0x110>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a1a      	ldr	r2, [pc, #104]	@ (8003604 <TIM_Base_SetConfig+0x154>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00f      	beq.n	80035c0 <TIM_Base_SetConfig+0x110>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a1a      	ldr	r2, [pc, #104]	@ (800360c <TIM_Base_SetConfig+0x15c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <TIM_Base_SetConfig+0x110>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a19      	ldr	r2, [pc, #100]	@ (8003610 <TIM_Base_SetConfig+0x160>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_Base_SetConfig+0x110>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a18      	ldr	r2, [pc, #96]	@ (8003614 <TIM_Base_SetConfig+0x164>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0x110>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a13      	ldr	r2, [pc, #76]	@ (8003608 <TIM_Base_SetConfig+0x158>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d103      	bne.n	80035c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d105      	bne.n	80035e6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f023 0201 	bic.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	611a      	str	r2, [r3, #16]
  }
}
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800
 8003600:	40000c00 	.word	0x40000c00
 8003604:	40013400 	.word	0x40013400
 8003608:	40015000 	.word	0x40015000
 800360c:	40014000 	.word	0x40014000
 8003610:	40014400 	.word	0x40014400
 8003614:	40014800 	.word	0x40014800

08003618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e042      	b.n	800373c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7fd f9e7 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2224      	movs	r2, #36	@ 0x24
 80036d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fbb2 	bl	8003e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f8b3 	bl	8003860 <UART_SetConfig>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e01b      	b.n	800373c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003722:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fc31 	bl	8003f9c <UART_CheckIdleState>
 800373a:	4603      	mov	r3, r0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	@ 0x28
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375a:	2b20      	cmp	r3, #32
 800375c:	d17b      	bne.n	8003856 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_UART_Transmit+0x26>
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e074      	b.n	8003858 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2221      	movs	r2, #33	@ 0x21
 800377a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800377e:	f7fd fb81 	bl	8000e84 <HAL_GetTick>
 8003782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379c:	d108      	bne.n	80037b0 <HAL_UART_Transmit+0x6c>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	e003      	b.n	80037b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037b8:	e030      	b.n	800381c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2180      	movs	r1, #128	@ 0x80
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fc93 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e03d      	b.n	8003858 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	3302      	adds	r3, #2
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e007      	b.n	800380a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	3301      	adds	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1c8      	bne.n	80037ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2200      	movs	r2, #0
 8003830:	2140      	movs	r1, #64	@ 0x40
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fc5c 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e006      	b.n	8003858 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
  }
}
 8003858:	4618      	mov	r0, r3
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	b08c      	sub	sp, #48	@ 0x30
 8003866:	af00      	add	r7, sp, #0
 8003868:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	431a      	orrs	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	4313      	orrs	r3, r2
 8003886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4baa      	ldr	r3, [pc, #680]	@ (8003b38 <UART_SetConfig+0x2d8>)
 8003890:	4013      	ands	r3, r2
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003898:	430b      	orrs	r3, r1
 800389a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a9f      	ldr	r2, [pc, #636]	@ (8003b3c <UART_SetConfig+0x2dc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c8:	4313      	orrs	r3, r2
 80038ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80038d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ea:	f023 010f 	bic.w	r1, r3, #15
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a90      	ldr	r2, [pc, #576]	@ (8003b40 <UART_SetConfig+0x2e0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d125      	bne.n	8003950 <UART_SetConfig+0xf0>
 8003904:	4b8f      	ldr	r3, [pc, #572]	@ (8003b44 <UART_SetConfig+0x2e4>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b03      	cmp	r3, #3
 8003910:	d81a      	bhi.n	8003948 <UART_SetConfig+0xe8>
 8003912:	a201      	add	r2, pc, #4	@ (adr r2, 8003918 <UART_SetConfig+0xb8>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	08003929 	.word	0x08003929
 800391c:	08003939 	.word	0x08003939
 8003920:	08003931 	.word	0x08003931
 8003924:	08003941 	.word	0x08003941
 8003928:	2301      	movs	r3, #1
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800392e:	e116      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003930:	2302      	movs	r3, #2
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003936:	e112      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003938:	2304      	movs	r3, #4
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800393e:	e10e      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003940:	2308      	movs	r3, #8
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003946:	e10a      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003948:	2310      	movs	r3, #16
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394e:	e106      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7c      	ldr	r2, [pc, #496]	@ (8003b48 <UART_SetConfig+0x2e8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d138      	bne.n	80039cc <UART_SetConfig+0x16c>
 800395a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b44 <UART_SetConfig+0x2e4>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d82d      	bhi.n	80039c4 <UART_SetConfig+0x164>
 8003968:	a201      	add	r2, pc, #4	@ (adr r2, 8003970 <UART_SetConfig+0x110>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	080039a5 	.word	0x080039a5
 8003974:	080039c5 	.word	0x080039c5
 8003978:	080039c5 	.word	0x080039c5
 800397c:	080039c5 	.word	0x080039c5
 8003980:	080039b5 	.word	0x080039b5
 8003984:	080039c5 	.word	0x080039c5
 8003988:	080039c5 	.word	0x080039c5
 800398c:	080039c5 	.word	0x080039c5
 8003990:	080039ad 	.word	0x080039ad
 8003994:	080039c5 	.word	0x080039c5
 8003998:	080039c5 	.word	0x080039c5
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039bd 	.word	0x080039bd
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039aa:	e0d8      	b.n	8003b5e <UART_SetConfig+0x2fe>
 80039ac:	2302      	movs	r3, #2
 80039ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039b2:	e0d4      	b.n	8003b5e <UART_SetConfig+0x2fe>
 80039b4:	2304      	movs	r3, #4
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ba:	e0d0      	b.n	8003b5e <UART_SetConfig+0x2fe>
 80039bc:	2308      	movs	r3, #8
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039c2:	e0cc      	b.n	8003b5e <UART_SetConfig+0x2fe>
 80039c4:	2310      	movs	r3, #16
 80039c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ca:	e0c8      	b.n	8003b5e <UART_SetConfig+0x2fe>
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b4c <UART_SetConfig+0x2ec>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d125      	bne.n	8003a22 <UART_SetConfig+0x1c2>
 80039d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b44 <UART_SetConfig+0x2e4>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039e0:	2b30      	cmp	r3, #48	@ 0x30
 80039e2:	d016      	beq.n	8003a12 <UART_SetConfig+0x1b2>
 80039e4:	2b30      	cmp	r3, #48	@ 0x30
 80039e6:	d818      	bhi.n	8003a1a <UART_SetConfig+0x1ba>
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d00a      	beq.n	8003a02 <UART_SetConfig+0x1a2>
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d814      	bhi.n	8003a1a <UART_SetConfig+0x1ba>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <UART_SetConfig+0x19a>
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d008      	beq.n	8003a0a <UART_SetConfig+0x1aa>
 80039f8:	e00f      	b.n	8003a1a <UART_SetConfig+0x1ba>
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a00:	e0ad      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a02:	2302      	movs	r3, #2
 8003a04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a08:	e0a9      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a10:	e0a5      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a12:	2308      	movs	r3, #8
 8003a14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a18:	e0a1      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a20:	e09d      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a4a      	ldr	r2, [pc, #296]	@ (8003b50 <UART_SetConfig+0x2f0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d125      	bne.n	8003a78 <UART_SetConfig+0x218>
 8003a2c:	4b45      	ldr	r3, [pc, #276]	@ (8003b44 <UART_SetConfig+0x2e4>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a38:	d016      	beq.n	8003a68 <UART_SetConfig+0x208>
 8003a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a3c:	d818      	bhi.n	8003a70 <UART_SetConfig+0x210>
 8003a3e:	2b80      	cmp	r3, #128	@ 0x80
 8003a40:	d00a      	beq.n	8003a58 <UART_SetConfig+0x1f8>
 8003a42:	2b80      	cmp	r3, #128	@ 0x80
 8003a44:	d814      	bhi.n	8003a70 <UART_SetConfig+0x210>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <UART_SetConfig+0x1f0>
 8003a4a:	2b40      	cmp	r3, #64	@ 0x40
 8003a4c:	d008      	beq.n	8003a60 <UART_SetConfig+0x200>
 8003a4e:	e00f      	b.n	8003a70 <UART_SetConfig+0x210>
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a56:	e082      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5e:	e07e      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a60:	2304      	movs	r3, #4
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	e07a      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a68:	2308      	movs	r3, #8
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e076      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a70:	2310      	movs	r3, #16
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a76:	e072      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a35      	ldr	r2, [pc, #212]	@ (8003b54 <UART_SetConfig+0x2f4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d12a      	bne.n	8003ad8 <UART_SetConfig+0x278>
 8003a82:	4b30      	ldr	r3, [pc, #192]	@ (8003b44 <UART_SetConfig+0x2e4>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a90:	d01a      	beq.n	8003ac8 <UART_SetConfig+0x268>
 8003a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a96:	d81b      	bhi.n	8003ad0 <UART_SetConfig+0x270>
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a9c:	d00c      	beq.n	8003ab8 <UART_SetConfig+0x258>
 8003a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa2:	d815      	bhi.n	8003ad0 <UART_SetConfig+0x270>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <UART_SetConfig+0x250>
 8003aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aac:	d008      	beq.n	8003ac0 <UART_SetConfig+0x260>
 8003aae:	e00f      	b.n	8003ad0 <UART_SetConfig+0x270>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ab6:	e052      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003abe:	e04e      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac6:	e04a      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003ac8:	2308      	movs	r3, #8
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ace:	e046      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad6:	e042      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a17      	ldr	r2, [pc, #92]	@ (8003b3c <UART_SetConfig+0x2dc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d13a      	bne.n	8003b58 <UART_SetConfig+0x2f8>
 8003ae2:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <UART_SetConfig+0x2e4>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003aec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003af0:	d01a      	beq.n	8003b28 <UART_SetConfig+0x2c8>
 8003af2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003af6:	d81b      	bhi.n	8003b30 <UART_SetConfig+0x2d0>
 8003af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003afc:	d00c      	beq.n	8003b18 <UART_SetConfig+0x2b8>
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b02:	d815      	bhi.n	8003b30 <UART_SetConfig+0x2d0>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <UART_SetConfig+0x2b0>
 8003b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b0c:	d008      	beq.n	8003b20 <UART_SetConfig+0x2c0>
 8003b0e:	e00f      	b.n	8003b30 <UART_SetConfig+0x2d0>
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b16:	e022      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1e:	e01e      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003b20:	2304      	movs	r3, #4
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b26:	e01a      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003b28:	2308      	movs	r3, #8
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b2e:	e016      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003b30:	2310      	movs	r3, #16
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b36:	e012      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003b38:	cfff69f3 	.word	0xcfff69f3
 8003b3c:	40008000 	.word	0x40008000
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40004400 	.word	0x40004400
 8003b4c:	40004800 	.word	0x40004800
 8003b50:	40004c00 	.word	0x40004c00
 8003b54:	40005000 	.word	0x40005000
 8003b58:	2310      	movs	r3, #16
 8003b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4aae      	ldr	r2, [pc, #696]	@ (8003e1c <UART_SetConfig+0x5bc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	f040 8097 	bne.w	8003c98 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d823      	bhi.n	8003bba <UART_SetConfig+0x35a>
 8003b72:	a201      	add	r2, pc, #4	@ (adr r2, 8003b78 <UART_SetConfig+0x318>)
 8003b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b78:	08003b9d 	.word	0x08003b9d
 8003b7c:	08003bbb 	.word	0x08003bbb
 8003b80:	08003ba5 	.word	0x08003ba5
 8003b84:	08003bbb 	.word	0x08003bbb
 8003b88:	08003bab 	.word	0x08003bab
 8003b8c:	08003bbb 	.word	0x08003bbb
 8003b90:	08003bbb 	.word	0x08003bbb
 8003b94:	08003bbb 	.word	0x08003bbb
 8003b98:	08003bb3 	.word	0x08003bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b9c:	f7fe ff44 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 8003ba0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ba2:	e010      	b.n	8003bc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba4:	4b9e      	ldr	r3, [pc, #632]	@ (8003e20 <UART_SetConfig+0x5c0>)
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ba8:	e00d      	b.n	8003bc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003baa:	f7fe fecf 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8003bae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bb0:	e009      	b.n	8003bc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bb8:	e005      	b.n	8003bc6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003bc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8130 	beq.w	8003e2e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	4a94      	ldr	r2, [pc, #592]	@ (8003e24 <UART_SetConfig+0x5c4>)
 8003bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d305      	bcc.n	8003bfe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d903      	bls.n	8003c06 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c04:	e113      	b.n	8003e2e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	2200      	movs	r2, #0
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	60fa      	str	r2, [r7, #12]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	4a84      	ldr	r2, [pc, #528]	@ (8003e24 <UART_SetConfig+0x5c4>)
 8003c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c28:	f7fc fafa 	bl	8000220 <__aeabi_uldivmod>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	020b      	lsls	r3, r1, #8
 8003c3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c42:	0202      	lsls	r2, r0, #8
 8003c44:	6979      	ldr	r1, [r7, #20]
 8003c46:	6849      	ldr	r1, [r1, #4]
 8003c48:	0849      	lsrs	r1, r1, #1
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	4605      	mov	r5, r0
 8003c50:	eb12 0804 	adds.w	r8, r2, r4
 8003c54:	eb43 0905 	adc.w	r9, r3, r5
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	469a      	mov	sl, r3
 8003c60:	4693      	mov	fp, r2
 8003c62:	4652      	mov	r2, sl
 8003c64:	465b      	mov	r3, fp
 8003c66:	4640      	mov	r0, r8
 8003c68:	4649      	mov	r1, r9
 8003c6a:	f7fc fad9 	bl	8000220 <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4613      	mov	r3, r2
 8003c74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c7c:	d308      	bcc.n	8003c90 <UART_SetConfig+0x430>
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c84:	d204      	bcs.n	8003c90 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a3a      	ldr	r2, [r7, #32]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	e0ce      	b.n	8003e2e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c96:	e0ca      	b.n	8003e2e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca0:	d166      	bne.n	8003d70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d827      	bhi.n	8003cfa <UART_SetConfig+0x49a>
 8003caa:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <UART_SetConfig+0x450>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003cdd 	.word	0x08003cdd
 8003cb8:	08003ce5 	.word	0x08003ce5
 8003cbc:	08003cfb 	.word	0x08003cfb
 8003cc0:	08003ceb 	.word	0x08003ceb
 8003cc4:	08003cfb 	.word	0x08003cfb
 8003cc8:	08003cfb 	.word	0x08003cfb
 8003ccc:	08003cfb 	.word	0x08003cfb
 8003cd0:	08003cf3 	.word	0x08003cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd4:	f7fe fea8 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 8003cd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cda:	e014      	b.n	8003d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cdc:	f7fe feba 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 8003ce0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ce2:	e010      	b.n	8003d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce4:	4b4e      	ldr	r3, [pc, #312]	@ (8003e20 <UART_SetConfig+0x5c0>)
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ce8:	e00d      	b.n	8003d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cea:	f7fe fe2f 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8003cee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cf0:	e009      	b.n	8003d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cf8:	e005      	b.n	8003d06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8090 	beq.w	8003e2e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	4a44      	ldr	r2, [pc, #272]	@ (8003e24 <UART_SetConfig+0x5c4>)
 8003d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d20:	005a      	lsls	r2, r3, #1
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	085b      	lsrs	r3, r3, #1
 8003d28:	441a      	add	r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	2b0f      	cmp	r3, #15
 8003d38:	d916      	bls.n	8003d68 <UART_SetConfig+0x508>
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d40:	d212      	bcs.n	8003d68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	f023 030f 	bic.w	r3, r3, #15
 8003d4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	8bfb      	ldrh	r3, [r7, #30]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	8bfa      	ldrh	r2, [r7, #30]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	e062      	b.n	8003e2e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d6e:	e05e      	b.n	8003e2e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d828      	bhi.n	8003dca <UART_SetConfig+0x56a>
 8003d78:	a201      	add	r2, pc, #4	@ (adr r2, 8003d80 <UART_SetConfig+0x520>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003db5 	.word	0x08003db5
 8003d8c:	08003dcb 	.word	0x08003dcb
 8003d90:	08003dbb 	.word	0x08003dbb
 8003d94:	08003dcb 	.word	0x08003dcb
 8003d98:	08003dcb 	.word	0x08003dcb
 8003d9c:	08003dcb 	.word	0x08003dcb
 8003da0:	08003dc3 	.word	0x08003dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da4:	f7fe fe40 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 8003da8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003daa:	e014      	b.n	8003dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dac:	f7fe fe52 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 8003db0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003db2:	e010      	b.n	8003dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e20 <UART_SetConfig+0x5c0>)
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003db8:	e00d      	b.n	8003dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dba:	f7fe fdc7 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8003dbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dc0:	e009      	b.n	8003dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dc8:	e005      	b.n	8003dd6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003dd4:	bf00      	nop
    }

    if (pclk != 0U)
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d028      	beq.n	8003e2e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	4a10      	ldr	r2, [pc, #64]	@ (8003e24 <UART_SetConfig+0x5c4>)
 8003de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003de6:	461a      	mov	r2, r3
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	441a      	add	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2b0f      	cmp	r3, #15
 8003e04:	d910      	bls.n	8003e28 <UART_SetConfig+0x5c8>
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0c:	d20c      	bcs.n	8003e28 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60da      	str	r2, [r3, #12]
 8003e18:	e009      	b.n	8003e2e <UART_SetConfig+0x5ce>
 8003e1a:	bf00      	nop
 8003e1c:	40008000 	.word	0x40008000
 8003e20:	00f42400 	.word	0x00f42400
 8003e24:	08008470 	.word	0x08008470
      }
      else
      {
        ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2200      	movs	r2, #0
 8003e42:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2200      	movs	r2, #0
 8003e48:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e4a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3730      	adds	r7, #48	@ 0x30
 8003e52:	46bd      	mov	sp, r7
 8003e54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01a      	beq.n	8003f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f56:	d10a      	bne.n	8003f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  }
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b098      	sub	sp, #96	@ 0x60
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fac:	f7fc ff6a 	bl	8000e84 <HAL_GetTick>
 8003fb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d12f      	bne.n	8004020 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f88e 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d022      	beq.n	8004020 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ffa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e6      	bne.n	8003fda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e063      	b.n	80040e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b04      	cmp	r3, #4
 800402c:	d149      	bne.n	80040c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004036:	2200      	movs	r2, #0
 8004038:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f857 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d03c      	beq.n	80040c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	623b      	str	r3, [r7, #32]
   return(result);
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800405c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004066:	633b      	str	r3, [r7, #48]	@ 0x30
 8004068:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800406c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e6      	bne.n	8004048 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	60fb      	str	r3, [r7, #12]
   return(result);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3308      	adds	r3, #8
 8004098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800409a:	61fa      	str	r2, [r7, #28]
 800409c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	617b      	str	r3, [r7, #20]
   return(result);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e5      	bne.n	800407a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e012      	b.n	80040e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3758      	adds	r7, #88	@ 0x58
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004100:	e04f      	b.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004108:	d04b      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410a:	f7fc febb 	bl	8000e84 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	429a      	cmp	r2, r3
 8004118:	d302      	bcc.n	8004120 <UART_WaitOnFlagUntilTimeout+0x30>
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e04e      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d037      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b80      	cmp	r3, #128	@ 0x80
 8004136:	d034      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d031      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d110      	bne.n	800416e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2208      	movs	r2, #8
 8004152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f838 	bl	80041ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2208      	movs	r2, #8
 800415e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e029      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800417c:	d111      	bne.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f81e 	bl	80041ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e00f      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4013      	ands	r3, r2
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	bf0c      	ite	eq
 80041b2:	2301      	moveq	r3, #1
 80041b4:	2300      	movne	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d0a0      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b095      	sub	sp, #84	@ 0x54
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	61fb      	str	r3, [r7, #28]
   return(result);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004228:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800422a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800422e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e3      	bne.n	8004204 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d118      	bne.n	8004276 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	60bb      	str	r3, [r7, #8]
   return(result);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f023 0310 	bic.w	r3, r3, #16
 8004258:	647b      	str	r3, [r7, #68]	@ 0x44
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	613b      	str	r3, [r7, #16]
   return(result);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e6      	bne.n	8004244 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800428a:	bf00      	nop
 800428c:	3754      	adds	r7, #84	@ 0x54
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_UARTEx_DisableFifoMode+0x16>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e027      	b.n	80042fc <HAL_UARTEx_DisableFifoMode+0x66>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	@ 0x24
 80042b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80042da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800431c:	2302      	movs	r3, #2
 800431e:	e02d      	b.n	800437c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2224      	movs	r2, #36	@ 0x24
 800432c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f84f 	bl	8004400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004398:	2302      	movs	r3, #2
 800439a:	e02d      	b.n	80043f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	@ 0x24
 80043a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f811 	bl	8004400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800440c:	2b00      	cmp	r3, #0
 800440e:	d108      	bne.n	8004422 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004420:	e031      	b.n	8004486 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004422:	2308      	movs	r3, #8
 8004424:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004426:	2308      	movs	r3, #8
 8004428:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	0e5b      	lsrs	r3, r3, #25
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	0f5b      	lsrs	r3, r3, #29
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800444a:	7bbb      	ldrb	r3, [r7, #14]
 800444c:	7b3a      	ldrb	r2, [r7, #12]
 800444e:	4911      	ldr	r1, [pc, #68]	@ (8004494 <UARTEx_SetNbDataToProcess+0x94>)
 8004450:	5c8a      	ldrb	r2, [r1, r2]
 8004452:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004456:	7b3a      	ldrb	r2, [r7, #12]
 8004458:	490f      	ldr	r1, [pc, #60]	@ (8004498 <UARTEx_SetNbDataToProcess+0x98>)
 800445a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800445c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004460:	b29a      	uxth	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	7b7a      	ldrb	r2, [r7, #13]
 800446c:	4909      	ldr	r1, [pc, #36]	@ (8004494 <UARTEx_SetNbDataToProcess+0x94>)
 800446e:	5c8a      	ldrb	r2, [r1, r2]
 8004470:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004474:	7b7a      	ldrb	r2, [r7, #13]
 8004476:	4908      	ldr	r1, [pc, #32]	@ (8004498 <UARTEx_SetNbDataToProcess+0x98>)
 8004478:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800447a:	fb93 f3f2 	sdiv	r3, r3, r2
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	08008488 	.word	0x08008488
 8004498:	08008490 	.word	0x08008490

0800449c <__NVIC_SetPriority>:
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	6039      	str	r1, [r7, #0]
 80044a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	db0a      	blt.n	80044c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	490c      	ldr	r1, [pc, #48]	@ (80044e8 <__NVIC_SetPriority+0x4c>)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	440b      	add	r3, r1
 80044c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80044c4:	e00a      	b.n	80044dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	4908      	ldr	r1, [pc, #32]	@ (80044ec <__NVIC_SetPriority+0x50>)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	3b04      	subs	r3, #4
 80044d4:	0112      	lsls	r2, r2, #4
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	440b      	add	r3, r1
 80044da:	761a      	strb	r2, [r3, #24]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000e100 	.word	0xe000e100
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80044f4:	4b05      	ldr	r3, [pc, #20]	@ (800450c <SysTick_Handler+0x1c>)
 80044f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80044f8:	f002 f918 	bl	800672c <xTaskGetSchedulerState>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d001      	beq.n	8004506 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004502:	f003 f811 	bl	8007528 <xPortSysTickHandler>
  }
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	e000e010 	.word	0xe000e010

08004510 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004514:	2100      	movs	r1, #0
 8004516:	f06f 0004 	mvn.w	r0, #4
 800451a:	f7ff ffbf 	bl	800449c <__NVIC_SetPriority>
#endif
}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800452a:	f3ef 8305 	mrs	r3, IPSR
 800452e:	603b      	str	r3, [r7, #0]
  return(result);
 8004530:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004536:	f06f 0305 	mvn.w	r3, #5
 800453a:	607b      	str	r3, [r7, #4]
 800453c:	e00c      	b.n	8004558 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800453e:	4b0a      	ldr	r3, [pc, #40]	@ (8004568 <osKernelInitialize+0x44>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d105      	bne.n	8004552 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004546:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <osKernelInitialize+0x44>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800454c:	2300      	movs	r3, #0
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	e002      	b.n	8004558 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004552:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004556:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004558:	687b      	ldr	r3, [r7, #4]
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	200001dc 	.word	0x200001dc

0800456c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004572:	f3ef 8305 	mrs	r3, IPSR
 8004576:	603b      	str	r3, [r7, #0]
  return(result);
 8004578:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <osKernelStart+0x1a>
    stat = osErrorISR;
 800457e:	f06f 0305 	mvn.w	r3, #5
 8004582:	607b      	str	r3, [r7, #4]
 8004584:	e010      	b.n	80045a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004586:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <osKernelStart+0x48>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d109      	bne.n	80045a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800458e:	f7ff ffbf 	bl	8004510 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004592:	4b08      	ldr	r3, [pc, #32]	@ (80045b4 <osKernelStart+0x48>)
 8004594:	2202      	movs	r2, #2
 8004596:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004598:	f001 fc7a 	bl	8005e90 <vTaskStartScheduler>
      stat = osOK;
 800459c:	2300      	movs	r3, #0
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	e002      	b.n	80045a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045a8:	687b      	ldr	r3, [r7, #4]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	200001dc 	.word	0x200001dc

080045b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08e      	sub	sp, #56	@ 0x38
 80045bc:	af04      	add	r7, sp, #16
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045c8:	f3ef 8305 	mrs	r3, IPSR
 80045cc:	617b      	str	r3, [r7, #20]
  return(result);
 80045ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d17e      	bne.n	80046d2 <osThreadNew+0x11a>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d07b      	beq.n	80046d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80045da:	2380      	movs	r3, #128	@ 0x80
 80045dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80045de:	2318      	movs	r3, #24
 80045e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d045      	beq.n	800467e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <osThreadNew+0x48>
        name = attr->name;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <osThreadNew+0x6e>
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	2b38      	cmp	r3, #56	@ 0x38
 8004618:	d805      	bhi.n	8004626 <osThreadNew+0x6e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <osThreadNew+0x72>
        return (NULL);
 8004626:	2300      	movs	r3, #0
 8004628:	e054      	b.n	80046d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00e      	beq.n	8004660 <osThreadNew+0xa8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	2b5b      	cmp	r3, #91	@ 0x5b
 8004648:	d90a      	bls.n	8004660 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800464e:	2b00      	cmp	r3, #0
 8004650:	d006      	beq.n	8004660 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <osThreadNew+0xa8>
        mem = 1;
 800465a:	2301      	movs	r3, #1
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e010      	b.n	8004682 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10c      	bne.n	8004682 <osThreadNew+0xca>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d108      	bne.n	8004682 <osThreadNew+0xca>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <osThreadNew+0xca>
          mem = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	e001      	b.n	8004682 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800467e:	2300      	movs	r3, #0
 8004680:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d110      	bne.n	80046aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004690:	9202      	str	r2, [sp, #8]
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6a3a      	ldr	r2, [r7, #32]
 800469c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f001 fa50 	bl	8005b44 <xTaskCreateStatic>
 80046a4:	4603      	mov	r3, r0
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	e013      	b.n	80046d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d110      	bne.n	80046d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	f107 0310 	add.w	r3, r7, #16
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f001 fa9e 	bl	8005c04 <xTaskCreate>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d001      	beq.n	80046d2 <osThreadNew+0x11a>
            hTask = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80046d2:	693b      	ldr	r3, [r7, #16]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3728      	adds	r7, #40	@ 0x28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	@ 0x28
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ec:	f3ef 8305 	mrs	r3, IPSR
 80046f0:	613b      	str	r3, [r7, #16]
  return(result);
 80046f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d175      	bne.n	80047e4 <osSemaphoreNew+0x108>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d072      	beq.n	80047e4 <osSemaphoreNew+0x108>
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	429a      	cmp	r2, r3
 8004704:	d86e      	bhi.n	80047e4 <osSemaphoreNew+0x108>
    mem = -1;
 8004706:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800470a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d015      	beq.n	800473e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <osSemaphoreNew+0x4c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004720:	d902      	bls.n	8004728 <osSemaphoreNew+0x4c>
        mem = 1;
 8004722:	2301      	movs	r3, #1
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e00c      	b.n	8004742 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d108      	bne.n	8004742 <osSemaphoreNew+0x66>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d104      	bne.n	8004742 <osSemaphoreNew+0x66>
          mem = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	e001      	b.n	8004742 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004748:	d04c      	beq.n	80047e4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d128      	bne.n	80047a2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10a      	bne.n	800476c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2203      	movs	r2, #3
 800475c:	9200      	str	r2, [sp, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	2100      	movs	r1, #0
 8004762:	2001      	movs	r0, #1
 8004764:	f000 fa2c 	bl	8004bc0 <xQueueGenericCreateStatic>
 8004768:	61f8      	str	r0, [r7, #28]
 800476a:	e005      	b.n	8004778 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800476c:	2203      	movs	r2, #3
 800476e:	2100      	movs	r1, #0
 8004770:	2001      	movs	r0, #1
 8004772:	f000 faa2 	bl	8004cba <xQueueGenericCreate>
 8004776:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d022      	beq.n	80047c4 <osSemaphoreNew+0xe8>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01f      	beq.n	80047c4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004784:	2300      	movs	r3, #0
 8004786:	2200      	movs	r2, #0
 8004788:	2100      	movs	r1, #0
 800478a:	69f8      	ldr	r0, [r7, #28]
 800478c:	f000 fb62 	bl	8004e54 <xQueueGenericSend>
 8004790:	4603      	mov	r3, r0
 8004792:	2b01      	cmp	r3, #1
 8004794:	d016      	beq.n	80047c4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004796:	69f8      	ldr	r0, [r7, #28]
 8004798:	f001 f800 	bl	800579c <vQueueDelete>
            hSemaphore = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	e010      	b.n	80047c4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d108      	bne.n	80047ba <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	461a      	mov	r2, r3
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fae0 	bl	8004d76 <xQueueCreateCountingSemaphoreStatic>
 80047b6:	61f8      	str	r0, [r7, #28]
 80047b8:	e004      	b.n	80047c4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fb13 	bl	8004de8 <xQueueCreateCountingSemaphore>
 80047c2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00c      	beq.n	80047e4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e001      	b.n	80047dc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80047dc:	6979      	ldr	r1, [r7, #20]
 80047de:	69f8      	ldr	r0, [r7, #28]
 80047e0:	f001 f928 	bl	8005a34 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80047e4:	69fb      	ldr	r3, [r7, #28]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d103      	bne.n	8004810 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004808:	f06f 0303 	mvn.w	r3, #3
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	e039      	b.n	8004884 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004810:	f3ef 8305 	mrs	r3, IPSR
 8004814:	60fb      	str	r3, [r7, #12]
  return(result);
 8004816:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004818:	2b00      	cmp	r3, #0
 800481a:	d022      	beq.n	8004862 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004822:	f06f 0303 	mvn.w	r3, #3
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e02c      	b.n	8004884 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800482e:	f107 0308 	add.w	r3, r7, #8
 8004832:	461a      	mov	r2, r3
 8004834:	2100      	movs	r1, #0
 8004836:	6938      	ldr	r0, [r7, #16]
 8004838:	f000 ff2e 	bl	8005698 <xQueueReceiveFromISR>
 800483c:	4603      	mov	r3, r0
 800483e:	2b01      	cmp	r3, #1
 8004840:	d003      	beq.n	800484a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004842:	f06f 0302 	mvn.w	r3, #2
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e01c      	b.n	8004884 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d019      	beq.n	8004884 <osSemaphoreAcquire+0x94>
 8004850:	4b0f      	ldr	r3, [pc, #60]	@ (8004890 <osSemaphoreAcquire+0xa0>)
 8004852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	e010      	b.n	8004884 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004862:	6839      	ldr	r1, [r7, #0]
 8004864:	6938      	ldr	r0, [r7, #16]
 8004866:	f000 fe07 	bl	8005478 <xQueueSemaphoreTake>
 800486a:	4603      	mov	r3, r0
 800486c:	2b01      	cmp	r3, #1
 800486e:	d009      	beq.n	8004884 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004876:	f06f 0301 	mvn.w	r3, #1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e002      	b.n	8004884 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800487e:	f06f 0302 	mvn.w	r3, #2
 8004882:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004884:	697b      	ldr	r3, [r7, #20]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80048aa:	f06f 0303 	mvn.w	r3, #3
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e02c      	b.n	800490c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048b2:	f3ef 8305 	mrs	r3, IPSR
 80048b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80048b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01a      	beq.n	80048f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80048be:	2300      	movs	r3, #0
 80048c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80048c2:	f107 0308 	add.w	r3, r7, #8
 80048c6:	4619      	mov	r1, r3
 80048c8:	6938      	ldr	r0, [r7, #16]
 80048ca:	f000 fc63 	bl	8005194 <xQueueGiveFromISR>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d003      	beq.n	80048dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80048d4:	f06f 0302 	mvn.w	r3, #2
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e017      	b.n	800490c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d014      	beq.n	800490c <osSemaphoreRelease+0x78>
 80048e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004918 <osSemaphoreRelease+0x84>)
 80048e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	e00b      	b.n	800490c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80048f4:	2300      	movs	r3, #0
 80048f6:	2200      	movs	r2, #0
 80048f8:	2100      	movs	r1, #0
 80048fa:	6938      	ldr	r0, [r7, #16]
 80048fc:	f000 faaa 	bl	8004e54 <xQueueGenericSend>
 8004900:	4603      	mov	r3, r0
 8004902:	2b01      	cmp	r3, #1
 8004904:	d002      	beq.n	800490c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004906:	f06f 0302 	mvn.w	r3, #2
 800490a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800490c:	697b      	ldr	r3, [r7, #20]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a07      	ldr	r2, [pc, #28]	@ (8004948 <vApplicationGetIdleTaskMemory+0x2c>)
 800492c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4a06      	ldr	r2, [pc, #24]	@ (800494c <vApplicationGetIdleTaskMemory+0x30>)
 8004932:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2280      	movs	r2, #128	@ 0x80
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	200001e0 	.word	0x200001e0
 800494c:	2000023c 	.word	0x2000023c

08004950 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a07      	ldr	r2, [pc, #28]	@ (800497c <vApplicationGetTimerTaskMemory+0x2c>)
 8004960:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4a06      	ldr	r2, [pc, #24]	@ (8004980 <vApplicationGetTimerTaskMemory+0x30>)
 8004966:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800496e:	601a      	str	r2, [r3, #0]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	2000043c 	.word	0x2000043c
 8004980:	20000498 	.word	0x20000498

08004984 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f103 0208 	add.w	r2, r3, #8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800499c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f103 0208 	add.w	r2, r3, #8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f103 0208 	add.w	r2, r3, #8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a26:	b480      	push	{r7}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a3c:	d103      	bne.n	8004a46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e00c      	b.n	8004a60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3308      	adds	r3, #8
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e002      	b.n	8004a54 <vListInsert+0x2e>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d2f6      	bcs.n	8004a4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6892      	ldr	r2, [r2, #8]
 8004aae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6852      	ldr	r2, [r2, #4]
 8004ab8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d103      	bne.n	8004acc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	1e5a      	subs	r2, r3, #1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	e7fd      	b.n	8004b14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b18:	f002 fc76 	bl	8007408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	441a      	add	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	68f9      	ldr	r1, [r7, #12]
 8004b4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	441a      	add	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	22ff      	movs	r2, #255	@ 0xff
 8004b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	22ff      	movs	r2, #255	@ 0xff
 8004b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d114      	bne.n	8004b98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01a      	beq.n	8004bac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3310      	adds	r3, #16
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 fc16 	bl	80063ac <xTaskRemoveFromEventList>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d012      	beq.n	8004bac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b86:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <xQueueGenericReset+0xd0>)
 8004b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	e009      	b.n	8004bac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3310      	adds	r3, #16
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fef1 	bl	8004984 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3324      	adds	r3, #36	@ 0x24
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff feec 	bl	8004984 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bac:	f002 fc5e 	bl	800746c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bb0:	2301      	movs	r3, #1
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08e      	sub	sp, #56	@ 0x38
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	e7fd      	b.n	8004c06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <xQueueGenericCreateStatic+0x56>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <xQueueGenericCreateStatic+0x5a>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <xQueueGenericCreateStatic+0x5c>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	623b      	str	r3, [r7, #32]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <xQueueGenericCreateStatic+0x84>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <xQueueGenericCreateStatic+0x88>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <xQueueGenericCreateStatic+0x8a>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	61fb      	str	r3, [r7, #28]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c66:	2350      	movs	r3, #80	@ 0x50
 8004c68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b50      	cmp	r3, #80	@ 0x50
 8004c6e:	d00b      	beq.n	8004c88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	61bb      	str	r3, [r7, #24]
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00d      	beq.n	8004cb0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f840 	bl	8004d30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3730      	adds	r7, #48	@ 0x30
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b08a      	sub	sp, #40	@ 0x28
 8004cbe:	af02      	add	r7, sp, #8
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	613b      	str	r3, [r7, #16]
}
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	e7fd      	b.n	8004ce2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	3350      	adds	r3, #80	@ 0x50
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f002 fca9 	bl	800764c <pvPortMalloc>
 8004cfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d011      	beq.n	8004d26 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	3350      	adds	r3, #80	@ 0x50
 8004d0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d14:	79fa      	ldrb	r2, [r7, #7]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f805 	bl	8004d30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d26:	69bb      	ldr	r3, [r7, #24]
	}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d103      	bne.n	8004d4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e002      	b.n	8004d52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d5e:	2101      	movs	r1, #1
 8004d60:	69b8      	ldr	r0, [r7, #24]
 8004d62:	f7ff fec3 	bl	8004aec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b08a      	sub	sp, #40	@ 0x28
 8004d7a:	af02      	add	r7, sp, #8
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10b      	bne.n	8004da0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	61bb      	str	r3, [r7, #24]
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	e7fd      	b.n	8004d9c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d90b      	bls.n	8004dc0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	617b      	str	r3, [r7, #20]
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2100      	movs	r1, #0
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff fef8 	bl	8004bc0 <xQueueGenericCreateStatic>
 8004dd0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004dde:	69fb      	ldr	r3, [r7, #28]
	}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10b      	bne.n	8004e10 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	613b      	str	r3, [r7, #16]
}
 8004e0a:	bf00      	nop
 8004e0c:	bf00      	nop
 8004e0e:	e7fd      	b.n	8004e0c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d90b      	bls.n	8004e30 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	60fb      	str	r3, [r7, #12]
}
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004e30:	2202      	movs	r2, #2
 8004e32:	2100      	movs	r1, #0
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff40 	bl	8004cba <xQueueGenericCreate>
 8004e3a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004e48:	697b      	ldr	r3, [r7, #20]
	}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08e      	sub	sp, #56	@ 0x38
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e62:	2300      	movs	r3, #0
 8004e64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <xQueueGenericSend+0x34>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <xQueueGenericSend+0x42>
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <xQueueGenericSend+0x46>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <xQueueGenericSend+0x48>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <xQueueGenericSend+0x64>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d103      	bne.n	8004ec6 <xQueueGenericSend+0x72>
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <xQueueGenericSend+0x76>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <xQueueGenericSend+0x78>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <xQueueGenericSend+0x94>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	623b      	str	r3, [r7, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ee8:	f001 fc20 	bl	800672c <xTaskGetSchedulerState>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d102      	bne.n	8004ef8 <xQueueGenericSend+0xa4>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <xQueueGenericSend+0xa8>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <xQueueGenericSend+0xaa>
 8004efc:	2300      	movs	r3, #0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10b      	bne.n	8004f1a <xQueueGenericSend+0xc6>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	61fb      	str	r3, [r7, #28]
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	e7fd      	b.n	8004f16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f1a:	f002 fa75 	bl	8007408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <xQueueGenericSend+0xdc>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d129      	bne.n	8004f84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f36:	f000 fc6d 	bl	8005814 <prvCopyDataToQueue>
 8004f3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d010      	beq.n	8004f66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	3324      	adds	r3, #36	@ 0x24
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 fa2f 	bl	80063ac <xTaskRemoveFromEventList>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d013      	beq.n	8004f7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f54:	4b3f      	ldr	r3, [pc, #252]	@ (8005054 <xQueueGenericSend+0x200>)
 8004f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	e00a      	b.n	8004f7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f6c:	4b39      	ldr	r3, [pc, #228]	@ (8005054 <xQueueGenericSend+0x200>)
 8004f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f7c:	f002 fa76 	bl	800746c <vPortExitCritical>
				return pdPASS;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e063      	b.n	800504c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d103      	bne.n	8004f92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f8a:	f002 fa6f 	bl	800746c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e05c      	b.n	800504c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d106      	bne.n	8004fa6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f98:	f107 0314 	add.w	r3, r7, #20
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f001 fa69 	bl	8006474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fa6:	f002 fa61 	bl	800746c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004faa:	f000 ffd9 	bl	8005f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fae:	f002 fa2b 	bl	8007408 <vPortEnterCritical>
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fb8:	b25b      	sxtb	r3, r3
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fbe:	d103      	bne.n	8004fc8 <xQueueGenericSend+0x174>
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fce:	b25b      	sxtb	r3, r3
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fd4:	d103      	bne.n	8004fde <xQueueGenericSend+0x18a>
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fde:	f002 fa45 	bl	800746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fe2:	1d3a      	adds	r2, r7, #4
 8004fe4:	f107 0314 	add.w	r3, r7, #20
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f001 fa58 	bl	80064a0 <xTaskCheckForTimeOut>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d124      	bne.n	8005040 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ff6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ff8:	f000 fd04 	bl	8005a04 <prvIsQueueFull>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d018      	beq.n	8005034 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	3310      	adds	r3, #16
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f001 f97c 	bl	8006308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005012:	f000 fc8f 	bl	8005934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005016:	f000 ffb1 	bl	8005f7c <xTaskResumeAll>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	f47f af7c 	bne.w	8004f1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005022:	4b0c      	ldr	r3, [pc, #48]	@ (8005054 <xQueueGenericSend+0x200>)
 8005024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	e772      	b.n	8004f1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005036:	f000 fc7d 	bl	8005934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800503a:	f000 ff9f 	bl	8005f7c <xTaskResumeAll>
 800503e:	e76c      	b.n	8004f1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005042:	f000 fc77 	bl	8005934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005046:	f000 ff99 	bl	8005f7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800504a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800504c:	4618      	mov	r0, r3
 800504e:	3738      	adds	r7, #56	@ 0x38
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	e000ed04 	.word	0xe000ed04

08005058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b090      	sub	sp, #64	@ 0x40
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10b      	bne.n	8005088 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005082:	bf00      	nop
 8005084:	bf00      	nop
 8005086:	e7fd      	b.n	8005084 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d103      	bne.n	8005096 <xQueueGenericSendFromISR+0x3e>
 800508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <xQueueGenericSendFromISR+0x42>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <xQueueGenericSendFromISR+0x44>
 800509a:	2300      	movs	r3, #0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050b2:	bf00      	nop
 80050b4:	bf00      	nop
 80050b6:	e7fd      	b.n	80050b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d103      	bne.n	80050c6 <xQueueGenericSendFromISR+0x6e>
 80050be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <xQueueGenericSendFromISR+0x72>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <xQueueGenericSendFromISR+0x74>
 80050ca:	2300      	movs	r3, #0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	623b      	str	r3, [r7, #32]
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050e8:	f002 fa6e 	bl	80075c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050ec:	f3ef 8211 	mrs	r2, BASEPRI
 80050f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	61fa      	str	r2, [r7, #28]
 8005102:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005104:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005106:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800510c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005110:	429a      	cmp	r2, r3
 8005112:	d302      	bcc.n	800511a <xQueueGenericSendFromISR+0xc2>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d12f      	bne.n	800517a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800511a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005120:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005128:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005130:	f000 fb70 	bl	8005814 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005134:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800513c:	d112      	bne.n	8005164 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005148:	3324      	adds	r3, #36	@ 0x24
 800514a:	4618      	mov	r0, r3
 800514c:	f001 f92e 	bl	80063ac <xTaskRemoveFromEventList>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00e      	beq.n	8005174 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e007      	b.n	8005174 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005164:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005168:	3301      	adds	r3, #1
 800516a:	b2db      	uxtb	r3, r3
 800516c:	b25a      	sxtb	r2, r3
 800516e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005174:	2301      	movs	r3, #1
 8005176:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005178:	e001      	b.n	800517e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800517a:	2300      	movs	r3, #0
 800517c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800517e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005180:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005188:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800518a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800518c:	4618      	mov	r0, r3
 800518e:	3740      	adds	r7, #64	@ 0x40
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08e      	sub	sp, #56	@ 0x38
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10b      	bne.n	80051c0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	623b      	str	r3, [r7, #32]
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	e7fd      	b.n	80051bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00b      	beq.n	80051e0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	61fb      	str	r3, [r7, #28]
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80051e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d103      	bne.n	80051f0 <xQueueGiveFromISR+0x5c>
 80051e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <xQueueGiveFromISR+0x60>
 80051f0:	2301      	movs	r3, #1
 80051f2:	e000      	b.n	80051f6 <xQueueGiveFromISR+0x62>
 80051f4:	2300      	movs	r3, #0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10b      	bne.n	8005212 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	61bb      	str	r3, [r7, #24]
}
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	e7fd      	b.n	800520e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005212:	f002 f9d9 	bl	80075c8 <vPortValidateInterruptPriority>
	__asm volatile
 8005216:	f3ef 8211 	mrs	r2, BASEPRI
 800521a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	617a      	str	r2, [r7, #20]
 800522c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800522e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005230:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005236:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800523e:	429a      	cmp	r2, r3
 8005240:	d22b      	bcs.n	800529a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005244:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005254:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800525c:	d112      	bne.n	8005284 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	d016      	beq.n	8005294 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	3324      	adds	r3, #36	@ 0x24
 800526a:	4618      	mov	r0, r3
 800526c:	f001 f89e 	bl	80063ac <xTaskRemoveFromEventList>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00e      	beq.n	8005294 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2201      	movs	r2, #1
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e007      	b.n	8005294 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005288:	3301      	adds	r3, #1
 800528a:	b2db      	uxtb	r3, r3
 800528c:	b25a      	sxtb	r2, r3
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005294:	2301      	movs	r3, #1
 8005296:	637b      	str	r3, [r7, #52]	@ 0x34
 8005298:	e001      	b.n	800529e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800529a:	2300      	movs	r3, #0
 800529c:	637b      	str	r3, [r7, #52]	@ 0x34
 800529e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f383 8811 	msr	BASEPRI, r3
}
 80052a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3738      	adds	r7, #56	@ 0x38
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08c      	sub	sp, #48	@ 0x30
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052c0:	2300      	movs	r3, #0
 80052c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <xQueueReceive+0x32>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	623b      	str	r3, [r7, #32]
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	e7fd      	b.n	80052e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d103      	bne.n	80052f4 <xQueueReceive+0x40>
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <xQueueReceive+0x44>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <xQueueReceive+0x46>
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10b      	bne.n	8005316 <xQueueReceive+0x62>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	61fb      	str	r3, [r7, #28]
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	e7fd      	b.n	8005312 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005316:	f001 fa09 	bl	800672c <xTaskGetSchedulerState>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d102      	bne.n	8005326 <xQueueReceive+0x72>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <xQueueReceive+0x76>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <xQueueReceive+0x78>
 800532a:	2300      	movs	r3, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <xQueueReceive+0x94>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	61bb      	str	r3, [r7, #24]
}
 8005342:	bf00      	nop
 8005344:	bf00      	nop
 8005346:	e7fd      	b.n	8005344 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005348:	f002 f85e 	bl	8007408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005350:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01f      	beq.n	8005398 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800535c:	f000 fac4 	bl	80058e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	1e5a      	subs	r2, r3, #1
 8005364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005366:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00f      	beq.n	8005390 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005372:	3310      	adds	r3, #16
 8005374:	4618      	mov	r0, r3
 8005376:	f001 f819 	bl	80063ac <xTaskRemoveFromEventList>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005380:	4b3c      	ldr	r3, [pc, #240]	@ (8005474 <xQueueReceive+0x1c0>)
 8005382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005390:	f002 f86c 	bl	800746c <vPortExitCritical>
				return pdPASS;
 8005394:	2301      	movs	r3, #1
 8005396:	e069      	b.n	800546c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800539e:	f002 f865 	bl	800746c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e062      	b.n	800546c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d106      	bne.n	80053ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053ac:	f107 0310 	add.w	r3, r7, #16
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 f85f 	bl	8006474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053ba:	f002 f857 	bl	800746c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053be:	f000 fdcf 	bl	8005f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053c2:	f002 f821 	bl	8007408 <vPortEnterCritical>
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053d2:	d103      	bne.n	80053dc <xQueueReceive+0x128>
 80053d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053e2:	b25b      	sxtb	r3, r3
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053e8:	d103      	bne.n	80053f2 <xQueueReceive+0x13e>
 80053ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053f2:	f002 f83b 	bl	800746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053f6:	1d3a      	adds	r2, r7, #4
 80053f8:	f107 0310 	add.w	r3, r7, #16
 80053fc:	4611      	mov	r1, r2
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 f84e 	bl	80064a0 <xTaskCheckForTimeOut>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d123      	bne.n	8005452 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800540a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800540c:	f000 fae4 	bl	80059d8 <prvIsQueueEmpty>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d017      	beq.n	8005446 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005418:	3324      	adds	r3, #36	@ 0x24
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f000 ff72 	bl	8006308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005426:	f000 fa85 	bl	8005934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800542a:	f000 fda7 	bl	8005f7c <xTaskResumeAll>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d189      	bne.n	8005348 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005434:	4b0f      	ldr	r3, [pc, #60]	@ (8005474 <xQueueReceive+0x1c0>)
 8005436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	e780      	b.n	8005348 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005448:	f000 fa74 	bl	8005934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800544c:	f000 fd96 	bl	8005f7c <xTaskResumeAll>
 8005450:	e77a      	b.n	8005348 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005454:	f000 fa6e 	bl	8005934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005458:	f000 fd90 	bl	8005f7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800545c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800545e:	f000 fabb 	bl	80059d8 <prvIsQueueEmpty>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	f43f af6f 	beq.w	8005348 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800546a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800546c:	4618      	mov	r0, r3
 800546e:	3730      	adds	r7, #48	@ 0x30
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08e      	sub	sp, #56	@ 0x38
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005482:	2300      	movs	r3, #0
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800548a:	2300      	movs	r3, #0
 800548c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800548e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10b      	bne.n	80054ac <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	623b      	str	r3, [r7, #32]
}
 80054a6:	bf00      	nop
 80054a8:	bf00      	nop
 80054aa:	e7fd      	b.n	80054a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80054ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	61fb      	str	r3, [r7, #28]
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	e7fd      	b.n	80054c8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054cc:	f001 f92e 	bl	800672c <xTaskGetSchedulerState>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d102      	bne.n	80054dc <xQueueSemaphoreTake+0x64>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <xQueueSemaphoreTake+0x68>
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <xQueueSemaphoreTake+0x6a>
 80054e0:	2300      	movs	r3, #0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10b      	bne.n	80054fe <xQueueSemaphoreTake+0x86>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	61bb      	str	r3, [r7, #24]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054fe:	f001 ff83 	bl	8007408 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d024      	beq.n	8005558 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800550e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005510:	1e5a      	subs	r2, r3, #1
 8005512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005514:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800551e:	f001 fa7f 	bl	8006a20 <pvTaskIncrementMutexHeldCount>
 8005522:	4602      	mov	r2, r0
 8005524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005526:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00f      	beq.n	8005550 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005532:	3310      	adds	r3, #16
 8005534:	4618      	mov	r0, r3
 8005536:	f000 ff39 	bl	80063ac <xTaskRemoveFromEventList>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005540:	4b54      	ldr	r3, [pc, #336]	@ (8005694 <xQueueSemaphoreTake+0x21c>)
 8005542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005550:	f001 ff8c 	bl	800746c <vPortExitCritical>
				return pdPASS;
 8005554:	2301      	movs	r3, #1
 8005556:	e098      	b.n	800568a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d112      	bne.n	8005584 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	617b      	str	r3, [r7, #20]
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800557c:	f001 ff76 	bl	800746c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005580:	2300      	movs	r3, #0
 8005582:	e082      	b.n	800568a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800558a:	f107 030c 	add.w	r3, r7, #12
 800558e:	4618      	mov	r0, r3
 8005590:	f000 ff70 	bl	8006474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005594:	2301      	movs	r3, #1
 8005596:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005598:	f001 ff68 	bl	800746c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800559c:	f000 fce0 	bl	8005f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055a0:	f001 ff32 	bl	8007408 <vPortEnterCritical>
 80055a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055aa:	b25b      	sxtb	r3, r3
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055b0:	d103      	bne.n	80055ba <xQueueSemaphoreTake+0x142>
 80055b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055c0:	b25b      	sxtb	r3, r3
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055c6:	d103      	bne.n	80055d0 <xQueueSemaphoreTake+0x158>
 80055c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055d0:	f001 ff4c 	bl	800746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055d4:	463a      	mov	r2, r7
 80055d6:	f107 030c 	add.w	r3, r7, #12
 80055da:	4611      	mov	r1, r2
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 ff5f 	bl	80064a0 <xTaskCheckForTimeOut>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d132      	bne.n	800564e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055ea:	f000 f9f5 	bl	80059d8 <prvIsQueueEmpty>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d026      	beq.n	8005642 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80055fc:	f001 ff04 	bl	8007408 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4618      	mov	r0, r3
 8005606:	f001 f8af 	bl	8006768 <xTaskPriorityInherit>
 800560a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800560c:	f001 ff2e 	bl	800746c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005612:	3324      	adds	r3, #36	@ 0x24
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	4611      	mov	r1, r2
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fe75 	bl	8006308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800561e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005620:	f000 f988 	bl	8005934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005624:	f000 fcaa 	bl	8005f7c <xTaskResumeAll>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	f47f af67 	bne.w	80054fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005630:	4b18      	ldr	r3, [pc, #96]	@ (8005694 <xQueueSemaphoreTake+0x21c>)
 8005632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	e75d      	b.n	80054fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005642:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005644:	f000 f976 	bl	8005934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005648:	f000 fc98 	bl	8005f7c <xTaskResumeAll>
 800564c:	e757      	b.n	80054fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800564e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005650:	f000 f970 	bl	8005934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005654:	f000 fc92 	bl	8005f7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005658:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800565a:	f000 f9bd 	bl	80059d8 <prvIsQueueEmpty>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	f43f af4c 	beq.w	80054fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00d      	beq.n	8005688 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800566c:	f001 fecc 	bl	8007408 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005670:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005672:	f000 f8b7 	bl	80057e4 <prvGetDisinheritPriorityAfterTimeout>
 8005676:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800567e:	4618      	mov	r0, r3
 8005680:	f001 f94a 	bl	8006918 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005684:	f001 fef2 	bl	800746c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005688:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800568a:	4618      	mov	r0, r3
 800568c:	3738      	adds	r7, #56	@ 0x38
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	e000ed04 	.word	0xe000ed04

08005698 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08e      	sub	sp, #56	@ 0x38
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	623b      	str	r3, [r7, #32]
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	e7fd      	b.n	80056c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d103      	bne.n	80056d4 <xQueueReceiveFromISR+0x3c>
 80056cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <xQueueReceiveFromISR+0x40>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <xQueueReceiveFromISR+0x42>
 80056d8:	2300      	movs	r3, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10b      	bne.n	80056f6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	61fb      	str	r3, [r7, #28]
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	e7fd      	b.n	80056f2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056f6:	f001 ff67 	bl	80075c8 <vPortValidateInterruptPriority>
	__asm volatile
 80056fa:	f3ef 8211 	mrs	r2, BASEPRI
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	61ba      	str	r2, [r7, #24]
 8005710:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005712:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005714:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800571c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d02f      	beq.n	8005782 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005730:	f000 f8da 	bl	80058e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005736:	1e5a      	subs	r2, r3, #1
 8005738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800573c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005744:	d112      	bne.n	800576c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d016      	beq.n	800577c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	3310      	adds	r3, #16
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fe2a 	bl	80063ac <xTaskRemoveFromEventList>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00b      	beq.n	800577c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	e007      	b.n	800577c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800576c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005770:	3301      	adds	r3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	b25a      	sxtb	r2, r3
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800577c:	2301      	movs	r3, #1
 800577e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005780:	e001      	b.n	8005786 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005782:	2300      	movs	r3, #0
 8005784:	637b      	str	r3, [r7, #52]	@ 0x34
 8005786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005788:	613b      	str	r3, [r7, #16]
	__asm volatile
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f383 8811 	msr	BASEPRI, r3
}
 8005790:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005794:	4618      	mov	r0, r3
 8005796:	3738      	adds	r7, #56	@ 0x38
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <vQueueDelete+0x2a>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	60bb      	str	r3, [r7, #8]
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	e7fd      	b.n	80057c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f95e 	bl	8005a88 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f002 f806 	bl	80077e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d006      	beq.n	8005802 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	e001      	b.n	8005806 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005806:	68fb      	ldr	r3, [r7, #12]
	}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005828:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10d      	bne.n	800584e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d14d      	bne.n	80058d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fffa 	bl	8006838 <xTaskPriorityDisinherit>
 8005844:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	609a      	str	r2, [r3, #8]
 800584c:	e043      	b.n	80058d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d119      	bne.n	8005888 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6858      	ldr	r0, [r3, #4]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	461a      	mov	r2, r3
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	f002 fb55 	bl	8007f0e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586c:	441a      	add	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	429a      	cmp	r2, r3
 800587c:	d32b      	bcc.n	80058d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	e026      	b.n	80058d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68d8      	ldr	r0, [r3, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	461a      	mov	r2, r3
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	f002 fb3b 	bl	8007f0e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	425b      	negs	r3, r3
 80058a2:	441a      	add	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d207      	bcs.n	80058c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058bc:	425b      	negs	r3, r3
 80058be:	441a      	add	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d105      	bne.n	80058d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80058de:	697b      	ldr	r3, [r7, #20]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d018      	beq.n	800592c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005902:	441a      	add	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	429a      	cmp	r2, r3
 8005912:	d303      	bcc.n	800591c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68d9      	ldr	r1, [r3, #12]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	461a      	mov	r2, r3
 8005926:	6838      	ldr	r0, [r7, #0]
 8005928:	f002 faf1 	bl	8007f0e <memcpy>
	}
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800593c:	f001 fd64 	bl	8007408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005946:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005948:	e011      	b.n	800596e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	2b00      	cmp	r3, #0
 8005950:	d012      	beq.n	8005978 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3324      	adds	r3, #36	@ 0x24
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fd28 	bl	80063ac <xTaskRemoveFromEventList>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005962:	f000 fe01 	bl	8006568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	3b01      	subs	r3, #1
 800596a:	b2db      	uxtb	r3, r3
 800596c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800596e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005972:	2b00      	cmp	r3, #0
 8005974:	dce9      	bgt.n	800594a <prvUnlockQueue+0x16>
 8005976:	e000      	b.n	800597a <prvUnlockQueue+0x46>
					break;
 8005978:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	22ff      	movs	r2, #255	@ 0xff
 800597e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005982:	f001 fd73 	bl	800746c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005986:	f001 fd3f 	bl	8007408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005990:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005992:	e011      	b.n	80059b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d012      	beq.n	80059c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3310      	adds	r3, #16
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fd03 	bl	80063ac <xTaskRemoveFromEventList>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059ac:	f000 fddc 	bl	8006568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059b0:	7bbb      	ldrb	r3, [r7, #14]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dce9      	bgt.n	8005994 <prvUnlockQueue+0x60>
 80059c0:	e000      	b.n	80059c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	22ff      	movs	r2, #255	@ 0xff
 80059c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80059cc:	f001 fd4e 	bl	800746c <vPortExitCritical>
}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059e0:	f001 fd12 	bl	8007408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059ec:	2301      	movs	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e001      	b.n	80059f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059f6:	f001 fd39 	bl	800746c <vPortExitCritical>

	return xReturn;
 80059fa:	68fb      	ldr	r3, [r7, #12]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a0c:	f001 fcfc 	bl	8007408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d102      	bne.n	8005a22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e001      	b.n	8005a26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a26:	f001 fd21 	bl	800746c <vPortExitCritical>

	return xReturn;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	e014      	b.n	8005a6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a44:	4a0f      	ldr	r2, [pc, #60]	@ (8005a84 <vQueueAddToRegistry+0x50>)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10b      	bne.n	8005a68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a50:	490c      	ldr	r1, [pc, #48]	@ (8005a84 <vQueueAddToRegistry+0x50>)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a84 <vQueueAddToRegistry+0x50>)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	4413      	add	r3, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a66:	e006      	b.n	8005a76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b07      	cmp	r3, #7
 8005a72:	d9e7      	bls.n	8005a44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000898 	.word	0x20000898

08005a88 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e016      	b.n	8005ac4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005a96:	4a10      	ldr	r2, [pc, #64]	@ (8005ad8 <vQueueUnregisterQueue+0x50>)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d10b      	bne.n	8005abe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ad8 <vQueueUnregisterQueue+0x50>)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2100      	movs	r1, #0
 8005aac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005ab0:	4a09      	ldr	r2, [pc, #36]	@ (8005ad8 <vQueueUnregisterQueue+0x50>)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	2200      	movs	r2, #0
 8005aba:	605a      	str	r2, [r3, #4]
				break;
 8005abc:	e006      	b.n	8005acc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b07      	cmp	r3, #7
 8005ac8:	d9e5      	bls.n	8005a96 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005aca:	bf00      	nop
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	20000898 	.word	0x20000898

08005adc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005aec:	f001 fc8c 	bl	8007408 <vPortEnterCritical>
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005af6:	b25b      	sxtb	r3, r3
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005afc:	d103      	bne.n	8005b06 <vQueueWaitForMessageRestricted+0x2a>
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b0c:	b25b      	sxtb	r3, r3
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b12:	d103      	bne.n	8005b1c <vQueueWaitForMessageRestricted+0x40>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b1c:	f001 fca6 	bl	800746c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	3324      	adds	r3, #36	@ 0x24
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fc0f 	bl	8006354 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b36:	6978      	ldr	r0, [r7, #20]
 8005b38:	f7ff fefc 	bl	8005934 <prvUnlockQueue>
	}
 8005b3c:	bf00      	nop
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08e      	sub	sp, #56	@ 0x38
 8005b48:	af04      	add	r7, sp, #16
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10b      	bne.n	8005b70 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	623b      	str	r3, [r7, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	bf00      	nop
 8005b6e:	e7fd      	b.n	8005b6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61fb      	str	r3, [r7, #28]
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	e7fd      	b.n	8005b8a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b8e:	235c      	movs	r3, #92	@ 0x5c
 8005b90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2b5c      	cmp	r3, #92	@ 0x5c
 8005b96:	d00b      	beq.n	8005bb0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	61bb      	str	r3, [r7, #24]
}
 8005baa:	bf00      	nop
 8005bac:	bf00      	nop
 8005bae:	e7fd      	b.n	8005bac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005bb0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01e      	beq.n	8005bf6 <xTaskCreateStatic+0xb2>
 8005bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01b      	beq.n	8005bf6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9303      	str	r3, [sp, #12]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	9302      	str	r3, [sp, #8]
 8005bd8:	f107 0314 	add.w	r3, r7, #20
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 f850 	bl	8005c8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005bf0:	f000 f8de 	bl	8005db0 <prvAddNewTaskToReadyList>
 8005bf4:	e001      	b.n	8005bfa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bfa:	697b      	ldr	r3, [r7, #20]
	}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3728      	adds	r7, #40	@ 0x28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08c      	sub	sp, #48	@ 0x30
 8005c08:	af04      	add	r7, sp, #16
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	4613      	mov	r3, r2
 8005c12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 fd17 	bl	800764c <pvPortMalloc>
 8005c1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00e      	beq.n	8005c44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c26:	205c      	movs	r0, #92	@ 0x5c
 8005c28:	f001 fd10 	bl	800764c <pvPortMalloc>
 8005c2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c3a:	e005      	b.n	8005c48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c3c:	6978      	ldr	r0, [r7, #20]
 8005c3e:	f001 fdd3 	bl	80077e8 <vPortFree>
 8005c42:	e001      	b.n	8005c48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d017      	beq.n	8005c7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	9303      	str	r3, [sp, #12]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	9302      	str	r3, [sp, #8]
 8005c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f80e 	bl	8005c8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c72:	69f8      	ldr	r0, [r7, #28]
 8005c74:	f000 f89c 	bl	8005db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	61bb      	str	r3, [r7, #24]
 8005c7c:	e002      	b.n	8005c84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c84:	69bb      	ldr	r3, [r7, #24]
	}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b088      	sub	sp, #32
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	21a5      	movs	r1, #165	@ 0xa5
 8005ca8:	f002 f8b6 	bl	8007e18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	f023 0307 	bic.w	r3, r3, #7
 8005cc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00b      	beq.n	8005ce8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	617b      	str	r3, [r7, #20]
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	e7fd      	b.n	8005ce4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01f      	beq.n	8005d2e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	e012      	b.n	8005d1a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	7819      	ldrb	r1, [r3, #0]
 8005cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	3334      	adds	r3, #52	@ 0x34
 8005d04:	460a      	mov	r2, r1
 8005d06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d006      	beq.n	8005d22 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	3301      	adds	r3, #1
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2b0f      	cmp	r3, #15
 8005d1e:	d9e9      	bls.n	8005cf4 <prvInitialiseNewTask+0x66>
 8005d20:	e000      	b.n	8005d24 <prvInitialiseNewTask+0x96>
			{
				break;
 8005d22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d2c:	e003      	b.n	8005d36 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d38:	2b37      	cmp	r3, #55	@ 0x37
 8005d3a:	d901      	bls.n	8005d40 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d3c:	2337      	movs	r3, #55	@ 0x37
 8005d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d44:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d4a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4e:	2200      	movs	r2, #0
 8005d50:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	3304      	adds	r3, #4
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fe34 	bl	80049c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5e:	3318      	adds	r3, #24
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fe fe2f 	bl	80049c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d7a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7e:	2200      	movs	r2, #0
 8005d80:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	68f9      	ldr	r1, [r7, #12]
 8005d8e:	69b8      	ldr	r0, [r7, #24]
 8005d90:	f001 fa08 	bl	80071a4 <pxPortInitialiseStack>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da6:	bf00      	nop
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005db8:	f001 fb26 	bl	8007408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8005e74 <prvAddNewTaskToReadyList+0xc4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8005e74 <prvAddNewTaskToReadyList+0xc4>)
 8005dc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8005e78 <prvAddNewTaskToReadyList+0xc8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dce:	4a2a      	ldr	r2, [pc, #168]	@ (8005e78 <prvAddNewTaskToReadyList+0xc8>)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dd4:	4b27      	ldr	r3, [pc, #156]	@ (8005e74 <prvAddNewTaskToReadyList+0xc4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d110      	bne.n	8005dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ddc:	f000 fbe8 	bl	80065b0 <prvInitialiseTaskLists>
 8005de0:	e00d      	b.n	8005dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005de2:	4b26      	ldr	r3, [pc, #152]	@ (8005e7c <prvAddNewTaskToReadyList+0xcc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d109      	bne.n	8005dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dea:	4b23      	ldr	r3, [pc, #140]	@ (8005e78 <prvAddNewTaskToReadyList+0xc8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d802      	bhi.n	8005dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005df8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e78 <prvAddNewTaskToReadyList+0xc8>)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dfe:	4b20      	ldr	r3, [pc, #128]	@ (8005e80 <prvAddNewTaskToReadyList+0xd0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3301      	adds	r3, #1
 8005e04:	4a1e      	ldr	r2, [pc, #120]	@ (8005e80 <prvAddNewTaskToReadyList+0xd0>)
 8005e06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e08:	4b1d      	ldr	r3, [pc, #116]	@ (8005e80 <prvAddNewTaskToReadyList+0xd0>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e14:	4b1b      	ldr	r3, [pc, #108]	@ (8005e84 <prvAddNewTaskToReadyList+0xd4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d903      	bls.n	8005e24 <prvAddNewTaskToReadyList+0x74>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	4a18      	ldr	r2, [pc, #96]	@ (8005e84 <prvAddNewTaskToReadyList+0xd4>)
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4a15      	ldr	r2, [pc, #84]	@ (8005e88 <prvAddNewTaskToReadyList+0xd8>)
 8005e32:	441a      	add	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f7fe fdcf 	bl	80049de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e40:	f001 fb14 	bl	800746c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e44:	4b0d      	ldr	r3, [pc, #52]	@ (8005e7c <prvAddNewTaskToReadyList+0xcc>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e78 <prvAddNewTaskToReadyList+0xc8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d207      	bcs.n	8005e6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e8c <prvAddNewTaskToReadyList+0xdc>)
 8005e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e6a:	bf00      	nop
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000dac 	.word	0x20000dac
 8005e78:	200008d8 	.word	0x200008d8
 8005e7c:	20000db8 	.word	0x20000db8
 8005e80:	20000dc8 	.word	0x20000dc8
 8005e84:	20000db4 	.word	0x20000db4
 8005e88:	200008dc 	.word	0x200008dc
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	@ 0x28
 8005e94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e9e:	463a      	mov	r2, r7
 8005ea0:	1d39      	adds	r1, r7, #4
 8005ea2:	f107 0308 	add.w	r3, r7, #8
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fd38 	bl	800491c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005eac:	6839      	ldr	r1, [r7, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	9202      	str	r2, [sp, #8]
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	460a      	mov	r2, r1
 8005ebe:	4922      	ldr	r1, [pc, #136]	@ (8005f48 <vTaskStartScheduler+0xb8>)
 8005ec0:	4822      	ldr	r0, [pc, #136]	@ (8005f4c <vTaskStartScheduler+0xbc>)
 8005ec2:	f7ff fe3f 	bl	8005b44 <xTaskCreateStatic>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	4a21      	ldr	r2, [pc, #132]	@ (8005f50 <vTaskStartScheduler+0xc0>)
 8005eca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ecc:	4b20      	ldr	r3, [pc, #128]	@ (8005f50 <vTaskStartScheduler+0xc0>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e001      	b.n	8005ede <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d102      	bne.n	8005eea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ee4:	f000 fe04 	bl	8006af0 <xTimerCreateTimerTask>
 8005ee8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d116      	bne.n	8005f1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	613b      	str	r3, [r7, #16]
}
 8005f02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f04:	4b13      	ldr	r3, [pc, #76]	@ (8005f54 <vTaskStartScheduler+0xc4>)
 8005f06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f0c:	4b12      	ldr	r3, [pc, #72]	@ (8005f58 <vTaskStartScheduler+0xc8>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f12:	4b12      	ldr	r3, [pc, #72]	@ (8005f5c <vTaskStartScheduler+0xcc>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f18:	f001 f9d2 	bl	80072c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f1c:	e00f      	b.n	8005f3e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f24:	d10b      	bne.n	8005f3e <vTaskStartScheduler+0xae>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	60fb      	str	r3, [r7, #12]
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	e7fd      	b.n	8005f3a <vTaskStartScheduler+0xaa>
}
 8005f3e:	bf00      	nop
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	080083fc 	.word	0x080083fc
 8005f4c:	08006581 	.word	0x08006581
 8005f50:	20000dd0 	.word	0x20000dd0
 8005f54:	20000dcc 	.word	0x20000dcc
 8005f58:	20000db8 	.word	0x20000db8
 8005f5c:	20000db0 	.word	0x20000db0

08005f60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f64:	4b04      	ldr	r3, [pc, #16]	@ (8005f78 <vTaskSuspendAll+0x18>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	4a03      	ldr	r2, [pc, #12]	@ (8005f78 <vTaskSuspendAll+0x18>)
 8005f6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f6e:	bf00      	nop
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	20000dd4 	.word	0x20000dd4

08005f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f8a:	4b42      	ldr	r3, [pc, #264]	@ (8006094 <xTaskResumeAll+0x118>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <xTaskResumeAll+0x2e>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	603b      	str	r3, [r7, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	e7fd      	b.n	8005fa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005faa:	f001 fa2d 	bl	8007408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fae:	4b39      	ldr	r3, [pc, #228]	@ (8006094 <xTaskResumeAll+0x118>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	4a37      	ldr	r2, [pc, #220]	@ (8006094 <xTaskResumeAll+0x118>)
 8005fb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fb8:	4b36      	ldr	r3, [pc, #216]	@ (8006094 <xTaskResumeAll+0x118>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d162      	bne.n	8006086 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fc0:	4b35      	ldr	r3, [pc, #212]	@ (8006098 <xTaskResumeAll+0x11c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05e      	beq.n	8006086 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fc8:	e02f      	b.n	800602a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fca:	4b34      	ldr	r3, [pc, #208]	@ (800609c <xTaskResumeAll+0x120>)
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3318      	adds	r3, #24
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe fd5e 	bl	8004a98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fe fd59 	bl	8004a98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fea:	4b2d      	ldr	r3, [pc, #180]	@ (80060a0 <xTaskResumeAll+0x124>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d903      	bls.n	8005ffa <xTaskResumeAll+0x7e>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80060a0 <xTaskResumeAll+0x124>)
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4a27      	ldr	r2, [pc, #156]	@ (80060a4 <xTaskResumeAll+0x128>)
 8006008:	441a      	add	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3304      	adds	r3, #4
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f7fe fce4 	bl	80049de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800601a:	4b23      	ldr	r3, [pc, #140]	@ (80060a8 <xTaskResumeAll+0x12c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006024:	4b21      	ldr	r3, [pc, #132]	@ (80060ac <xTaskResumeAll+0x130>)
 8006026:	2201      	movs	r2, #1
 8006028:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800602a:	4b1c      	ldr	r3, [pc, #112]	@ (800609c <xTaskResumeAll+0x120>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1cb      	bne.n	8005fca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006038:	f000 fb58 	bl	80066ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800603c:	4b1c      	ldr	r3, [pc, #112]	@ (80060b0 <xTaskResumeAll+0x134>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d010      	beq.n	800606a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006048:	f000 f846 	bl	80060d8 <xTaskIncrementTick>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006052:	4b16      	ldr	r3, [pc, #88]	@ (80060ac <xTaskResumeAll+0x130>)
 8006054:	2201      	movs	r2, #1
 8006056:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3b01      	subs	r3, #1
 800605c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f1      	bne.n	8006048 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006064:	4b12      	ldr	r3, [pc, #72]	@ (80060b0 <xTaskResumeAll+0x134>)
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800606a:	4b10      	ldr	r3, [pc, #64]	@ (80060ac <xTaskResumeAll+0x130>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006072:	2301      	movs	r3, #1
 8006074:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006076:	4b0f      	ldr	r3, [pc, #60]	@ (80060b4 <xTaskResumeAll+0x138>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006086:	f001 f9f1 	bl	800746c <vPortExitCritical>

	return xAlreadyYielded;
 800608a:	68bb      	ldr	r3, [r7, #8]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000dd4 	.word	0x20000dd4
 8006098:	20000dac 	.word	0x20000dac
 800609c:	20000d6c 	.word	0x20000d6c
 80060a0:	20000db4 	.word	0x20000db4
 80060a4:	200008dc 	.word	0x200008dc
 80060a8:	200008d8 	.word	0x200008d8
 80060ac:	20000dc0 	.word	0x20000dc0
 80060b0:	20000dbc 	.word	0x20000dbc
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060be:	4b05      	ldr	r3, [pc, #20]	@ (80060d4 <xTaskGetTickCount+0x1c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060c4:	687b      	ldr	r3, [r7, #4]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20000db0 	.word	0x20000db0

080060d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006220 <xTaskIncrementTick+0x148>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f040 8090 	bne.w	800620c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006224 <xTaskIncrementTick+0x14c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060f4:	4a4b      	ldr	r2, [pc, #300]	@ (8006224 <xTaskIncrementTick+0x14c>)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d121      	bne.n	8006144 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006100:	4b49      	ldr	r3, [pc, #292]	@ (8006228 <xTaskIncrementTick+0x150>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <xTaskIncrementTick+0x4a>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	603b      	str	r3, [r7, #0]
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	e7fd      	b.n	800611e <xTaskIncrementTick+0x46>
 8006122:	4b41      	ldr	r3, [pc, #260]	@ (8006228 <xTaskIncrementTick+0x150>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	4b40      	ldr	r3, [pc, #256]	@ (800622c <xTaskIncrementTick+0x154>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a3e      	ldr	r2, [pc, #248]	@ (8006228 <xTaskIncrementTick+0x150>)
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	4a3e      	ldr	r2, [pc, #248]	@ (800622c <xTaskIncrementTick+0x154>)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	4b3e      	ldr	r3, [pc, #248]	@ (8006230 <xTaskIncrementTick+0x158>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3301      	adds	r3, #1
 800613c:	4a3c      	ldr	r2, [pc, #240]	@ (8006230 <xTaskIncrementTick+0x158>)
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	f000 fad4 	bl	80066ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006144:	4b3b      	ldr	r3, [pc, #236]	@ (8006234 <xTaskIncrementTick+0x15c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	429a      	cmp	r2, r3
 800614c:	d349      	bcc.n	80061e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800614e:	4b36      	ldr	r3, [pc, #216]	@ (8006228 <xTaskIncrementTick+0x150>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d104      	bne.n	8006162 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006158:	4b36      	ldr	r3, [pc, #216]	@ (8006234 <xTaskIncrementTick+0x15c>)
 800615a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800615e:	601a      	str	r2, [r3, #0]
					break;
 8006160:	e03f      	b.n	80061e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006162:	4b31      	ldr	r3, [pc, #196]	@ (8006228 <xTaskIncrementTick+0x150>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	429a      	cmp	r2, r3
 8006178:	d203      	bcs.n	8006182 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800617a:	4a2e      	ldr	r2, [pc, #184]	@ (8006234 <xTaskIncrementTick+0x15c>)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006180:	e02f      	b.n	80061e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	3304      	adds	r3, #4
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fc86 	bl	8004a98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	3318      	adds	r3, #24
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe fc7d 	bl	8004a98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a2:	4b25      	ldr	r3, [pc, #148]	@ (8006238 <xTaskIncrementTick+0x160>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d903      	bls.n	80061b2 <xTaskIncrementTick+0xda>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ae:	4a22      	ldr	r2, [pc, #136]	@ (8006238 <xTaskIncrementTick+0x160>)
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4a1f      	ldr	r2, [pc, #124]	@ (800623c <xTaskIncrementTick+0x164>)
 80061c0:	441a      	add	r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	3304      	adds	r3, #4
 80061c6:	4619      	mov	r1, r3
 80061c8:	4610      	mov	r0, r2
 80061ca:	f7fe fc08 	bl	80049de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006240 <xTaskIncrementTick+0x168>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d8:	429a      	cmp	r2, r3
 80061da:	d3b8      	bcc.n	800614e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061e0:	e7b5      	b.n	800614e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061e2:	4b17      	ldr	r3, [pc, #92]	@ (8006240 <xTaskIncrementTick+0x168>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e8:	4914      	ldr	r1, [pc, #80]	@ (800623c <xTaskIncrementTick+0x164>)
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d901      	bls.n	80061fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80061fa:	2301      	movs	r3, #1
 80061fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061fe:	4b11      	ldr	r3, [pc, #68]	@ (8006244 <xTaskIncrementTick+0x16c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006206:	2301      	movs	r3, #1
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e004      	b.n	8006216 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800620c:	4b0e      	ldr	r3, [pc, #56]	@ (8006248 <xTaskIncrementTick+0x170>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3301      	adds	r3, #1
 8006212:	4a0d      	ldr	r2, [pc, #52]	@ (8006248 <xTaskIncrementTick+0x170>)
 8006214:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006216:	697b      	ldr	r3, [r7, #20]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20000dd4 	.word	0x20000dd4
 8006224:	20000db0 	.word	0x20000db0
 8006228:	20000d64 	.word	0x20000d64
 800622c:	20000d68 	.word	0x20000d68
 8006230:	20000dc4 	.word	0x20000dc4
 8006234:	20000dcc 	.word	0x20000dcc
 8006238:	20000db4 	.word	0x20000db4
 800623c:	200008dc 	.word	0x200008dc
 8006240:	200008d8 	.word	0x200008d8
 8006244:	20000dc0 	.word	0x20000dc0
 8006248:	20000dbc 	.word	0x20000dbc

0800624c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006252:	4b28      	ldr	r3, [pc, #160]	@ (80062f4 <vTaskSwitchContext+0xa8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800625a:	4b27      	ldr	r3, [pc, #156]	@ (80062f8 <vTaskSwitchContext+0xac>)
 800625c:	2201      	movs	r2, #1
 800625e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006260:	e042      	b.n	80062e8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006262:	4b25      	ldr	r3, [pc, #148]	@ (80062f8 <vTaskSwitchContext+0xac>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006268:	4b24      	ldr	r3, [pc, #144]	@ (80062fc <vTaskSwitchContext+0xb0>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e011      	b.n	8006294 <vTaskSwitchContext+0x48>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <vTaskSwitchContext+0x42>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	607b      	str	r3, [r7, #4]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <vTaskSwitchContext+0x3e>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3b01      	subs	r3, #1
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	491a      	ldr	r1, [pc, #104]	@ (8006300 <vTaskSwitchContext+0xb4>)
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0e3      	beq.n	8006270 <vTaskSwitchContext+0x24>
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4a13      	ldr	r2, [pc, #76]	@ (8006300 <vTaskSwitchContext+0xb4>)
 80062b4:	4413      	add	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	605a      	str	r2, [r3, #4]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	3308      	adds	r3, #8
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d104      	bne.n	80062d8 <vTaskSwitchContext+0x8c>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	605a      	str	r2, [r3, #4]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	4a09      	ldr	r2, [pc, #36]	@ (8006304 <vTaskSwitchContext+0xb8>)
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	4a06      	ldr	r2, [pc, #24]	@ (80062fc <vTaskSwitchContext+0xb0>)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6013      	str	r3, [r2, #0]
}
 80062e8:	bf00      	nop
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	20000dd4 	.word	0x20000dd4
 80062f8:	20000dc0 	.word	0x20000dc0
 80062fc:	20000db4 	.word	0x20000db4
 8006300:	200008dc 	.word	0x200008dc
 8006304:	200008d8 	.word	0x200008d8

08006308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10b      	bne.n	8006330 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	60fb      	str	r3, [r7, #12]
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006330:	4b07      	ldr	r3, [pc, #28]	@ (8006350 <vTaskPlaceOnEventList+0x48>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3318      	adds	r3, #24
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7fe fb74 	bl	8004a26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800633e:	2101      	movs	r1, #1
 8006340:	6838      	ldr	r0, [r7, #0]
 8006342:	f000 fb81 	bl	8006a48 <prvAddCurrentTaskToDelayedList>
}
 8006346:	bf00      	nop
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	200008d8 	.word	0x200008d8

08006354 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10b      	bne.n	800637e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	617b      	str	r3, [r7, #20]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800637e:	4b0a      	ldr	r3, [pc, #40]	@ (80063a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3318      	adds	r3, #24
 8006384:	4619      	mov	r1, r3
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7fe fb29 	bl	80049de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006396:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	68b8      	ldr	r0, [r7, #8]
 800639c:	f000 fb54 	bl	8006a48 <prvAddCurrentTaskToDelayedList>
	}
 80063a0:	bf00      	nop
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	200008d8 	.word	0x200008d8

080063ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60fb      	str	r3, [r7, #12]
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	e7fd      	b.n	80063d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	3318      	adds	r3, #24
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fb5a 	bl	8004a98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e4:	4b1d      	ldr	r3, [pc, #116]	@ (800645c <xTaskRemoveFromEventList+0xb0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d11d      	bne.n	8006428 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe fb51 	bl	8004a98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fa:	4b19      	ldr	r3, [pc, #100]	@ (8006460 <xTaskRemoveFromEventList+0xb4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d903      	bls.n	800640a <xTaskRemoveFromEventList+0x5e>
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006406:	4a16      	ldr	r2, [pc, #88]	@ (8006460 <xTaskRemoveFromEventList+0xb4>)
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4a13      	ldr	r2, [pc, #76]	@ (8006464 <xTaskRemoveFromEventList+0xb8>)
 8006418:	441a      	add	r2, r3
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	3304      	adds	r3, #4
 800641e:	4619      	mov	r1, r3
 8006420:	4610      	mov	r0, r2
 8006422:	f7fe fadc 	bl	80049de <vListInsertEnd>
 8006426:	e005      	b.n	8006434 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	3318      	adds	r3, #24
 800642c:	4619      	mov	r1, r3
 800642e:	480e      	ldr	r0, [pc, #56]	@ (8006468 <xTaskRemoveFromEventList+0xbc>)
 8006430:	f7fe fad5 	bl	80049de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006438:	4b0c      	ldr	r3, [pc, #48]	@ (800646c <xTaskRemoveFromEventList+0xc0>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643e:	429a      	cmp	r2, r3
 8006440:	d905      	bls.n	800644e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006442:	2301      	movs	r3, #1
 8006444:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006446:	4b0a      	ldr	r3, [pc, #40]	@ (8006470 <xTaskRemoveFromEventList+0xc4>)
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e001      	b.n	8006452 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006452:	697b      	ldr	r3, [r7, #20]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000dd4 	.word	0x20000dd4
 8006460:	20000db4 	.word	0x20000db4
 8006464:	200008dc 	.word	0x200008dc
 8006468:	20000d6c 	.word	0x20000d6c
 800646c:	200008d8 	.word	0x200008d8
 8006470:	20000dc0 	.word	0x20000dc0

08006474 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800647c:	4b06      	ldr	r3, [pc, #24]	@ (8006498 <vTaskInternalSetTimeOutState+0x24>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006484:	4b05      	ldr	r3, [pc, #20]	@ (800649c <vTaskInternalSetTimeOutState+0x28>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	605a      	str	r2, [r3, #4]
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	20000dc4 	.word	0x20000dc4
 800649c:	20000db0 	.word	0x20000db0

080064a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10b      	bne.n	80064c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	613b      	str	r3, [r7, #16]
}
 80064c2:	bf00      	nop
 80064c4:	bf00      	nop
 80064c6:	e7fd      	b.n	80064c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10b      	bne.n	80064e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	60fb      	str	r3, [r7, #12]
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	e7fd      	b.n	80064e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80064e6:	f000 ff8f 	bl	8007408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006560 <xTaskCheckForTimeOut+0xc0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006502:	d102      	bne.n	800650a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	e023      	b.n	8006552 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b15      	ldr	r3, [pc, #84]	@ (8006564 <xTaskCheckForTimeOut+0xc4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d007      	beq.n	8006526 <xTaskCheckForTimeOut+0x86>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	429a      	cmp	r2, r3
 800651e:	d302      	bcc.n	8006526 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006520:	2301      	movs	r3, #1
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	e015      	b.n	8006552 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	429a      	cmp	r2, r3
 800652e:	d20b      	bcs.n	8006548 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	1ad2      	subs	r2, r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff ff99 	bl	8006474 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006542:	2300      	movs	r3, #0
 8006544:	61fb      	str	r3, [r7, #28]
 8006546:	e004      	b.n	8006552 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800654e:	2301      	movs	r3, #1
 8006550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006552:	f000 ff8b 	bl	800746c <vPortExitCritical>

	return xReturn;
 8006556:	69fb      	ldr	r3, [r7, #28]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20000db0 	.word	0x20000db0
 8006564:	20000dc4 	.word	0x20000dc4

08006568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800656c:	4b03      	ldr	r3, [pc, #12]	@ (800657c <vTaskMissedYield+0x14>)
 800656e:	2201      	movs	r2, #1
 8006570:	601a      	str	r2, [r3, #0]
}
 8006572:	bf00      	nop
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	20000dc0 	.word	0x20000dc0

08006580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006588:	f000 f852 	bl	8006630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800658c:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <prvIdleTask+0x28>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d9f9      	bls.n	8006588 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <prvIdleTask+0x2c>)
 8006596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065a4:	e7f0      	b.n	8006588 <prvIdleTask+0x8>
 80065a6:	bf00      	nop
 80065a8:	200008dc 	.word	0x200008dc
 80065ac:	e000ed04 	.word	0xe000ed04

080065b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065b6:	2300      	movs	r3, #0
 80065b8:	607b      	str	r3, [r7, #4]
 80065ba:	e00c      	b.n	80065d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4a12      	ldr	r2, [pc, #72]	@ (8006610 <prvInitialiseTaskLists+0x60>)
 80065c8:	4413      	add	r3, r2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe f9da 	bl	8004984 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3301      	adds	r3, #1
 80065d4:	607b      	str	r3, [r7, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b37      	cmp	r3, #55	@ 0x37
 80065da:	d9ef      	bls.n	80065bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065dc:	480d      	ldr	r0, [pc, #52]	@ (8006614 <prvInitialiseTaskLists+0x64>)
 80065de:	f7fe f9d1 	bl	8004984 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065e2:	480d      	ldr	r0, [pc, #52]	@ (8006618 <prvInitialiseTaskLists+0x68>)
 80065e4:	f7fe f9ce 	bl	8004984 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065e8:	480c      	ldr	r0, [pc, #48]	@ (800661c <prvInitialiseTaskLists+0x6c>)
 80065ea:	f7fe f9cb 	bl	8004984 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065ee:	480c      	ldr	r0, [pc, #48]	@ (8006620 <prvInitialiseTaskLists+0x70>)
 80065f0:	f7fe f9c8 	bl	8004984 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065f4:	480b      	ldr	r0, [pc, #44]	@ (8006624 <prvInitialiseTaskLists+0x74>)
 80065f6:	f7fe f9c5 	bl	8004984 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006628 <prvInitialiseTaskLists+0x78>)
 80065fc:	4a05      	ldr	r2, [pc, #20]	@ (8006614 <prvInitialiseTaskLists+0x64>)
 80065fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006600:	4b0a      	ldr	r3, [pc, #40]	@ (800662c <prvInitialiseTaskLists+0x7c>)
 8006602:	4a05      	ldr	r2, [pc, #20]	@ (8006618 <prvInitialiseTaskLists+0x68>)
 8006604:	601a      	str	r2, [r3, #0]
}
 8006606:	bf00      	nop
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	200008dc 	.word	0x200008dc
 8006614:	20000d3c 	.word	0x20000d3c
 8006618:	20000d50 	.word	0x20000d50
 800661c:	20000d6c 	.word	0x20000d6c
 8006620:	20000d80 	.word	0x20000d80
 8006624:	20000d98 	.word	0x20000d98
 8006628:	20000d64 	.word	0x20000d64
 800662c:	20000d68 	.word	0x20000d68

08006630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006636:	e019      	b.n	800666c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006638:	f000 fee6 	bl	8007408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800663c:	4b10      	ldr	r3, [pc, #64]	@ (8006680 <prvCheckTasksWaitingTermination+0x50>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3304      	adds	r3, #4
 8006648:	4618      	mov	r0, r3
 800664a:	f7fe fa25 	bl	8004a98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800664e:	4b0d      	ldr	r3, [pc, #52]	@ (8006684 <prvCheckTasksWaitingTermination+0x54>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3b01      	subs	r3, #1
 8006654:	4a0b      	ldr	r2, [pc, #44]	@ (8006684 <prvCheckTasksWaitingTermination+0x54>)
 8006656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006658:	4b0b      	ldr	r3, [pc, #44]	@ (8006688 <prvCheckTasksWaitingTermination+0x58>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3b01      	subs	r3, #1
 800665e:	4a0a      	ldr	r2, [pc, #40]	@ (8006688 <prvCheckTasksWaitingTermination+0x58>)
 8006660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006662:	f000 ff03 	bl	800746c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f810 	bl	800668c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800666c:	4b06      	ldr	r3, [pc, #24]	@ (8006688 <prvCheckTasksWaitingTermination+0x58>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e1      	bne.n	8006638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000d80 	.word	0x20000d80
 8006684:	20000dac 	.word	0x20000dac
 8006688:	20000d94 	.word	0x20000d94

0800668c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800669a:	2b00      	cmp	r3, #0
 800669c:	d108      	bne.n	80066b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a2:	4618      	mov	r0, r3
 80066a4:	f001 f8a0 	bl	80077e8 <vPortFree>
				vPortFree( pxTCB );
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 f89d 	bl	80077e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066ae:	e019      	b.n	80066e4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d103      	bne.n	80066c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 f894 	bl	80077e8 <vPortFree>
	}
 80066c0:	e010      	b.n	80066e4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d00b      	beq.n	80066e4 <prvDeleteTCB+0x58>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	60fb      	str	r3, [r7, #12]
}
 80066de:	bf00      	nop
 80066e0:	bf00      	nop
 80066e2:	e7fd      	b.n	80066e0 <prvDeleteTCB+0x54>
	}
 80066e4:	bf00      	nop
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006724 <prvResetNextTaskUnblockTime+0x38>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006728 <prvResetNextTaskUnblockTime+0x3c>)
 80066fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006704:	e008      	b.n	8006718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006706:	4b07      	ldr	r3, [pc, #28]	@ (8006724 <prvResetNextTaskUnblockTime+0x38>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4a04      	ldr	r2, [pc, #16]	@ (8006728 <prvResetNextTaskUnblockTime+0x3c>)
 8006716:	6013      	str	r3, [r2, #0]
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	20000d64 	.word	0x20000d64
 8006728:	20000dcc 	.word	0x20000dcc

0800672c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006732:	4b0b      	ldr	r3, [pc, #44]	@ (8006760 <xTaskGetSchedulerState+0x34>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800673a:	2301      	movs	r3, #1
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	e008      	b.n	8006752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006740:	4b08      	ldr	r3, [pc, #32]	@ (8006764 <xTaskGetSchedulerState+0x38>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006748:	2302      	movs	r3, #2
 800674a:	607b      	str	r3, [r7, #4]
 800674c:	e001      	b.n	8006752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800674e:	2300      	movs	r3, #0
 8006750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006752:	687b      	ldr	r3, [r7, #4]
	}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	20000db8 	.word	0x20000db8
 8006764:	20000dd4 	.word	0x20000dd4

08006768 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d051      	beq.n	8006822 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006782:	4b2a      	ldr	r3, [pc, #168]	@ (800682c <xTaskPriorityInherit+0xc4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	429a      	cmp	r2, r3
 800678a:	d241      	bcs.n	8006810 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	db06      	blt.n	80067a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006794:	4b25      	ldr	r3, [pc, #148]	@ (800682c <xTaskPriorityInherit+0xc4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6959      	ldr	r1, [r3, #20]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006830 <xTaskPriorityInherit+0xc8>)
 80067b4:	4413      	add	r3, r2
 80067b6:	4299      	cmp	r1, r3
 80067b8:	d122      	bne.n	8006800 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3304      	adds	r3, #4
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe f96a 	bl	8004a98 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067c4:	4b19      	ldr	r3, [pc, #100]	@ (800682c <xTaskPriorityInherit+0xc4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d2:	4b18      	ldr	r3, [pc, #96]	@ (8006834 <xTaskPriorityInherit+0xcc>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d903      	bls.n	80067e2 <xTaskPriorityInherit+0x7a>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067de:	4a15      	ldr	r2, [pc, #84]	@ (8006834 <xTaskPriorityInherit+0xcc>)
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e6:	4613      	mov	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4a10      	ldr	r2, [pc, #64]	@ (8006830 <xTaskPriorityInherit+0xc8>)
 80067f0:	441a      	add	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f7fe f8f0 	bl	80049de <vListInsertEnd>
 80067fe:	e004      	b.n	800680a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006800:	4b0a      	ldr	r3, [pc, #40]	@ (800682c <xTaskPriorityInherit+0xc4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800680a:	2301      	movs	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e008      	b.n	8006822 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006814:	4b05      	ldr	r3, [pc, #20]	@ (800682c <xTaskPriorityInherit+0xc4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	429a      	cmp	r2, r3
 800681c:	d201      	bcs.n	8006822 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800681e:	2301      	movs	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006822:	68fb      	ldr	r3, [r7, #12]
	}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	200008d8 	.word	0x200008d8
 8006830:	200008dc 	.word	0x200008dc
 8006834:	20000db4 	.word	0x20000db4

08006838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d058      	beq.n	8006900 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800684e:	4b2f      	ldr	r3, [pc, #188]	@ (800690c <xTaskPriorityDisinherit+0xd4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	429a      	cmp	r2, r3
 8006856:	d00b      	beq.n	8006870 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	60fb      	str	r3, [r7, #12]
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	e7fd      	b.n	800686c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10b      	bne.n	8006890 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60bb      	str	r3, [r7, #8]
}
 800688a:	bf00      	nop
 800688c:	bf00      	nop
 800688e:	e7fd      	b.n	800688c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006894:	1e5a      	subs	r2, r3, #1
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d02c      	beq.n	8006900 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d128      	bne.n	8006900 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe f8f0 	bl	8004a98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006910 <xTaskPriorityDisinherit+0xd8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d903      	bls.n	80068e0 <xTaskPriorityDisinherit+0xa8>
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006910 <xTaskPriorityDisinherit+0xd8>)
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4a09      	ldr	r2, [pc, #36]	@ (8006914 <xTaskPriorityDisinherit+0xdc>)
 80068ee:	441a      	add	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f7fe f871 	bl	80049de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006900:	697b      	ldr	r3, [r7, #20]
	}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	200008d8 	.word	0x200008d8
 8006910:	20000db4 	.word	0x20000db4
 8006914:	200008dc 	.word	0x200008dc

08006918 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006926:	2301      	movs	r3, #1
 8006928:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d06c      	beq.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10b      	bne.n	8006950 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	60fb      	str	r3, [r7, #12]
}
 800694a:	bf00      	nop
 800694c:	bf00      	nop
 800694e:	e7fd      	b.n	800694c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d902      	bls.n	8006960 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	e002      	b.n	8006966 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006964:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	429a      	cmp	r2, r3
 800696e:	d04c      	beq.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	429a      	cmp	r2, r3
 8006978:	d147      	bne.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800697a:	4b26      	ldr	r3, [pc, #152]	@ (8006a14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	429a      	cmp	r2, r3
 8006982:	d10b      	bne.n	800699c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	60bb      	str	r3, [r7, #8]
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	e7fd      	b.n	8006998 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	db04      	blt.n	80069ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	6959      	ldr	r1, [r3, #20]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4a13      	ldr	r2, [pc, #76]	@ (8006a18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069ca:	4413      	add	r3, r2
 80069cc:	4299      	cmp	r1, r3
 80069ce:	d11c      	bne.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	3304      	adds	r3, #4
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe f85f 	bl	8004a98 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069de:	4b0f      	ldr	r3, [pc, #60]	@ (8006a1c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d903      	bls.n	80069ee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ea:	4a0c      	ldr	r2, [pc, #48]	@ (8006a1c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4a07      	ldr	r2, [pc, #28]	@ (8006a18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069fc:	441a      	add	r2, r3
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f7fd ffea 	bl	80049de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a0a:	bf00      	nop
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	200008d8 	.word	0x200008d8
 8006a18:	200008dc 	.word	0x200008dc
 8006a1c:	20000db4 	.word	0x20000db4

08006a20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a24:	4b07      	ldr	r3, [pc, #28]	@ (8006a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a2c:	4b05      	ldr	r3, [pc, #20]	@ (8006a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a32:	3201      	adds	r2, #1
 8006a34:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006a36:	4b03      	ldr	r3, [pc, #12]	@ (8006a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a38:	681b      	ldr	r3, [r3, #0]
	}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	200008d8 	.word	0x200008d8

08006a48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a52:	4b21      	ldr	r3, [pc, #132]	@ (8006ad8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a58:	4b20      	ldr	r3, [pc, #128]	@ (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe f81a 	bl	8004a98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a6a:	d10a      	bne.n	8006a82 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d007      	beq.n	8006a82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a72:	4b1a      	ldr	r3, [pc, #104]	@ (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4819      	ldr	r0, [pc, #100]	@ (8006ae0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a7c:	f7fd ffaf 	bl	80049de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a80:	e026      	b.n	8006ad0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4413      	add	r3, r2
 8006a88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a8a:	4b14      	ldr	r3, [pc, #80]	@ (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d209      	bcs.n	8006aae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a9a:	4b12      	ldr	r3, [pc, #72]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7fd ffbd 	bl	8004a26 <vListInsert>
}
 8006aac:	e010      	b.n	8006ad0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aae:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fd ffb3 	bl	8004a26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d202      	bcs.n	8006ad0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006aca:	4a08      	ldr	r2, [pc, #32]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	6013      	str	r3, [r2, #0]
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000db0 	.word	0x20000db0
 8006adc:	200008d8 	.word	0x200008d8
 8006ae0:	20000d98 	.word	0x20000d98
 8006ae4:	20000d68 	.word	0x20000d68
 8006ae8:	20000d64 	.word	0x20000d64
 8006aec:	20000dcc 	.word	0x20000dcc

08006af0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	@ 0x28
 8006af4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006afa:	f000 fb13 	bl	8007124 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006afe:	4b1d      	ldr	r3, [pc, #116]	@ (8006b74 <xTimerCreateTimerTask+0x84>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d021      	beq.n	8006b4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b0e:	1d3a      	adds	r2, r7, #4
 8006b10:	f107 0108 	add.w	r1, r7, #8
 8006b14:	f107 030c 	add.w	r3, r7, #12
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fd ff19 	bl	8004950 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	9202      	str	r2, [sp, #8]
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	2302      	movs	r3, #2
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	460a      	mov	r2, r1
 8006b30:	4911      	ldr	r1, [pc, #68]	@ (8006b78 <xTimerCreateTimerTask+0x88>)
 8006b32:	4812      	ldr	r0, [pc, #72]	@ (8006b7c <xTimerCreateTimerTask+0x8c>)
 8006b34:	f7ff f806 	bl	8005b44 <xTaskCreateStatic>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	4a11      	ldr	r2, [pc, #68]	@ (8006b80 <xTimerCreateTimerTask+0x90>)
 8006b3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b3e:	4b10      	ldr	r3, [pc, #64]	@ (8006b80 <xTimerCreateTimerTask+0x90>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b46:	2301      	movs	r3, #1
 8006b48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10b      	bne.n	8006b68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	613b      	str	r3, [r7, #16]
}
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	e7fd      	b.n	8006b64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b68:	697b      	ldr	r3, [r7, #20]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000e08 	.word	0x20000e08
 8006b78:	08008404 	.word	0x08008404
 8006b7c:	08006cbd 	.word	0x08006cbd
 8006b80:	20000e0c 	.word	0x20000e0c

08006b84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08a      	sub	sp, #40	@ 0x28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10b      	bne.n	8006bb4 <xTimerGenericCommand+0x30>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	623b      	str	r3, [r7, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bb4:	4b19      	ldr	r3, [pc, #100]	@ (8006c1c <xTimerGenericCommand+0x98>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d02a      	beq.n	8006c12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	dc18      	bgt.n	8006c00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bce:	f7ff fdad 	bl	800672c <xTaskGetSchedulerState>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d109      	bne.n	8006bec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bd8:	4b10      	ldr	r3, [pc, #64]	@ (8006c1c <xTimerGenericCommand+0x98>)
 8006bda:	6818      	ldr	r0, [r3, #0]
 8006bdc:	f107 0110 	add.w	r1, r7, #16
 8006be0:	2300      	movs	r3, #0
 8006be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be4:	f7fe f936 	bl	8004e54 <xQueueGenericSend>
 8006be8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006bea:	e012      	b.n	8006c12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bec:	4b0b      	ldr	r3, [pc, #44]	@ (8006c1c <xTimerGenericCommand+0x98>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	f107 0110 	add.w	r1, r7, #16
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f7fe f92c 	bl	8004e54 <xQueueGenericSend>
 8006bfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006bfe:	e008      	b.n	8006c12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c00:	4b06      	ldr	r3, [pc, #24]	@ (8006c1c <xTimerGenericCommand+0x98>)
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	f107 0110 	add.w	r1, r7, #16
 8006c08:	2300      	movs	r3, #0
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	f7fe fa24 	bl	8005058 <xQueueGenericSendFromISR>
 8006c10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3728      	adds	r7, #40	@ 0x28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20000e08 	.word	0x20000e08

08006c20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c2a:	4b23      	ldr	r3, [pc, #140]	@ (8006cb8 <prvProcessExpiredTimer+0x98>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fd ff2d 	bl	8004a98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d023      	beq.n	8006c94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	699a      	ldr	r2, [r3, #24]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	18d1      	adds	r1, r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	6978      	ldr	r0, [r7, #20]
 8006c5a:	f000 f8d5 	bl	8006e08 <prvInsertTimerInActiveList>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d020      	beq.n	8006ca6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c64:	2300      	movs	r3, #0
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	6978      	ldr	r0, [r7, #20]
 8006c70:	f7ff ff88 	bl	8006b84 <xTimerGenericCommand>
 8006c74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d114      	bne.n	8006ca6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60fb      	str	r3, [r7, #12]
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	e7fd      	b.n	8006c90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c9a:	f023 0301 	bic.w	r3, r3, #1
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	6978      	ldr	r0, [r7, #20]
 8006cac:	4798      	blx	r3
}
 8006cae:	bf00      	nop
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000e00 	.word	0x20000e00

08006cbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cc4:	f107 0308 	add.w	r3, r7, #8
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 f859 	bl	8006d80 <prvGetNextExpireTime>
 8006cce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 f805 	bl	8006ce4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cda:	f000 f8d7 	bl	8006e8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cde:	bf00      	nop
 8006ce0:	e7f0      	b.n	8006cc4 <prvTimerTask+0x8>
	...

08006ce4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006cee:	f7ff f937 	bl	8005f60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cf2:	f107 0308 	add.w	r3, r7, #8
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 f866 	bl	8006dc8 <prvSampleTimeNow>
 8006cfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d130      	bne.n	8006d66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <prvProcessTimerOrBlockTask+0x3c>
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d806      	bhi.n	8006d20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d12:	f7ff f933 	bl	8005f7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d16:	68f9      	ldr	r1, [r7, #12]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff ff81 	bl	8006c20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d1e:	e024      	b.n	8006d6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d008      	beq.n	8006d38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d26:	4b13      	ldr	r3, [pc, #76]	@ (8006d74 <prvProcessTimerOrBlockTask+0x90>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <prvProcessTimerOrBlockTask+0x50>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <prvProcessTimerOrBlockTask+0x52>
 8006d34:	2300      	movs	r3, #0
 8006d36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d38:	4b0f      	ldr	r3, [pc, #60]	@ (8006d78 <prvProcessTimerOrBlockTask+0x94>)
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	4619      	mov	r1, r3
 8006d46:	f7fe fec9 	bl	8005adc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d4a:	f7ff f917 	bl	8005f7c <xTaskResumeAll>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d54:	4b09      	ldr	r3, [pc, #36]	@ (8006d7c <prvProcessTimerOrBlockTask+0x98>)
 8006d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	f3bf 8f6f 	isb	sy
}
 8006d64:	e001      	b.n	8006d6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d66:	f7ff f909 	bl	8005f7c <xTaskResumeAll>
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000e04 	.word	0x20000e04
 8006d78:	20000e08 	.word	0x20000e08
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d88:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc4 <prvGetNextExpireTime+0x44>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <prvGetNextExpireTime+0x16>
 8006d92:	2201      	movs	r2, #1
 8006d94:	e000      	b.n	8006d98 <prvGetNextExpireTime+0x18>
 8006d96:	2200      	movs	r2, #0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d105      	bne.n	8006db0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006da4:	4b07      	ldr	r3, [pc, #28]	@ (8006dc4 <prvGetNextExpireTime+0x44>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	e001      	b.n	8006db4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006db4:	68fb      	ldr	r3, [r7, #12]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20000e00 	.word	0x20000e00

08006dc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006dd0:	f7ff f972 	bl	80060b8 <xTaskGetTickCount>
 8006dd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e04 <prvSampleTimeNow+0x3c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d205      	bcs.n	8006dec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006de0:	f000 f93a 	bl	8007058 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	e002      	b.n	8006df2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006df2:	4a04      	ldr	r2, [pc, #16]	@ (8006e04 <prvSampleTimeNow+0x3c>)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006df8:	68fb      	ldr	r3, [r7, #12]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000e10 	.word	0x20000e10

08006e08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d812      	bhi.n	8006e54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	1ad2      	subs	r2, r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d302      	bcc.n	8006e42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e01b      	b.n	8006e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e42:	4b10      	ldr	r3, [pc, #64]	@ (8006e84 <prvInsertTimerInActiveList+0x7c>)
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f7fd fdea 	bl	8004a26 <vListInsert>
 8006e52:	e012      	b.n	8006e7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d206      	bcs.n	8006e6a <prvInsertTimerInActiveList+0x62>
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d302      	bcc.n	8006e6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e64:	2301      	movs	r3, #1
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	e007      	b.n	8006e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e6a:	4b07      	ldr	r3, [pc, #28]	@ (8006e88 <prvInsertTimerInActiveList+0x80>)
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f7fd fdd6 	bl	8004a26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e7a:	697b      	ldr	r3, [r7, #20]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000e04 	.word	0x20000e04
 8006e88:	20000e00 	.word	0x20000e00

08006e8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08e      	sub	sp, #56	@ 0x38
 8006e90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e92:	e0ce      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da19      	bge.n	8006ece <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e9a:	1d3b      	adds	r3, r7, #4
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	61fb      	str	r3, [r7, #28]
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	e7fd      	b.n	8006eba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ec4:	6850      	ldr	r0, [r2, #4]
 8006ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ec8:	6892      	ldr	r2, [r2, #8]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f2c0 80ae 	blt.w	8007032 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fd fdd6 	bl	8004a98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eec:	463b      	mov	r3, r7
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7ff ff6a 	bl	8006dc8 <prvSampleTimeNow>
 8006ef4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b09      	cmp	r3, #9
 8006efa:	f200 8097 	bhi.w	800702c <prvProcessReceivedCommands+0x1a0>
 8006efe:	a201      	add	r2, pc, #4	@ (adr r2, 8006f04 <prvProcessReceivedCommands+0x78>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f2d 	.word	0x08006f2d
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f2d 	.word	0x08006f2d
 8006f10:	08006fa3 	.word	0x08006fa3
 8006f14:	08006fb7 	.word	0x08006fb7
 8006f18:	08007003 	.word	0x08007003
 8006f1c:	08006f2d 	.word	0x08006f2d
 8006f20:	08006f2d 	.word	0x08006f2d
 8006f24:	08006fa3 	.word	0x08006fa3
 8006f28:	08006fb7 	.word	0x08006fb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f32:	f043 0301 	orr.w	r3, r3, #1
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	18d1      	adds	r1, r2, r3
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f4c:	f7ff ff5c 	bl	8006e08 <prvInsertTimerInActiveList>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d06c      	beq.n	8007030 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d061      	beq.n	8007030 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	441a      	add	r2, r3
 8006f74:	2300      	movs	r3, #0
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f7e:	f7ff fe01 	bl	8006b84 <xTimerGenericCommand>
 8006f82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d152      	bne.n	8007030 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	61bb      	str	r3, [r7, #24]
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	e7fd      	b.n	8006f9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006fb4:	e03d      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fbc:	f043 0301 	orr.w	r3, r3, #1
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	617b      	str	r3, [r7, #20]
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	18d1      	adds	r1, r2, r3
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ffc:	f7ff ff04 	bl	8006e08 <prvInsertTimerInActiveList>
					break;
 8007000:	e017      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007012:	f000 fbe9 	bl	80077e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007016:	e00c      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007026:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800702a:	e002      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800702c:	bf00      	nop
 800702e:	e000      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>
					break;
 8007030:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007032:	4b08      	ldr	r3, [pc, #32]	@ (8007054 <prvProcessReceivedCommands+0x1c8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	1d39      	adds	r1, r7, #4
 8007038:	2200      	movs	r2, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe f93a 	bl	80052b4 <xQueueReceive>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	f47f af26 	bne.w	8006e94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	3730      	adds	r7, #48	@ 0x30
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000e08 	.word	0x20000e08

08007058 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800705e:	e049      	b.n	80070f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007060:	4b2e      	ldr	r3, [pc, #184]	@ (800711c <prvSwitchTimerLists+0xc4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800706a:	4b2c      	ldr	r3, [pc, #176]	@ (800711c <prvSwitchTimerLists+0xc4>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3304      	adds	r3, #4
 8007078:	4618      	mov	r0, r3
 800707a:	f7fd fd0d 	bl	8004a98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d02f      	beq.n	80070f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4413      	add	r3, r2
 800709c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d90e      	bls.n	80070c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070b2:	4b1a      	ldr	r3, [pc, #104]	@ (800711c <prvSwitchTimerLists+0xc4>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3304      	adds	r3, #4
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f7fd fcb2 	bl	8004a26 <vListInsert>
 80070c2:	e017      	b.n	80070f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070c4:	2300      	movs	r3, #0
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2300      	movs	r3, #0
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	2100      	movs	r1, #0
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f7ff fd58 	bl	8006b84 <xTimerGenericCommand>
 80070d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10b      	bne.n	80070f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	603b      	str	r3, [r7, #0]
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	e7fd      	b.n	80070f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070f4:	4b09      	ldr	r3, [pc, #36]	@ (800711c <prvSwitchTimerLists+0xc4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1b0      	bne.n	8007060 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070fe:	4b07      	ldr	r3, [pc, #28]	@ (800711c <prvSwitchTimerLists+0xc4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007104:	4b06      	ldr	r3, [pc, #24]	@ (8007120 <prvSwitchTimerLists+0xc8>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a04      	ldr	r2, [pc, #16]	@ (800711c <prvSwitchTimerLists+0xc4>)
 800710a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800710c:	4a04      	ldr	r2, [pc, #16]	@ (8007120 <prvSwitchTimerLists+0xc8>)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	6013      	str	r3, [r2, #0]
}
 8007112:	bf00      	nop
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000e00 	.word	0x20000e00
 8007120:	20000e04 	.word	0x20000e04

08007124 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800712a:	f000 f96d 	bl	8007408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800712e:	4b15      	ldr	r3, [pc, #84]	@ (8007184 <prvCheckForValidListAndQueue+0x60>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d120      	bne.n	8007178 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007136:	4814      	ldr	r0, [pc, #80]	@ (8007188 <prvCheckForValidListAndQueue+0x64>)
 8007138:	f7fd fc24 	bl	8004984 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800713c:	4813      	ldr	r0, [pc, #76]	@ (800718c <prvCheckForValidListAndQueue+0x68>)
 800713e:	f7fd fc21 	bl	8004984 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007142:	4b13      	ldr	r3, [pc, #76]	@ (8007190 <prvCheckForValidListAndQueue+0x6c>)
 8007144:	4a10      	ldr	r2, [pc, #64]	@ (8007188 <prvCheckForValidListAndQueue+0x64>)
 8007146:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007148:	4b12      	ldr	r3, [pc, #72]	@ (8007194 <prvCheckForValidListAndQueue+0x70>)
 800714a:	4a10      	ldr	r2, [pc, #64]	@ (800718c <prvCheckForValidListAndQueue+0x68>)
 800714c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800714e:	2300      	movs	r3, #0
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	4b11      	ldr	r3, [pc, #68]	@ (8007198 <prvCheckForValidListAndQueue+0x74>)
 8007154:	4a11      	ldr	r2, [pc, #68]	@ (800719c <prvCheckForValidListAndQueue+0x78>)
 8007156:	2110      	movs	r1, #16
 8007158:	200a      	movs	r0, #10
 800715a:	f7fd fd31 	bl	8004bc0 <xQueueGenericCreateStatic>
 800715e:	4603      	mov	r3, r0
 8007160:	4a08      	ldr	r2, [pc, #32]	@ (8007184 <prvCheckForValidListAndQueue+0x60>)
 8007162:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007164:	4b07      	ldr	r3, [pc, #28]	@ (8007184 <prvCheckForValidListAndQueue+0x60>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800716c:	4b05      	ldr	r3, [pc, #20]	@ (8007184 <prvCheckForValidListAndQueue+0x60>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	490b      	ldr	r1, [pc, #44]	@ (80071a0 <prvCheckForValidListAndQueue+0x7c>)
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe fc5e 	bl	8005a34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007178:	f000 f978 	bl	800746c <vPortExitCritical>
}
 800717c:	bf00      	nop
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000e08 	.word	0x20000e08
 8007188:	20000dd8 	.word	0x20000dd8
 800718c:	20000dec 	.word	0x20000dec
 8007190:	20000e00 	.word	0x20000e00
 8007194:	20000e04 	.word	0x20000e04
 8007198:	20000eb4 	.word	0x20000eb4
 800719c:	20000e14 	.word	0x20000e14
 80071a0:	0800840c 	.word	0x0800840c

080071a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3b04      	subs	r3, #4
 80071b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3b04      	subs	r3, #4
 80071c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f023 0201 	bic.w	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3b04      	subs	r3, #4
 80071d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007208 <pxPortInitialiseStack+0x64>)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3b14      	subs	r3, #20
 80071de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3b04      	subs	r3, #4
 80071ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f06f 0202 	mvn.w	r2, #2
 80071f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3b20      	subs	r3, #32
 80071f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071fa:	68fb      	ldr	r3, [r7, #12]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	0800720d 	.word	0x0800720d

0800720c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007216:	4b13      	ldr	r3, [pc, #76]	@ (8007264 <prvTaskExitError+0x58>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800721e:	d00b      	beq.n	8007238 <prvTaskExitError+0x2c>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	60fb      	str	r3, [r7, #12]
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	e7fd      	b.n	8007234 <prvTaskExitError+0x28>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	60bb      	str	r3, [r7, #8]
}
 800724a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800724c:	bf00      	nop
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0fc      	beq.n	800724e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	2000000c 	.word	0x2000000c
	...

08007270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007270:	4b07      	ldr	r3, [pc, #28]	@ (8007290 <pxCurrentTCBConst2>)
 8007272:	6819      	ldr	r1, [r3, #0]
 8007274:	6808      	ldr	r0, [r1, #0]
 8007276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727a:	f380 8809 	msr	PSP, r0
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f04f 0000 	mov.w	r0, #0
 8007286:	f380 8811 	msr	BASEPRI, r0
 800728a:	4770      	bx	lr
 800728c:	f3af 8000 	nop.w

08007290 <pxCurrentTCBConst2>:
 8007290:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop

08007298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007298:	4808      	ldr	r0, [pc, #32]	@ (80072bc <prvPortStartFirstTask+0x24>)
 800729a:	6800      	ldr	r0, [r0, #0]
 800729c:	6800      	ldr	r0, [r0, #0]
 800729e:	f380 8808 	msr	MSP, r0
 80072a2:	f04f 0000 	mov.w	r0, #0
 80072a6:	f380 8814 	msr	CONTROL, r0
 80072aa:	b662      	cpsie	i
 80072ac:	b661      	cpsie	f
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	df00      	svc	0
 80072b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ba:	bf00      	nop
 80072bc:	e000ed08 	.word	0xe000ed08

080072c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072c6:	4b47      	ldr	r3, [pc, #284]	@ (80073e4 <xPortStartScheduler+0x124>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a47      	ldr	r2, [pc, #284]	@ (80073e8 <xPortStartScheduler+0x128>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d10b      	bne.n	80072e8 <xPortStartScheduler+0x28>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	613b      	str	r3, [r7, #16]
}
 80072e2:	bf00      	nop
 80072e4:	bf00      	nop
 80072e6:	e7fd      	b.n	80072e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072e8:	4b3e      	ldr	r3, [pc, #248]	@ (80073e4 <xPortStartScheduler+0x124>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a3f      	ldr	r2, [pc, #252]	@ (80073ec <xPortStartScheduler+0x12c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10b      	bne.n	800730a <xPortStartScheduler+0x4a>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	60fb      	str	r3, [r7, #12]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800730a:	4b39      	ldr	r3, [pc, #228]	@ (80073f0 <xPortStartScheduler+0x130>)
 800730c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	22ff      	movs	r2, #255	@ 0xff
 800731a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800732c:	b2da      	uxtb	r2, r3
 800732e:	4b31      	ldr	r3, [pc, #196]	@ (80073f4 <xPortStartScheduler+0x134>)
 8007330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007332:	4b31      	ldr	r3, [pc, #196]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007334:	2207      	movs	r2, #7
 8007336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007338:	e009      	b.n	800734e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800733a:	4b2f      	ldr	r3, [pc, #188]	@ (80073f8 <xPortStartScheduler+0x138>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3b01      	subs	r3, #1
 8007340:	4a2d      	ldr	r2, [pc, #180]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007356:	2b80      	cmp	r3, #128	@ 0x80
 8007358:	d0ef      	beq.n	800733a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800735a:	4b27      	ldr	r3, [pc, #156]	@ (80073f8 <xPortStartScheduler+0x138>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1c3 0307 	rsb	r3, r3, #7
 8007362:	2b04      	cmp	r3, #4
 8007364:	d00b      	beq.n	800737e <xPortStartScheduler+0xbe>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	60bb      	str	r3, [r7, #8]
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	e7fd      	b.n	800737a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800737e:	4b1e      	ldr	r3, [pc, #120]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	4a1c      	ldr	r2, [pc, #112]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007388:	4b1b      	ldr	r3, [pc, #108]	@ (80073f8 <xPortStartScheduler+0x138>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007390:	4a19      	ldr	r2, [pc, #100]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800739c:	4b17      	ldr	r3, [pc, #92]	@ (80073fc <xPortStartScheduler+0x13c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a16      	ldr	r2, [pc, #88]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80073a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073a8:	4b14      	ldr	r3, [pc, #80]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a13      	ldr	r2, [pc, #76]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80073b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073b4:	f000 f8da 	bl	800756c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073b8:	4b11      	ldr	r3, [pc, #68]	@ (8007400 <xPortStartScheduler+0x140>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073be:	f000 f8f9 	bl	80075b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073c2:	4b10      	ldr	r3, [pc, #64]	@ (8007404 <xPortStartScheduler+0x144>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007404 <xPortStartScheduler+0x144>)
 80073c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80073cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073ce:	f7ff ff63 	bl	8007298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073d2:	f7fe ff3b 	bl	800624c <vTaskSwitchContext>
	prvTaskExitError();
 80073d6:	f7ff ff19 	bl	800720c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	e000ed00 	.word	0xe000ed00
 80073e8:	410fc271 	.word	0x410fc271
 80073ec:	410fc270 	.word	0x410fc270
 80073f0:	e000e400 	.word	0xe000e400
 80073f4:	20000f04 	.word	0x20000f04
 80073f8:	20000f08 	.word	0x20000f08
 80073fc:	e000ed20 	.word	0xe000ed20
 8007400:	2000000c 	.word	0x2000000c
 8007404:	e000ef34 	.word	0xe000ef34

08007408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	607b      	str	r3, [r7, #4]
}
 8007420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007422:	4b10      	ldr	r3, [pc, #64]	@ (8007464 <vPortEnterCritical+0x5c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	4a0e      	ldr	r2, [pc, #56]	@ (8007464 <vPortEnterCritical+0x5c>)
 800742a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800742c:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <vPortEnterCritical+0x5c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d110      	bne.n	8007456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007434:	4b0c      	ldr	r3, [pc, #48]	@ (8007468 <vPortEnterCritical+0x60>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <vPortEnterCritical+0x4e>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	603b      	str	r3, [r7, #0]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <vPortEnterCritical+0x4a>
	}
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	2000000c 	.word	0x2000000c
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007472:	4b12      	ldr	r3, [pc, #72]	@ (80074bc <vPortExitCritical+0x50>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10b      	bne.n	8007492 <vPortExitCritical+0x26>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	607b      	str	r3, [r7, #4]
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	e7fd      	b.n	800748e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007492:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <vPortExitCritical+0x50>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3b01      	subs	r3, #1
 8007498:	4a08      	ldr	r2, [pc, #32]	@ (80074bc <vPortExitCritical+0x50>)
 800749a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800749c:	4b07      	ldr	r3, [pc, #28]	@ (80074bc <vPortExitCritical+0x50>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <vPortExitCritical+0x44>
 80074a4:	2300      	movs	r3, #0
 80074a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f383 8811 	msr	BASEPRI, r3
}
 80074ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	2000000c 	.word	0x2000000c

080074c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074c0:	f3ef 8009 	mrs	r0, PSP
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	4b15      	ldr	r3, [pc, #84]	@ (8007520 <pxCurrentTCBConst>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	f01e 0f10 	tst.w	lr, #16
 80074d0:	bf08      	it	eq
 80074d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	6010      	str	r0, [r2, #0]
 80074dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80074e4:	f380 8811 	msr	BASEPRI, r0
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f7fe feac 	bl	800624c <vTaskSwitchContext>
 80074f4:	f04f 0000 	mov.w	r0, #0
 80074f8:	f380 8811 	msr	BASEPRI, r0
 80074fc:	bc09      	pop	{r0, r3}
 80074fe:	6819      	ldr	r1, [r3, #0]
 8007500:	6808      	ldr	r0, [r1, #0]
 8007502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007506:	f01e 0f10 	tst.w	lr, #16
 800750a:	bf08      	it	eq
 800750c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007510:	f380 8809 	msr	PSP, r0
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w

08007520 <pxCurrentTCBConst>:
 8007520:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	607b      	str	r3, [r7, #4]
}
 8007540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007542:	f7fe fdc9 	bl	80060d8 <xTaskIncrementTick>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800754c:	4b06      	ldr	r3, [pc, #24]	@ (8007568 <xPortSysTickHandler+0x40>)
 800754e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	2300      	movs	r3, #0
 8007556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f383 8811 	msr	BASEPRI, r3
}
 800755e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	e000ed04 	.word	0xe000ed04

0800756c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007570:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <vPortSetupTimerInterrupt+0x34>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007576:	4b0b      	ldr	r3, [pc, #44]	@ (80075a4 <vPortSetupTimerInterrupt+0x38>)
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800757c:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <vPortSetupTimerInterrupt+0x3c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a0a      	ldr	r2, [pc, #40]	@ (80075ac <vPortSetupTimerInterrupt+0x40>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	099b      	lsrs	r3, r3, #6
 8007588:	4a09      	ldr	r2, [pc, #36]	@ (80075b0 <vPortSetupTimerInterrupt+0x44>)
 800758a:	3b01      	subs	r3, #1
 800758c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800758e:	4b04      	ldr	r3, [pc, #16]	@ (80075a0 <vPortSetupTimerInterrupt+0x34>)
 8007590:	2207      	movs	r2, #7
 8007592:	601a      	str	r2, [r3, #0]
}
 8007594:	bf00      	nop
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	e000e010 	.word	0xe000e010
 80075a4:	e000e018 	.word	0xe000e018
 80075a8:	20000000 	.word	0x20000000
 80075ac:	10624dd3 	.word	0x10624dd3
 80075b0:	e000e014 	.word	0xe000e014

080075b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80075c4 <vPortEnableVFP+0x10>
 80075b8:	6801      	ldr	r1, [r0, #0]
 80075ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80075be:	6001      	str	r1, [r0, #0]
 80075c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075c2:	bf00      	nop
 80075c4:	e000ed88 	.word	0xe000ed88

080075c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075ce:	f3ef 8305 	mrs	r3, IPSR
 80075d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d915      	bls.n	8007606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075da:	4a18      	ldr	r2, [pc, #96]	@ (800763c <vPortValidateInterruptPriority+0x74>)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075e4:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <vPortValidateInterruptPriority+0x78>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	7afa      	ldrb	r2, [r7, #11]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d20b      	bcs.n	8007606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	607b      	str	r3, [r7, #4]
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	e7fd      	b.n	8007602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007606:	4b0f      	ldr	r3, [pc, #60]	@ (8007644 <vPortValidateInterruptPriority+0x7c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800760e:	4b0e      	ldr	r3, [pc, #56]	@ (8007648 <vPortValidateInterruptPriority+0x80>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d90b      	bls.n	800762e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	603b      	str	r3, [r7, #0]
}
 8007628:	bf00      	nop
 800762a:	bf00      	nop
 800762c:	e7fd      	b.n	800762a <vPortValidateInterruptPriority+0x62>
	}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	e000e3f0 	.word	0xe000e3f0
 8007640:	20000f04 	.word	0x20000f04
 8007644:	e000ed0c 	.word	0xe000ed0c
 8007648:	20000f08 	.word	0x20000f08

0800764c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	@ 0x28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007654:	2300      	movs	r3, #0
 8007656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007658:	f7fe fc82 	bl	8005f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800765c:	4b5c      	ldr	r3, [pc, #368]	@ (80077d0 <pvPortMalloc+0x184>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007664:	f000 f924 	bl	80078b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007668:	4b5a      	ldr	r3, [pc, #360]	@ (80077d4 <pvPortMalloc+0x188>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4013      	ands	r3, r2
 8007670:	2b00      	cmp	r3, #0
 8007672:	f040 8095 	bne.w	80077a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01e      	beq.n	80076ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800767c:	2208      	movs	r2, #8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b00      	cmp	r3, #0
 800768c:	d015      	beq.n	80076ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f023 0307 	bic.w	r3, r3, #7
 8007694:	3308      	adds	r3, #8
 8007696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00b      	beq.n	80076ba <pvPortMalloc+0x6e>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	617b      	str	r3, [r7, #20]
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	e7fd      	b.n	80076b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d06f      	beq.n	80077a0 <pvPortMalloc+0x154>
 80076c0:	4b45      	ldr	r3, [pc, #276]	@ (80077d8 <pvPortMalloc+0x18c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d86a      	bhi.n	80077a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076ca:	4b44      	ldr	r3, [pc, #272]	@ (80077dc <pvPortMalloc+0x190>)
 80076cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076ce:	4b43      	ldr	r3, [pc, #268]	@ (80077dc <pvPortMalloc+0x190>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076d4:	e004      	b.n	80076e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d903      	bls.n	80076f2 <pvPortMalloc+0xa6>
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f1      	bne.n	80076d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076f2:	4b37      	ldr	r3, [pc, #220]	@ (80077d0 <pvPortMalloc+0x184>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d051      	beq.n	80077a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2208      	movs	r2, #8
 8007702:	4413      	add	r3, r2
 8007704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	1ad2      	subs	r2, r2, r3
 8007716:	2308      	movs	r3, #8
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	429a      	cmp	r2, r3
 800771c:	d920      	bls.n	8007760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800771e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4413      	add	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00b      	beq.n	8007748 <pvPortMalloc+0xfc>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	613b      	str	r3, [r7, #16]
}
 8007742:	bf00      	nop
 8007744:	bf00      	nop
 8007746:	e7fd      	b.n	8007744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800775a:	69b8      	ldr	r0, [r7, #24]
 800775c:	f000 f90a 	bl	8007974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007760:	4b1d      	ldr	r3, [pc, #116]	@ (80077d8 <pvPortMalloc+0x18c>)
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	4a1b      	ldr	r2, [pc, #108]	@ (80077d8 <pvPortMalloc+0x18c>)
 800776c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800776e:	4b1a      	ldr	r3, [pc, #104]	@ (80077d8 <pvPortMalloc+0x18c>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b1b      	ldr	r3, [pc, #108]	@ (80077e0 <pvPortMalloc+0x194>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d203      	bcs.n	8007782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800777a:	4b17      	ldr	r3, [pc, #92]	@ (80077d8 <pvPortMalloc+0x18c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a18      	ldr	r2, [pc, #96]	@ (80077e0 <pvPortMalloc+0x194>)
 8007780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	4b13      	ldr	r3, [pc, #76]	@ (80077d4 <pvPortMalloc+0x188>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	431a      	orrs	r2, r3
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007796:	4b13      	ldr	r3, [pc, #76]	@ (80077e4 <pvPortMalloc+0x198>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3301      	adds	r3, #1
 800779c:	4a11      	ldr	r2, [pc, #68]	@ (80077e4 <pvPortMalloc+0x198>)
 800779e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077a0:	f7fe fbec 	bl	8005f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <pvPortMalloc+0x17a>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60fb      	str	r3, [r7, #12]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <pvPortMalloc+0x176>
	return pvReturn;
 80077c6:	69fb      	ldr	r3, [r7, #28]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3728      	adds	r7, #40	@ 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20001b14 	.word	0x20001b14
 80077d4:	20001b28 	.word	0x20001b28
 80077d8:	20001b18 	.word	0x20001b18
 80077dc:	20001b0c 	.word	0x20001b0c
 80077e0:	20001b1c 	.word	0x20001b1c
 80077e4:	20001b20 	.word	0x20001b20

080077e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d04f      	beq.n	800789a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077fa:	2308      	movs	r3, #8
 80077fc:	425b      	negs	r3, r3
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4413      	add	r3, r2
 8007802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	4b25      	ldr	r3, [pc, #148]	@ (80078a4 <vPortFree+0xbc>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4013      	ands	r3, r2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10b      	bne.n	800782e <vPortFree+0x46>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60fb      	str	r3, [r7, #12]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <vPortFree+0x66>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	60bb      	str	r3, [r7, #8]
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <vPortFree+0xbc>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4013      	ands	r3, r2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01e      	beq.n	800789a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d11a      	bne.n	800789a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	4b0e      	ldr	r3, [pc, #56]	@ (80078a4 <vPortFree+0xbc>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	43db      	mvns	r3, r3
 800786e:	401a      	ands	r2, r3
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007874:	f7fe fb74 	bl	8005f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <vPortFree+0xc0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4413      	add	r3, r2
 8007882:	4a09      	ldr	r2, [pc, #36]	@ (80078a8 <vPortFree+0xc0>)
 8007884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007886:	6938      	ldr	r0, [r7, #16]
 8007888:	f000 f874 	bl	8007974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800788c:	4b07      	ldr	r3, [pc, #28]	@ (80078ac <vPortFree+0xc4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	4a06      	ldr	r2, [pc, #24]	@ (80078ac <vPortFree+0xc4>)
 8007894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007896:	f7fe fb71 	bl	8005f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800789a:	bf00      	nop
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20001b28 	.word	0x20001b28
 80078a8:	20001b18 	.word	0x20001b18
 80078ac:	20001b24 	.word	0x20001b24

080078b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80078ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078bc:	4b27      	ldr	r3, [pc, #156]	@ (800795c <prvHeapInit+0xac>)
 80078be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00c      	beq.n	80078e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3307      	adds	r3, #7
 80078ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0307 	bic.w	r3, r3, #7
 80078d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	4a1f      	ldr	r2, [pc, #124]	@ (800795c <prvHeapInit+0xac>)
 80078e0:	4413      	add	r3, r2
 80078e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007960 <prvHeapInit+0xb0>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007960 <prvHeapInit+0xb0>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4413      	add	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078fc:	2208      	movs	r2, #8
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0307 	bic.w	r3, r3, #7
 800790a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4a15      	ldr	r2, [pc, #84]	@ (8007964 <prvHeapInit+0xb4>)
 8007910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007912:	4b14      	ldr	r3, [pc, #80]	@ (8007964 <prvHeapInit+0xb4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2200      	movs	r2, #0
 8007918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800791a:	4b12      	ldr	r3, [pc, #72]	@ (8007964 <prvHeapInit+0xb4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	1ad2      	subs	r2, r2, r3
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007930:	4b0c      	ldr	r3, [pc, #48]	@ (8007964 <prvHeapInit+0xb4>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	4a0a      	ldr	r2, [pc, #40]	@ (8007968 <prvHeapInit+0xb8>)
 800793e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4a09      	ldr	r2, [pc, #36]	@ (800796c <prvHeapInit+0xbc>)
 8007946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007948:	4b09      	ldr	r3, [pc, #36]	@ (8007970 <prvHeapInit+0xc0>)
 800794a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800794e:	601a      	str	r2, [r3, #0]
}
 8007950:	bf00      	nop
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	20000f0c 	.word	0x20000f0c
 8007960:	20001b0c 	.word	0x20001b0c
 8007964:	20001b14 	.word	0x20001b14
 8007968:	20001b1c 	.word	0x20001b1c
 800796c:	20001b18 	.word	0x20001b18
 8007970:	20001b28 	.word	0x20001b28

08007974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800797c:	4b28      	ldr	r3, [pc, #160]	@ (8007a20 <prvInsertBlockIntoFreeList+0xac>)
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	e002      	b.n	8007988 <prvInsertBlockIntoFreeList+0x14>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	429a      	cmp	r2, r3
 8007990:	d8f7      	bhi.n	8007982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d108      	bne.n	80079b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	441a      	add	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	441a      	add	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d118      	bne.n	80079fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4b15      	ldr	r3, [pc, #84]	@ (8007a24 <prvInsertBlockIntoFreeList+0xb0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d00d      	beq.n	80079f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	441a      	add	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	e008      	b.n	8007a04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a24 <prvInsertBlockIntoFreeList+0xb0>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	e003      	b.n	8007a04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d002      	beq.n	8007a12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	20001b0c 	.word	0x20001b0c
 8007a24:	20001b14 	.word	0x20001b14

08007a28 <std>:
 8007a28:	2300      	movs	r3, #0
 8007a2a:	b510      	push	{r4, lr}
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a36:	6083      	str	r3, [r0, #8]
 8007a38:	8181      	strh	r1, [r0, #12]
 8007a3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a3c:	81c2      	strh	r2, [r0, #14]
 8007a3e:	6183      	str	r3, [r0, #24]
 8007a40:	4619      	mov	r1, r3
 8007a42:	2208      	movs	r2, #8
 8007a44:	305c      	adds	r0, #92	@ 0x5c
 8007a46:	f000 f9e7 	bl	8007e18 <memset>
 8007a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a80 <std+0x58>)
 8007a4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a84 <std+0x5c>)
 8007a50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a52:	4b0d      	ldr	r3, [pc, #52]	@ (8007a88 <std+0x60>)
 8007a54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a56:	4b0d      	ldr	r3, [pc, #52]	@ (8007a8c <std+0x64>)
 8007a58:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a90 <std+0x68>)
 8007a5c:	6224      	str	r4, [r4, #32]
 8007a5e:	429c      	cmp	r4, r3
 8007a60:	d006      	beq.n	8007a70 <std+0x48>
 8007a62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a66:	4294      	cmp	r4, r2
 8007a68:	d002      	beq.n	8007a70 <std+0x48>
 8007a6a:	33d0      	adds	r3, #208	@ 0xd0
 8007a6c:	429c      	cmp	r4, r3
 8007a6e:	d105      	bne.n	8007a7c <std+0x54>
 8007a70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a78:	f000 ba46 	b.w	8007f08 <__retarget_lock_init_recursive>
 8007a7c:	bd10      	pop	{r4, pc}
 8007a7e:	bf00      	nop
 8007a80:	08007c69 	.word	0x08007c69
 8007a84:	08007c8b 	.word	0x08007c8b
 8007a88:	08007cc3 	.word	0x08007cc3
 8007a8c:	08007ce7 	.word	0x08007ce7
 8007a90:	20001b2c 	.word	0x20001b2c

08007a94 <stdio_exit_handler>:
 8007a94:	4a02      	ldr	r2, [pc, #8]	@ (8007aa0 <stdio_exit_handler+0xc>)
 8007a96:	4903      	ldr	r1, [pc, #12]	@ (8007aa4 <stdio_exit_handler+0x10>)
 8007a98:	4803      	ldr	r0, [pc, #12]	@ (8007aa8 <stdio_exit_handler+0x14>)
 8007a9a:	f000 b869 	b.w	8007b70 <_fwalk_sglue>
 8007a9e:	bf00      	nop
 8007aa0:	20000010 	.word	0x20000010
 8007aa4:	08008225 	.word	0x08008225
 8007aa8:	20000020 	.word	0x20000020

08007aac <cleanup_stdio>:
 8007aac:	6841      	ldr	r1, [r0, #4]
 8007aae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae0 <cleanup_stdio+0x34>)
 8007ab0:	4299      	cmp	r1, r3
 8007ab2:	b510      	push	{r4, lr}
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	d001      	beq.n	8007abc <cleanup_stdio+0x10>
 8007ab8:	f000 fbb4 	bl	8008224 <_fflush_r>
 8007abc:	68a1      	ldr	r1, [r4, #8]
 8007abe:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <cleanup_stdio+0x38>)
 8007ac0:	4299      	cmp	r1, r3
 8007ac2:	d002      	beq.n	8007aca <cleanup_stdio+0x1e>
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 fbad 	bl	8008224 <_fflush_r>
 8007aca:	68e1      	ldr	r1, [r4, #12]
 8007acc:	4b06      	ldr	r3, [pc, #24]	@ (8007ae8 <cleanup_stdio+0x3c>)
 8007ace:	4299      	cmp	r1, r3
 8007ad0:	d004      	beq.n	8007adc <cleanup_stdio+0x30>
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad8:	f000 bba4 	b.w	8008224 <_fflush_r>
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	bf00      	nop
 8007ae0:	20001b2c 	.word	0x20001b2c
 8007ae4:	20001b94 	.word	0x20001b94
 8007ae8:	20001bfc 	.word	0x20001bfc

08007aec <global_stdio_init.part.0>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	4b0b      	ldr	r3, [pc, #44]	@ (8007b1c <global_stdio_init.part.0+0x30>)
 8007af0:	4c0b      	ldr	r4, [pc, #44]	@ (8007b20 <global_stdio_init.part.0+0x34>)
 8007af2:	4a0c      	ldr	r2, [pc, #48]	@ (8007b24 <global_stdio_init.part.0+0x38>)
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	4620      	mov	r0, r4
 8007af8:	2200      	movs	r2, #0
 8007afa:	2104      	movs	r1, #4
 8007afc:	f7ff ff94 	bl	8007a28 <std>
 8007b00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b04:	2201      	movs	r2, #1
 8007b06:	2109      	movs	r1, #9
 8007b08:	f7ff ff8e 	bl	8007a28 <std>
 8007b0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b10:	2202      	movs	r2, #2
 8007b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b16:	2112      	movs	r1, #18
 8007b18:	f7ff bf86 	b.w	8007a28 <std>
 8007b1c:	20001c64 	.word	0x20001c64
 8007b20:	20001b2c 	.word	0x20001b2c
 8007b24:	08007a95 	.word	0x08007a95

08007b28 <__sfp_lock_acquire>:
 8007b28:	4801      	ldr	r0, [pc, #4]	@ (8007b30 <__sfp_lock_acquire+0x8>)
 8007b2a:	f000 b9ee 	b.w	8007f0a <__retarget_lock_acquire_recursive>
 8007b2e:	bf00      	nop
 8007b30:	20001c6d 	.word	0x20001c6d

08007b34 <__sfp_lock_release>:
 8007b34:	4801      	ldr	r0, [pc, #4]	@ (8007b3c <__sfp_lock_release+0x8>)
 8007b36:	f000 b9e9 	b.w	8007f0c <__retarget_lock_release_recursive>
 8007b3a:	bf00      	nop
 8007b3c:	20001c6d 	.word	0x20001c6d

08007b40 <__sinit>:
 8007b40:	b510      	push	{r4, lr}
 8007b42:	4604      	mov	r4, r0
 8007b44:	f7ff fff0 	bl	8007b28 <__sfp_lock_acquire>
 8007b48:	6a23      	ldr	r3, [r4, #32]
 8007b4a:	b11b      	cbz	r3, 8007b54 <__sinit+0x14>
 8007b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b50:	f7ff bff0 	b.w	8007b34 <__sfp_lock_release>
 8007b54:	4b04      	ldr	r3, [pc, #16]	@ (8007b68 <__sinit+0x28>)
 8007b56:	6223      	str	r3, [r4, #32]
 8007b58:	4b04      	ldr	r3, [pc, #16]	@ (8007b6c <__sinit+0x2c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f5      	bne.n	8007b4c <__sinit+0xc>
 8007b60:	f7ff ffc4 	bl	8007aec <global_stdio_init.part.0>
 8007b64:	e7f2      	b.n	8007b4c <__sinit+0xc>
 8007b66:	bf00      	nop
 8007b68:	08007aad 	.word	0x08007aad
 8007b6c:	20001c64 	.word	0x20001c64

08007b70 <_fwalk_sglue>:
 8007b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b74:	4607      	mov	r7, r0
 8007b76:	4688      	mov	r8, r1
 8007b78:	4614      	mov	r4, r2
 8007b7a:	2600      	movs	r6, #0
 8007b7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b80:	f1b9 0901 	subs.w	r9, r9, #1
 8007b84:	d505      	bpl.n	8007b92 <_fwalk_sglue+0x22>
 8007b86:	6824      	ldr	r4, [r4, #0]
 8007b88:	2c00      	cmp	r4, #0
 8007b8a:	d1f7      	bne.n	8007b7c <_fwalk_sglue+0xc>
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b92:	89ab      	ldrh	r3, [r5, #12]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d907      	bls.n	8007ba8 <_fwalk_sglue+0x38>
 8007b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	d003      	beq.n	8007ba8 <_fwalk_sglue+0x38>
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	47c0      	blx	r8
 8007ba6:	4306      	orrs	r6, r0
 8007ba8:	3568      	adds	r5, #104	@ 0x68
 8007baa:	e7e9      	b.n	8007b80 <_fwalk_sglue+0x10>

08007bac <_puts_r>:
 8007bac:	6a03      	ldr	r3, [r0, #32]
 8007bae:	b570      	push	{r4, r5, r6, lr}
 8007bb0:	6884      	ldr	r4, [r0, #8]
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	460e      	mov	r6, r1
 8007bb6:	b90b      	cbnz	r3, 8007bbc <_puts_r+0x10>
 8007bb8:	f7ff ffc2 	bl	8007b40 <__sinit>
 8007bbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bbe:	07db      	lsls	r3, r3, #31
 8007bc0:	d405      	bmi.n	8007bce <_puts_r+0x22>
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	0598      	lsls	r0, r3, #22
 8007bc6:	d402      	bmi.n	8007bce <_puts_r+0x22>
 8007bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bca:	f000 f99e 	bl	8007f0a <__retarget_lock_acquire_recursive>
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	0719      	lsls	r1, r3, #28
 8007bd2:	d502      	bpl.n	8007bda <_puts_r+0x2e>
 8007bd4:	6923      	ldr	r3, [r4, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d135      	bne.n	8007c46 <_puts_r+0x9a>
 8007bda:	4621      	mov	r1, r4
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f000 f8c5 	bl	8007d6c <__swsetup_r>
 8007be2:	b380      	cbz	r0, 8007c46 <_puts_r+0x9a>
 8007be4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007be8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bea:	07da      	lsls	r2, r3, #31
 8007bec:	d405      	bmi.n	8007bfa <_puts_r+0x4e>
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	059b      	lsls	r3, r3, #22
 8007bf2:	d402      	bmi.n	8007bfa <_puts_r+0x4e>
 8007bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bf6:	f000 f989 	bl	8007f0c <__retarget_lock_release_recursive>
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	bd70      	pop	{r4, r5, r6, pc}
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da04      	bge.n	8007c0c <_puts_r+0x60>
 8007c02:	69a2      	ldr	r2, [r4, #24]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	dc17      	bgt.n	8007c38 <_puts_r+0x8c>
 8007c08:	290a      	cmp	r1, #10
 8007c0a:	d015      	beq.n	8007c38 <_puts_r+0x8c>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	6022      	str	r2, [r4, #0]
 8007c12:	7019      	strb	r1, [r3, #0]
 8007c14:	68a3      	ldr	r3, [r4, #8]
 8007c16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	60a3      	str	r3, [r4, #8]
 8007c1e:	2900      	cmp	r1, #0
 8007c20:	d1ed      	bne.n	8007bfe <_puts_r+0x52>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	da11      	bge.n	8007c4a <_puts_r+0x9e>
 8007c26:	4622      	mov	r2, r4
 8007c28:	210a      	movs	r1, #10
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f000 f85f 	bl	8007cee <__swbuf_r>
 8007c30:	3001      	adds	r0, #1
 8007c32:	d0d7      	beq.n	8007be4 <_puts_r+0x38>
 8007c34:	250a      	movs	r5, #10
 8007c36:	e7d7      	b.n	8007be8 <_puts_r+0x3c>
 8007c38:	4622      	mov	r2, r4
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 f857 	bl	8007cee <__swbuf_r>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d1e7      	bne.n	8007c14 <_puts_r+0x68>
 8007c44:	e7ce      	b.n	8007be4 <_puts_r+0x38>
 8007c46:	3e01      	subs	r6, #1
 8007c48:	e7e4      	b.n	8007c14 <_puts_r+0x68>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	6022      	str	r2, [r4, #0]
 8007c50:	220a      	movs	r2, #10
 8007c52:	701a      	strb	r2, [r3, #0]
 8007c54:	e7ee      	b.n	8007c34 <_puts_r+0x88>
	...

08007c58 <puts>:
 8007c58:	4b02      	ldr	r3, [pc, #8]	@ (8007c64 <puts+0xc>)
 8007c5a:	4601      	mov	r1, r0
 8007c5c:	6818      	ldr	r0, [r3, #0]
 8007c5e:	f7ff bfa5 	b.w	8007bac <_puts_r>
 8007c62:	bf00      	nop
 8007c64:	2000001c 	.word	0x2000001c

08007c68 <__sread>:
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c70:	f000 f8fc 	bl	8007e6c <_read_r>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	bfab      	itete	ge
 8007c78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c7c:	181b      	addge	r3, r3, r0
 8007c7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c82:	bfac      	ite	ge
 8007c84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c86:	81a3      	strhlt	r3, [r4, #12]
 8007c88:	bd10      	pop	{r4, pc}

08007c8a <__swrite>:
 8007c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8e:	461f      	mov	r7, r3
 8007c90:	898b      	ldrh	r3, [r1, #12]
 8007c92:	05db      	lsls	r3, r3, #23
 8007c94:	4605      	mov	r5, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	4616      	mov	r6, r2
 8007c9a:	d505      	bpl.n	8007ca8 <__swrite+0x1e>
 8007c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f000 f8d0 	bl	8007e48 <_lseek_r>
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	463b      	mov	r3, r7
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbe:	f000 b8e7 	b.w	8007e90 <_write_r>

08007cc2 <__sseek>:
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cca:	f000 f8bd 	bl	8007e48 <_lseek_r>
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	bf15      	itete	ne
 8007cd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cde:	81a3      	strheq	r3, [r4, #12]
 8007ce0:	bf18      	it	ne
 8007ce2:	81a3      	strhne	r3, [r4, #12]
 8007ce4:	bd10      	pop	{r4, pc}

08007ce6 <__sclose>:
 8007ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cea:	f000 b89d 	b.w	8007e28 <_close_r>

08007cee <__swbuf_r>:
 8007cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf0:	460e      	mov	r6, r1
 8007cf2:	4614      	mov	r4, r2
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	b118      	cbz	r0, 8007d00 <__swbuf_r+0x12>
 8007cf8:	6a03      	ldr	r3, [r0, #32]
 8007cfa:	b90b      	cbnz	r3, 8007d00 <__swbuf_r+0x12>
 8007cfc:	f7ff ff20 	bl	8007b40 <__sinit>
 8007d00:	69a3      	ldr	r3, [r4, #24]
 8007d02:	60a3      	str	r3, [r4, #8]
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	071a      	lsls	r2, r3, #28
 8007d08:	d501      	bpl.n	8007d0e <__swbuf_r+0x20>
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	b943      	cbnz	r3, 8007d20 <__swbuf_r+0x32>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	f000 f82b 	bl	8007d6c <__swsetup_r>
 8007d16:	b118      	cbz	r0, 8007d20 <__swbuf_r+0x32>
 8007d18:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	6922      	ldr	r2, [r4, #16]
 8007d24:	1a98      	subs	r0, r3, r2
 8007d26:	6963      	ldr	r3, [r4, #20]
 8007d28:	b2f6      	uxtb	r6, r6
 8007d2a:	4283      	cmp	r3, r0
 8007d2c:	4637      	mov	r7, r6
 8007d2e:	dc05      	bgt.n	8007d3c <__swbuf_r+0x4e>
 8007d30:	4621      	mov	r1, r4
 8007d32:	4628      	mov	r0, r5
 8007d34:	f000 fa76 	bl	8008224 <_fflush_r>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d1ed      	bne.n	8007d18 <__swbuf_r+0x2a>
 8007d3c:	68a3      	ldr	r3, [r4, #8]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	60a3      	str	r3, [r4, #8]
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	6022      	str	r2, [r4, #0]
 8007d48:	701e      	strb	r6, [r3, #0]
 8007d4a:	6962      	ldr	r2, [r4, #20]
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d004      	beq.n	8007d5c <__swbuf_r+0x6e>
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	07db      	lsls	r3, r3, #31
 8007d56:	d5e1      	bpl.n	8007d1c <__swbuf_r+0x2e>
 8007d58:	2e0a      	cmp	r6, #10
 8007d5a:	d1df      	bne.n	8007d1c <__swbuf_r+0x2e>
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f000 fa60 	bl	8008224 <_fflush_r>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d0d9      	beq.n	8007d1c <__swbuf_r+0x2e>
 8007d68:	e7d6      	b.n	8007d18 <__swbuf_r+0x2a>
	...

08007d6c <__swsetup_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4b29      	ldr	r3, [pc, #164]	@ (8007e14 <__swsetup_r+0xa8>)
 8007d70:	4605      	mov	r5, r0
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	460c      	mov	r4, r1
 8007d76:	b118      	cbz	r0, 8007d80 <__swsetup_r+0x14>
 8007d78:	6a03      	ldr	r3, [r0, #32]
 8007d7a:	b90b      	cbnz	r3, 8007d80 <__swsetup_r+0x14>
 8007d7c:	f7ff fee0 	bl	8007b40 <__sinit>
 8007d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d84:	0719      	lsls	r1, r3, #28
 8007d86:	d422      	bmi.n	8007dce <__swsetup_r+0x62>
 8007d88:	06da      	lsls	r2, r3, #27
 8007d8a:	d407      	bmi.n	8007d9c <__swsetup_r+0x30>
 8007d8c:	2209      	movs	r2, #9
 8007d8e:	602a      	str	r2, [r5, #0]
 8007d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d9a:	e033      	b.n	8007e04 <__swsetup_r+0x98>
 8007d9c:	0758      	lsls	r0, r3, #29
 8007d9e:	d512      	bpl.n	8007dc6 <__swsetup_r+0x5a>
 8007da0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007da2:	b141      	cbz	r1, 8007db6 <__swsetup_r+0x4a>
 8007da4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007da8:	4299      	cmp	r1, r3
 8007daa:	d002      	beq.n	8007db2 <__swsetup_r+0x46>
 8007dac:	4628      	mov	r0, r5
 8007dae:	f000 f8bd 	bl	8007f2c <_free_r>
 8007db2:	2300      	movs	r3, #0
 8007db4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6063      	str	r3, [r4, #4]
 8007dc2:	6923      	ldr	r3, [r4, #16]
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	f043 0308 	orr.w	r3, r3, #8
 8007dcc:	81a3      	strh	r3, [r4, #12]
 8007dce:	6923      	ldr	r3, [r4, #16]
 8007dd0:	b94b      	cbnz	r3, 8007de6 <__swsetup_r+0x7a>
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ddc:	d003      	beq.n	8007de6 <__swsetup_r+0x7a>
 8007dde:	4621      	mov	r1, r4
 8007de0:	4628      	mov	r0, r5
 8007de2:	f000 fa6d 	bl	80082c0 <__smakebuf_r>
 8007de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dea:	f013 0201 	ands.w	r2, r3, #1
 8007dee:	d00a      	beq.n	8007e06 <__swsetup_r+0x9a>
 8007df0:	2200      	movs	r2, #0
 8007df2:	60a2      	str	r2, [r4, #8]
 8007df4:	6962      	ldr	r2, [r4, #20]
 8007df6:	4252      	negs	r2, r2
 8007df8:	61a2      	str	r2, [r4, #24]
 8007dfa:	6922      	ldr	r2, [r4, #16]
 8007dfc:	b942      	cbnz	r2, 8007e10 <__swsetup_r+0xa4>
 8007dfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e02:	d1c5      	bne.n	8007d90 <__swsetup_r+0x24>
 8007e04:	bd38      	pop	{r3, r4, r5, pc}
 8007e06:	0799      	lsls	r1, r3, #30
 8007e08:	bf58      	it	pl
 8007e0a:	6962      	ldrpl	r2, [r4, #20]
 8007e0c:	60a2      	str	r2, [r4, #8]
 8007e0e:	e7f4      	b.n	8007dfa <__swsetup_r+0x8e>
 8007e10:	2000      	movs	r0, #0
 8007e12:	e7f7      	b.n	8007e04 <__swsetup_r+0x98>
 8007e14:	2000001c 	.word	0x2000001c

08007e18 <memset>:
 8007e18:	4402      	add	r2, r0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d100      	bne.n	8007e22 <memset+0xa>
 8007e20:	4770      	bx	lr
 8007e22:	f803 1b01 	strb.w	r1, [r3], #1
 8007e26:	e7f9      	b.n	8007e1c <memset+0x4>

08007e28 <_close_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4d06      	ldr	r5, [pc, #24]	@ (8007e44 <_close_r+0x1c>)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4604      	mov	r4, r0
 8007e30:	4608      	mov	r0, r1
 8007e32:	602b      	str	r3, [r5, #0]
 8007e34:	f7f8 ff55 	bl	8000ce2 <_close>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_close_r+0x1a>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_close_r+0x1a>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	20001c68 	.word	0x20001c68

08007e48 <_lseek_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4d07      	ldr	r5, [pc, #28]	@ (8007e68 <_lseek_r+0x20>)
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	4608      	mov	r0, r1
 8007e50:	4611      	mov	r1, r2
 8007e52:	2200      	movs	r2, #0
 8007e54:	602a      	str	r2, [r5, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	f7f8 ff6a 	bl	8000d30 <_lseek>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_lseek_r+0x1e>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_lseek_r+0x1e>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	20001c68 	.word	0x20001c68

08007e6c <_read_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d07      	ldr	r5, [pc, #28]	@ (8007e8c <_read_r+0x20>)
 8007e70:	4604      	mov	r4, r0
 8007e72:	4608      	mov	r0, r1
 8007e74:	4611      	mov	r1, r2
 8007e76:	2200      	movs	r2, #0
 8007e78:	602a      	str	r2, [r5, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f7f8 ff14 	bl	8000ca8 <_read>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d102      	bne.n	8007e8a <_read_r+0x1e>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	b103      	cbz	r3, 8007e8a <_read_r+0x1e>
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	20001c68 	.word	0x20001c68

08007e90 <_write_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4d07      	ldr	r5, [pc, #28]	@ (8007eb0 <_write_r+0x20>)
 8007e94:	4604      	mov	r4, r0
 8007e96:	4608      	mov	r0, r1
 8007e98:	4611      	mov	r1, r2
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	602a      	str	r2, [r5, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f7f8 fb36 	bl	8000510 <_write>
 8007ea4:	1c43      	adds	r3, r0, #1
 8007ea6:	d102      	bne.n	8007eae <_write_r+0x1e>
 8007ea8:	682b      	ldr	r3, [r5, #0]
 8007eaa:	b103      	cbz	r3, 8007eae <_write_r+0x1e>
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	bd38      	pop	{r3, r4, r5, pc}
 8007eb0:	20001c68 	.word	0x20001c68

08007eb4 <__errno>:
 8007eb4:	4b01      	ldr	r3, [pc, #4]	@ (8007ebc <__errno+0x8>)
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	2000001c 	.word	0x2000001c

08007ec0 <__libc_init_array>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	4d0d      	ldr	r5, [pc, #52]	@ (8007ef8 <__libc_init_array+0x38>)
 8007ec4:	4c0d      	ldr	r4, [pc, #52]	@ (8007efc <__libc_init_array+0x3c>)
 8007ec6:	1b64      	subs	r4, r4, r5
 8007ec8:	10a4      	asrs	r4, r4, #2
 8007eca:	2600      	movs	r6, #0
 8007ecc:	42a6      	cmp	r6, r4
 8007ece:	d109      	bne.n	8007ee4 <__libc_init_array+0x24>
 8007ed0:	4d0b      	ldr	r5, [pc, #44]	@ (8007f00 <__libc_init_array+0x40>)
 8007ed2:	4c0c      	ldr	r4, [pc, #48]	@ (8007f04 <__libc_init_array+0x44>)
 8007ed4:	f000 fa62 	bl	800839c <_init>
 8007ed8:	1b64      	subs	r4, r4, r5
 8007eda:	10a4      	asrs	r4, r4, #2
 8007edc:	2600      	movs	r6, #0
 8007ede:	42a6      	cmp	r6, r4
 8007ee0:	d105      	bne.n	8007eee <__libc_init_array+0x2e>
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee8:	4798      	blx	r3
 8007eea:	3601      	adds	r6, #1
 8007eec:	e7ee      	b.n	8007ecc <__libc_init_array+0xc>
 8007eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef2:	4798      	blx	r3
 8007ef4:	3601      	adds	r6, #1
 8007ef6:	e7f2      	b.n	8007ede <__libc_init_array+0x1e>
 8007ef8:	080084a0 	.word	0x080084a0
 8007efc:	080084a0 	.word	0x080084a0
 8007f00:	080084a0 	.word	0x080084a0
 8007f04:	080084a4 	.word	0x080084a4

08007f08 <__retarget_lock_init_recursive>:
 8007f08:	4770      	bx	lr

08007f0a <__retarget_lock_acquire_recursive>:
 8007f0a:	4770      	bx	lr

08007f0c <__retarget_lock_release_recursive>:
 8007f0c:	4770      	bx	lr

08007f0e <memcpy>:
 8007f0e:	440a      	add	r2, r1
 8007f10:	4291      	cmp	r1, r2
 8007f12:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007f16:	d100      	bne.n	8007f1a <memcpy+0xc>
 8007f18:	4770      	bx	lr
 8007f1a:	b510      	push	{r4, lr}
 8007f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f24:	4291      	cmp	r1, r2
 8007f26:	d1f9      	bne.n	8007f1c <memcpy+0xe>
 8007f28:	bd10      	pop	{r4, pc}
	...

08007f2c <_free_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4605      	mov	r5, r0
 8007f30:	2900      	cmp	r1, #0
 8007f32:	d041      	beq.n	8007fb8 <_free_r+0x8c>
 8007f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f38:	1f0c      	subs	r4, r1, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bfb8      	it	lt
 8007f3e:	18e4      	addlt	r4, r4, r3
 8007f40:	f000 f8e0 	bl	8008104 <__malloc_lock>
 8007f44:	4a1d      	ldr	r2, [pc, #116]	@ (8007fbc <_free_r+0x90>)
 8007f46:	6813      	ldr	r3, [r2, #0]
 8007f48:	b933      	cbnz	r3, 8007f58 <_free_r+0x2c>
 8007f4a:	6063      	str	r3, [r4, #4]
 8007f4c:	6014      	str	r4, [r2, #0]
 8007f4e:	4628      	mov	r0, r5
 8007f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f54:	f000 b8dc 	b.w	8008110 <__malloc_unlock>
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	d908      	bls.n	8007f6e <_free_r+0x42>
 8007f5c:	6820      	ldr	r0, [r4, #0]
 8007f5e:	1821      	adds	r1, r4, r0
 8007f60:	428b      	cmp	r3, r1
 8007f62:	bf01      	itttt	eq
 8007f64:	6819      	ldreq	r1, [r3, #0]
 8007f66:	685b      	ldreq	r3, [r3, #4]
 8007f68:	1809      	addeq	r1, r1, r0
 8007f6a:	6021      	streq	r1, [r4, #0]
 8007f6c:	e7ed      	b.n	8007f4a <_free_r+0x1e>
 8007f6e:	461a      	mov	r2, r3
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	b10b      	cbz	r3, 8007f78 <_free_r+0x4c>
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	d9fa      	bls.n	8007f6e <_free_r+0x42>
 8007f78:	6811      	ldr	r1, [r2, #0]
 8007f7a:	1850      	adds	r0, r2, r1
 8007f7c:	42a0      	cmp	r0, r4
 8007f7e:	d10b      	bne.n	8007f98 <_free_r+0x6c>
 8007f80:	6820      	ldr	r0, [r4, #0]
 8007f82:	4401      	add	r1, r0
 8007f84:	1850      	adds	r0, r2, r1
 8007f86:	4283      	cmp	r3, r0
 8007f88:	6011      	str	r1, [r2, #0]
 8007f8a:	d1e0      	bne.n	8007f4e <_free_r+0x22>
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	6053      	str	r3, [r2, #4]
 8007f92:	4408      	add	r0, r1
 8007f94:	6010      	str	r0, [r2, #0]
 8007f96:	e7da      	b.n	8007f4e <_free_r+0x22>
 8007f98:	d902      	bls.n	8007fa0 <_free_r+0x74>
 8007f9a:	230c      	movs	r3, #12
 8007f9c:	602b      	str	r3, [r5, #0]
 8007f9e:	e7d6      	b.n	8007f4e <_free_r+0x22>
 8007fa0:	6820      	ldr	r0, [r4, #0]
 8007fa2:	1821      	adds	r1, r4, r0
 8007fa4:	428b      	cmp	r3, r1
 8007fa6:	bf04      	itt	eq
 8007fa8:	6819      	ldreq	r1, [r3, #0]
 8007faa:	685b      	ldreq	r3, [r3, #4]
 8007fac:	6063      	str	r3, [r4, #4]
 8007fae:	bf04      	itt	eq
 8007fb0:	1809      	addeq	r1, r1, r0
 8007fb2:	6021      	streq	r1, [r4, #0]
 8007fb4:	6054      	str	r4, [r2, #4]
 8007fb6:	e7ca      	b.n	8007f4e <_free_r+0x22>
 8007fb8:	bd38      	pop	{r3, r4, r5, pc}
 8007fba:	bf00      	nop
 8007fbc:	20001c74 	.word	0x20001c74

08007fc0 <sbrk_aligned>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	4e0f      	ldr	r6, [pc, #60]	@ (8008000 <sbrk_aligned+0x40>)
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	6831      	ldr	r1, [r6, #0]
 8007fc8:	4605      	mov	r5, r0
 8007fca:	b911      	cbnz	r1, 8007fd2 <sbrk_aligned+0x12>
 8007fcc:	f000 f9d6 	bl	800837c <_sbrk_r>
 8007fd0:	6030      	str	r0, [r6, #0]
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f000 f9d1 	bl	800837c <_sbrk_r>
 8007fda:	1c43      	adds	r3, r0, #1
 8007fdc:	d103      	bne.n	8007fe6 <sbrk_aligned+0x26>
 8007fde:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
 8007fe6:	1cc4      	adds	r4, r0, #3
 8007fe8:	f024 0403 	bic.w	r4, r4, #3
 8007fec:	42a0      	cmp	r0, r4
 8007fee:	d0f8      	beq.n	8007fe2 <sbrk_aligned+0x22>
 8007ff0:	1a21      	subs	r1, r4, r0
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 f9c2 	bl	800837c <_sbrk_r>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d1f2      	bne.n	8007fe2 <sbrk_aligned+0x22>
 8007ffc:	e7ef      	b.n	8007fde <sbrk_aligned+0x1e>
 8007ffe:	bf00      	nop
 8008000:	20001c70 	.word	0x20001c70

08008004 <_malloc_r>:
 8008004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008008:	1ccd      	adds	r5, r1, #3
 800800a:	f025 0503 	bic.w	r5, r5, #3
 800800e:	3508      	adds	r5, #8
 8008010:	2d0c      	cmp	r5, #12
 8008012:	bf38      	it	cc
 8008014:	250c      	movcc	r5, #12
 8008016:	2d00      	cmp	r5, #0
 8008018:	4606      	mov	r6, r0
 800801a:	db01      	blt.n	8008020 <_malloc_r+0x1c>
 800801c:	42a9      	cmp	r1, r5
 800801e:	d904      	bls.n	800802a <_malloc_r+0x26>
 8008020:	230c      	movs	r3, #12
 8008022:	6033      	str	r3, [r6, #0]
 8008024:	2000      	movs	r0, #0
 8008026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008100 <_malloc_r+0xfc>
 800802e:	f000 f869 	bl	8008104 <__malloc_lock>
 8008032:	f8d8 3000 	ldr.w	r3, [r8]
 8008036:	461c      	mov	r4, r3
 8008038:	bb44      	cbnz	r4, 800808c <_malloc_r+0x88>
 800803a:	4629      	mov	r1, r5
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff ffbf 	bl	8007fc0 <sbrk_aligned>
 8008042:	1c43      	adds	r3, r0, #1
 8008044:	4604      	mov	r4, r0
 8008046:	d158      	bne.n	80080fa <_malloc_r+0xf6>
 8008048:	f8d8 4000 	ldr.w	r4, [r8]
 800804c:	4627      	mov	r7, r4
 800804e:	2f00      	cmp	r7, #0
 8008050:	d143      	bne.n	80080da <_malloc_r+0xd6>
 8008052:	2c00      	cmp	r4, #0
 8008054:	d04b      	beq.n	80080ee <_malloc_r+0xea>
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	4639      	mov	r1, r7
 800805a:	4630      	mov	r0, r6
 800805c:	eb04 0903 	add.w	r9, r4, r3
 8008060:	f000 f98c 	bl	800837c <_sbrk_r>
 8008064:	4581      	cmp	r9, r0
 8008066:	d142      	bne.n	80080ee <_malloc_r+0xea>
 8008068:	6821      	ldr	r1, [r4, #0]
 800806a:	1a6d      	subs	r5, r5, r1
 800806c:	4629      	mov	r1, r5
 800806e:	4630      	mov	r0, r6
 8008070:	f7ff ffa6 	bl	8007fc0 <sbrk_aligned>
 8008074:	3001      	adds	r0, #1
 8008076:	d03a      	beq.n	80080ee <_malloc_r+0xea>
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	442b      	add	r3, r5
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	f8d8 3000 	ldr.w	r3, [r8]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	bb62      	cbnz	r2, 80080e0 <_malloc_r+0xdc>
 8008086:	f8c8 7000 	str.w	r7, [r8]
 800808a:	e00f      	b.n	80080ac <_malloc_r+0xa8>
 800808c:	6822      	ldr	r2, [r4, #0]
 800808e:	1b52      	subs	r2, r2, r5
 8008090:	d420      	bmi.n	80080d4 <_malloc_r+0xd0>
 8008092:	2a0b      	cmp	r2, #11
 8008094:	d917      	bls.n	80080c6 <_malloc_r+0xc2>
 8008096:	1961      	adds	r1, r4, r5
 8008098:	42a3      	cmp	r3, r4
 800809a:	6025      	str	r5, [r4, #0]
 800809c:	bf18      	it	ne
 800809e:	6059      	strne	r1, [r3, #4]
 80080a0:	6863      	ldr	r3, [r4, #4]
 80080a2:	bf08      	it	eq
 80080a4:	f8c8 1000 	streq.w	r1, [r8]
 80080a8:	5162      	str	r2, [r4, r5]
 80080aa:	604b      	str	r3, [r1, #4]
 80080ac:	4630      	mov	r0, r6
 80080ae:	f000 f82f 	bl	8008110 <__malloc_unlock>
 80080b2:	f104 000b 	add.w	r0, r4, #11
 80080b6:	1d23      	adds	r3, r4, #4
 80080b8:	f020 0007 	bic.w	r0, r0, #7
 80080bc:	1ac2      	subs	r2, r0, r3
 80080be:	bf1c      	itt	ne
 80080c0:	1a1b      	subne	r3, r3, r0
 80080c2:	50a3      	strne	r3, [r4, r2]
 80080c4:	e7af      	b.n	8008026 <_malloc_r+0x22>
 80080c6:	6862      	ldr	r2, [r4, #4]
 80080c8:	42a3      	cmp	r3, r4
 80080ca:	bf0c      	ite	eq
 80080cc:	f8c8 2000 	streq.w	r2, [r8]
 80080d0:	605a      	strne	r2, [r3, #4]
 80080d2:	e7eb      	b.n	80080ac <_malloc_r+0xa8>
 80080d4:	4623      	mov	r3, r4
 80080d6:	6864      	ldr	r4, [r4, #4]
 80080d8:	e7ae      	b.n	8008038 <_malloc_r+0x34>
 80080da:	463c      	mov	r4, r7
 80080dc:	687f      	ldr	r7, [r7, #4]
 80080de:	e7b6      	b.n	800804e <_malloc_r+0x4a>
 80080e0:	461a      	mov	r2, r3
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	d1fb      	bne.n	80080e0 <_malloc_r+0xdc>
 80080e8:	2300      	movs	r3, #0
 80080ea:	6053      	str	r3, [r2, #4]
 80080ec:	e7de      	b.n	80080ac <_malloc_r+0xa8>
 80080ee:	230c      	movs	r3, #12
 80080f0:	6033      	str	r3, [r6, #0]
 80080f2:	4630      	mov	r0, r6
 80080f4:	f000 f80c 	bl	8008110 <__malloc_unlock>
 80080f8:	e794      	b.n	8008024 <_malloc_r+0x20>
 80080fa:	6005      	str	r5, [r0, #0]
 80080fc:	e7d6      	b.n	80080ac <_malloc_r+0xa8>
 80080fe:	bf00      	nop
 8008100:	20001c74 	.word	0x20001c74

08008104 <__malloc_lock>:
 8008104:	4801      	ldr	r0, [pc, #4]	@ (800810c <__malloc_lock+0x8>)
 8008106:	f7ff bf00 	b.w	8007f0a <__retarget_lock_acquire_recursive>
 800810a:	bf00      	nop
 800810c:	20001c6c 	.word	0x20001c6c

08008110 <__malloc_unlock>:
 8008110:	4801      	ldr	r0, [pc, #4]	@ (8008118 <__malloc_unlock+0x8>)
 8008112:	f7ff befb 	b.w	8007f0c <__retarget_lock_release_recursive>
 8008116:	bf00      	nop
 8008118:	20001c6c 	.word	0x20001c6c

0800811c <__sflush_r>:
 800811c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008124:	0716      	lsls	r6, r2, #28
 8008126:	4605      	mov	r5, r0
 8008128:	460c      	mov	r4, r1
 800812a:	d454      	bmi.n	80081d6 <__sflush_r+0xba>
 800812c:	684b      	ldr	r3, [r1, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	dc02      	bgt.n	8008138 <__sflush_r+0x1c>
 8008132:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008134:	2b00      	cmp	r3, #0
 8008136:	dd48      	ble.n	80081ca <__sflush_r+0xae>
 8008138:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800813a:	2e00      	cmp	r6, #0
 800813c:	d045      	beq.n	80081ca <__sflush_r+0xae>
 800813e:	2300      	movs	r3, #0
 8008140:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008144:	682f      	ldr	r7, [r5, #0]
 8008146:	6a21      	ldr	r1, [r4, #32]
 8008148:	602b      	str	r3, [r5, #0]
 800814a:	d030      	beq.n	80081ae <__sflush_r+0x92>
 800814c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	0759      	lsls	r1, r3, #29
 8008152:	d505      	bpl.n	8008160 <__sflush_r+0x44>
 8008154:	6863      	ldr	r3, [r4, #4]
 8008156:	1ad2      	subs	r2, r2, r3
 8008158:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800815a:	b10b      	cbz	r3, 8008160 <__sflush_r+0x44>
 800815c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800815e:	1ad2      	subs	r2, r2, r3
 8008160:	2300      	movs	r3, #0
 8008162:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008164:	6a21      	ldr	r1, [r4, #32]
 8008166:	4628      	mov	r0, r5
 8008168:	47b0      	blx	r6
 800816a:	1c43      	adds	r3, r0, #1
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	d106      	bne.n	800817e <__sflush_r+0x62>
 8008170:	6829      	ldr	r1, [r5, #0]
 8008172:	291d      	cmp	r1, #29
 8008174:	d82b      	bhi.n	80081ce <__sflush_r+0xb2>
 8008176:	4a2a      	ldr	r2, [pc, #168]	@ (8008220 <__sflush_r+0x104>)
 8008178:	410a      	asrs	r2, r1
 800817a:	07d6      	lsls	r6, r2, #31
 800817c:	d427      	bmi.n	80081ce <__sflush_r+0xb2>
 800817e:	2200      	movs	r2, #0
 8008180:	6062      	str	r2, [r4, #4]
 8008182:	04d9      	lsls	r1, r3, #19
 8008184:	6922      	ldr	r2, [r4, #16]
 8008186:	6022      	str	r2, [r4, #0]
 8008188:	d504      	bpl.n	8008194 <__sflush_r+0x78>
 800818a:	1c42      	adds	r2, r0, #1
 800818c:	d101      	bne.n	8008192 <__sflush_r+0x76>
 800818e:	682b      	ldr	r3, [r5, #0]
 8008190:	b903      	cbnz	r3, 8008194 <__sflush_r+0x78>
 8008192:	6560      	str	r0, [r4, #84]	@ 0x54
 8008194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008196:	602f      	str	r7, [r5, #0]
 8008198:	b1b9      	cbz	r1, 80081ca <__sflush_r+0xae>
 800819a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800819e:	4299      	cmp	r1, r3
 80081a0:	d002      	beq.n	80081a8 <__sflush_r+0x8c>
 80081a2:	4628      	mov	r0, r5
 80081a4:	f7ff fec2 	bl	8007f2c <_free_r>
 80081a8:	2300      	movs	r3, #0
 80081aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80081ac:	e00d      	b.n	80081ca <__sflush_r+0xae>
 80081ae:	2301      	movs	r3, #1
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b0      	blx	r6
 80081b4:	4602      	mov	r2, r0
 80081b6:	1c50      	adds	r0, r2, #1
 80081b8:	d1c9      	bne.n	800814e <__sflush_r+0x32>
 80081ba:	682b      	ldr	r3, [r5, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0c6      	beq.n	800814e <__sflush_r+0x32>
 80081c0:	2b1d      	cmp	r3, #29
 80081c2:	d001      	beq.n	80081c8 <__sflush_r+0xac>
 80081c4:	2b16      	cmp	r3, #22
 80081c6:	d11e      	bne.n	8008206 <__sflush_r+0xea>
 80081c8:	602f      	str	r7, [r5, #0]
 80081ca:	2000      	movs	r0, #0
 80081cc:	e022      	b.n	8008214 <__sflush_r+0xf8>
 80081ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081d2:	b21b      	sxth	r3, r3
 80081d4:	e01b      	b.n	800820e <__sflush_r+0xf2>
 80081d6:	690f      	ldr	r7, [r1, #16]
 80081d8:	2f00      	cmp	r7, #0
 80081da:	d0f6      	beq.n	80081ca <__sflush_r+0xae>
 80081dc:	0793      	lsls	r3, r2, #30
 80081de:	680e      	ldr	r6, [r1, #0]
 80081e0:	bf08      	it	eq
 80081e2:	694b      	ldreq	r3, [r1, #20]
 80081e4:	600f      	str	r7, [r1, #0]
 80081e6:	bf18      	it	ne
 80081e8:	2300      	movne	r3, #0
 80081ea:	eba6 0807 	sub.w	r8, r6, r7
 80081ee:	608b      	str	r3, [r1, #8]
 80081f0:	f1b8 0f00 	cmp.w	r8, #0
 80081f4:	dde9      	ble.n	80081ca <__sflush_r+0xae>
 80081f6:	6a21      	ldr	r1, [r4, #32]
 80081f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80081fa:	4643      	mov	r3, r8
 80081fc:	463a      	mov	r2, r7
 80081fe:	4628      	mov	r0, r5
 8008200:	47b0      	blx	r6
 8008202:	2800      	cmp	r0, #0
 8008204:	dc08      	bgt.n	8008218 <__sflush_r+0xfc>
 8008206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800820a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800820e:	81a3      	strh	r3, [r4, #12]
 8008210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008218:	4407      	add	r7, r0
 800821a:	eba8 0800 	sub.w	r8, r8, r0
 800821e:	e7e7      	b.n	80081f0 <__sflush_r+0xd4>
 8008220:	dfbffffe 	.word	0xdfbffffe

08008224 <_fflush_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	690b      	ldr	r3, [r1, #16]
 8008228:	4605      	mov	r5, r0
 800822a:	460c      	mov	r4, r1
 800822c:	b913      	cbnz	r3, 8008234 <_fflush_r+0x10>
 800822e:	2500      	movs	r5, #0
 8008230:	4628      	mov	r0, r5
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	b118      	cbz	r0, 800823e <_fflush_r+0x1a>
 8008236:	6a03      	ldr	r3, [r0, #32]
 8008238:	b90b      	cbnz	r3, 800823e <_fflush_r+0x1a>
 800823a:	f7ff fc81 	bl	8007b40 <__sinit>
 800823e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0f3      	beq.n	800822e <_fflush_r+0xa>
 8008246:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008248:	07d0      	lsls	r0, r2, #31
 800824a:	d404      	bmi.n	8008256 <_fflush_r+0x32>
 800824c:	0599      	lsls	r1, r3, #22
 800824e:	d402      	bmi.n	8008256 <_fflush_r+0x32>
 8008250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008252:	f7ff fe5a 	bl	8007f0a <__retarget_lock_acquire_recursive>
 8008256:	4628      	mov	r0, r5
 8008258:	4621      	mov	r1, r4
 800825a:	f7ff ff5f 	bl	800811c <__sflush_r>
 800825e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008260:	07da      	lsls	r2, r3, #31
 8008262:	4605      	mov	r5, r0
 8008264:	d4e4      	bmi.n	8008230 <_fflush_r+0xc>
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	059b      	lsls	r3, r3, #22
 800826a:	d4e1      	bmi.n	8008230 <_fflush_r+0xc>
 800826c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800826e:	f7ff fe4d 	bl	8007f0c <__retarget_lock_release_recursive>
 8008272:	e7dd      	b.n	8008230 <_fflush_r+0xc>

08008274 <__swhatbuf_r>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	460c      	mov	r4, r1
 8008278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827c:	2900      	cmp	r1, #0
 800827e:	b096      	sub	sp, #88	@ 0x58
 8008280:	4615      	mov	r5, r2
 8008282:	461e      	mov	r6, r3
 8008284:	da0d      	bge.n	80082a2 <__swhatbuf_r+0x2e>
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800828c:	f04f 0100 	mov.w	r1, #0
 8008290:	bf14      	ite	ne
 8008292:	2340      	movne	r3, #64	@ 0x40
 8008294:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008298:	2000      	movs	r0, #0
 800829a:	6031      	str	r1, [r6, #0]
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	b016      	add	sp, #88	@ 0x58
 80082a0:	bd70      	pop	{r4, r5, r6, pc}
 80082a2:	466a      	mov	r2, sp
 80082a4:	f000 f848 	bl	8008338 <_fstat_r>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	dbec      	blt.n	8008286 <__swhatbuf_r+0x12>
 80082ac:	9901      	ldr	r1, [sp, #4]
 80082ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082b6:	4259      	negs	r1, r3
 80082b8:	4159      	adcs	r1, r3
 80082ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082be:	e7eb      	b.n	8008298 <__swhatbuf_r+0x24>

080082c0 <__smakebuf_r>:
 80082c0:	898b      	ldrh	r3, [r1, #12]
 80082c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c4:	079d      	lsls	r5, r3, #30
 80082c6:	4606      	mov	r6, r0
 80082c8:	460c      	mov	r4, r1
 80082ca:	d507      	bpl.n	80082dc <__smakebuf_r+0x1c>
 80082cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	2301      	movs	r3, #1
 80082d6:	6163      	str	r3, [r4, #20]
 80082d8:	b003      	add	sp, #12
 80082da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082dc:	ab01      	add	r3, sp, #4
 80082de:	466a      	mov	r2, sp
 80082e0:	f7ff ffc8 	bl	8008274 <__swhatbuf_r>
 80082e4:	9f00      	ldr	r7, [sp, #0]
 80082e6:	4605      	mov	r5, r0
 80082e8:	4639      	mov	r1, r7
 80082ea:	4630      	mov	r0, r6
 80082ec:	f7ff fe8a 	bl	8008004 <_malloc_r>
 80082f0:	b948      	cbnz	r0, 8008306 <__smakebuf_r+0x46>
 80082f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082f6:	059a      	lsls	r2, r3, #22
 80082f8:	d4ee      	bmi.n	80082d8 <__smakebuf_r+0x18>
 80082fa:	f023 0303 	bic.w	r3, r3, #3
 80082fe:	f043 0302 	orr.w	r3, r3, #2
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	e7e2      	b.n	80082cc <__smakebuf_r+0xc>
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	6020      	str	r0, [r4, #0]
 800830a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	9b01      	ldr	r3, [sp, #4]
 8008312:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008316:	b15b      	cbz	r3, 8008330 <__smakebuf_r+0x70>
 8008318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800831c:	4630      	mov	r0, r6
 800831e:	f000 f81d 	bl	800835c <_isatty_r>
 8008322:	b128      	cbz	r0, 8008330 <__smakebuf_r+0x70>
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f023 0303 	bic.w	r3, r3, #3
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	431d      	orrs	r5, r3
 8008334:	81a5      	strh	r5, [r4, #12]
 8008336:	e7cf      	b.n	80082d8 <__smakebuf_r+0x18>

08008338 <_fstat_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d07      	ldr	r5, [pc, #28]	@ (8008358 <_fstat_r+0x20>)
 800833c:	2300      	movs	r3, #0
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	4611      	mov	r1, r2
 8008344:	602b      	str	r3, [r5, #0]
 8008346:	f7f8 fcd8 	bl	8000cfa <_fstat>
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	d102      	bne.n	8008354 <_fstat_r+0x1c>
 800834e:	682b      	ldr	r3, [r5, #0]
 8008350:	b103      	cbz	r3, 8008354 <_fstat_r+0x1c>
 8008352:	6023      	str	r3, [r4, #0]
 8008354:	bd38      	pop	{r3, r4, r5, pc}
 8008356:	bf00      	nop
 8008358:	20001c68 	.word	0x20001c68

0800835c <_isatty_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4d06      	ldr	r5, [pc, #24]	@ (8008378 <_isatty_r+0x1c>)
 8008360:	2300      	movs	r3, #0
 8008362:	4604      	mov	r4, r0
 8008364:	4608      	mov	r0, r1
 8008366:	602b      	str	r3, [r5, #0]
 8008368:	f7f8 fcd7 	bl	8000d1a <_isatty>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d102      	bne.n	8008376 <_isatty_r+0x1a>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	b103      	cbz	r3, 8008376 <_isatty_r+0x1a>
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	20001c68 	.word	0x20001c68

0800837c <_sbrk_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4d06      	ldr	r5, [pc, #24]	@ (8008398 <_sbrk_r+0x1c>)
 8008380:	2300      	movs	r3, #0
 8008382:	4604      	mov	r4, r0
 8008384:	4608      	mov	r0, r1
 8008386:	602b      	str	r3, [r5, #0]
 8008388:	f7f8 fce0 	bl	8000d4c <_sbrk>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_sbrk_r+0x1a>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_sbrk_r+0x1a>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	20001c68 	.word	0x20001c68

0800839c <_init>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	bf00      	nop
 80083a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a2:	bc08      	pop	{r3}
 80083a4:	469e      	mov	lr, r3
 80083a6:	4770      	bx	lr

080083a8 <_fini>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	bf00      	nop
 80083ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ae:	bc08      	pop	{r3}
 80083b0:	469e      	mov	lr, r3
 80083b2:	4770      	bx	lr
